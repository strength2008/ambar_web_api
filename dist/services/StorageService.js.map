{"version":3,"sources":["../../src/services/StorageService.js"],"names":["initializeStorage","Promise","resolve","reject","esClient","Client","host","elasticSearchUrl","promisifyAll","RedisClient","prototype","Multi","redisClient","createClient","redisHost","port","redisPort","mongoPromise","connect","mongoDbUrl","err","db","console","error","all","initRabbit","createLogIndexIfNotExist","then","mongoConnection","rabbitConnection","result","elasticSearch","mongoDb","redis","rabbit","catch"],"mappings":"yuBAAA;AACA,8C;AACA,8B;AACA,oC;AACA;AACA,mC;;AAEO,IAAMA,gDAAoB,SAApBA,iBAAoB,WAAM,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvE,MAAMC,WAAW,IAAI,wBAAcC,MAAlB,CAAyB;AACzCC,SAAM,iBAAOC,gBAD4B,EAAzB,CAAjB;;;AAIA,qBAASC,YAAT,CAAsB,gBAAMC,WAAN,CAAkBC,SAAxC;AACA,qBAASF,YAAT,CAAsB,gBAAMG,KAAN,CAAYD,SAAlC;;AAEA,MAAME,cAAc,gBAAMC,YAAN,CAAmB,EAAEP,MAAM,iBAAOQ,SAAf,EAA0BC,MAAM,iBAAOC,SAAvC,EAAnB,CAApB;;AAEA,MAAMC,eAAe,IAAIhB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACrD,wBAAYe,OAAZ,CAAoB,iBAAOC,UAA3B,EAAuC,UAACC,GAAD,EAAMC,EAAN,EAAa;AACnD,QAAID,GAAJ,EAAS;AACRE,aAAQC,KAAR,CAAcH,GAAd;AACAjB,YAAOiB,GAAP;AACA;AACDlB,YAAQmB,EAAR;AACA,IAND;AAOA,GARoB,CAArB;;AAUApB,UAAQuB,GAAR,CAAY,CAACP,YAAD,EAAe,kBAAWQ,UAA1B,EAAsC,eAAQC,wBAAR,CAAiCtB,QAAjC,CAAtC,CAAZ;AACEuB,MADF,CACO,gBAAyC,qCAAvCC,eAAuC,YAAtBC,gBAAsB;AAC9C,OAAMC,SAAS;AACdC,mBAAe3B,QADD;AAEd4B,aAASJ,eAFK;AAGdK,WAAOrB,WAHO;AAIdsB,YAAQL,gBAJM,EAAf;;AAMA3B,WAAQ4B,MAAR;AACA,GATF;AAUEK,OAVF,CAUQ,uBAAOhC,OAAOiB,GAAP,CAAP,EAVR;AAWA,EA/BsC,CAAN,EAA1B","file":"StorageService.js","sourcesContent":["import { MongoClient } from 'mongodb'\nimport elasticsearch from 'elasticsearch'\nimport redis from 'redis'\nimport bluebird from 'bluebird'\nimport { EsProxy, QueueProxy } from './index.js'\nimport config from '../config'\n\nexport const initializeStorage = () => new Promise((resolve, reject) => {\n\tconst esClient = new elasticsearch.Client({\n\t\thost: config.elasticSearchUrl\n\t})\n\n\tbluebird.promisifyAll(redis.RedisClient.prototype)\n\tbluebird.promisifyAll(redis.Multi.prototype)\n\n\tconst redisClient = redis.createClient({ host: config.redisHost, port: config.redisPort })\n\n\tconst mongoPromise = new Promise((resolve, reject) => {\n\t\tMongoClient.connect(config.mongoDbUrl, (err, db) => {\n\t\t\tif (err) {\n\t\t\t\tconsole.error(err)\n\t\t\t\treject(err)\n\t\t\t}\n\t\t\tresolve(db)\n\t\t})\n\t})\n\n\tPromise.all([mongoPromise, QueueProxy.initRabbit, EsProxy.createLogIndexIfNotExist(esClient)])\n\t\t.then(([mongoConnection, rabbitConnection]) => {\n\t\t\tconst result = {\n\t\t\t\telasticSearch: esClient,\n\t\t\t\tmongoDb: mongoConnection,\n\t\t\t\tredis: redisClient,\n\t\t\t\trabbit: rabbitConnection\n\t\t\t}\n\t\t\tresolve(result)\n\t\t})\n\t\t.catch(err => reject(err))\n})\n"]}