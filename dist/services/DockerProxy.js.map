{"version":3,"sources":["../../src/services/DockerProxy.js"],"names":["CRAWLER_PREFIX","PIPELINE_PREFIX","AMBAR_INTERNAL_NETWORK","dockerClient","socketPath","generateCrawlerContainerName","uid","generatePipelineContainerName","name","createCrawlerContainer","apiToken","Promise","resolve","reject","env","apiUrl","rabbitHost","createContainer","Image","dockerRepo","crawlerImageName","Env","HostConfig","RestartPolicy","Name","MaximumRetryCount","NetworkMode","err","container","getCrawlerContainers","getContainers","checkIfCrawlerContainerExists","checkIfContainerExists","tryRemoveCrawlerContainer","tryRemoveContainer","startCrawlerContainer","startContainerByName","stopCrawlerContainer","stopContainerByName","restartCrawlerContainer","restartContainerByName","getCrawlerContainerState","getContainerStateByName","createPipelineContainer","externalNERs","ocrPdfMaxPageCount","ocrPdfSymbolsPerPageThreshold","JSON","stringify","nerEnabled","preserveOriginals","pipelineImageName","tryRemovePipelineContainer","startPipelineContainer","prefix","listContainers","all","containers","result","filter","c","Names","length","some","n","startsWith","map","replace","containerName","then","filteredContainers","catch","exist","removeContainer","res","getContainerIdByName","statusCode","message","Id","getContainer","id","remove","force","data","start","stop","restart","inspect"],"mappings":"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","file":"DockerProxy.js","sourcesContent":["import docker from 'dockerode'\nimport config from '../config'\n\nconst CRAWLER_PREFIX = 'ambar_crawler'\nconst PIPELINE_PREFIX = 'ambar_pipeline'\n\nconst AMBAR_INTERNAL_NETWORK = 'ambar_internal_network'\n\nconst dockerClient = new docker({ socketPath: '/var/run/docker.sock' })\n\nconst generateCrawlerContainerName = (uid) => `${CRAWLER_PREFIX}_${uid}`\nconst generatePipelineContainerName = (name) => `${PIPELINE_PREFIX}_${name}`\n\n//// CRAWLERS /////////////////////////////////////////////////////////////////////\n\nexport const createCrawlerContainer = (name, apiToken) => new Promise((resolve, reject) => {\n    const env = [`AMBAR_API_URL=${config.apiUrl}`, `AMBAR_API_TOKEN=${apiToken}`, `AMBAR_RABBIT_HOST=${config.rabbitHost}`, `AMBAR_CRAWLER_NAME=${name}`]\n\n    dockerClient.createContainer({\n        Image: `${config.dockerRepo}/${config.crawlerImageName}`,\n        name: generateCrawlerContainerName(name),\n        Env: env,\n        HostConfig: {\n            RestartPolicy: { Name: 'always', MaximumRetryCount: 0 },\n            NetworkMode: AMBAR_INTERNAL_NETWORK\n        }\n    },\n        (err, container) => {\n            if (err) {\n                reject(err)\n                return\n            }\n            resolve(container)\n        })\n})\n\nexport const getCrawlerContainers = () => getContainers(CRAWLER_PREFIX)\n\nexport const checkIfCrawlerContainerExists = (name) => checkIfContainerExists(CRAWLER_PREFIX, name)\n\nexport const tryRemoveCrawlerContainer = (name) => tryRemoveContainer(CRAWLER_PREFIX, name)\n\nexport const startCrawlerContainer = (name) => startContainerByName(CRAWLER_PREFIX, name)\n\nexport const stopCrawlerContainer = (name) => stopContainerByName(CRAWLER_PREFIX, name)\n\nexport const restartCrawlerContainer = (name) => restartContainerByName(CRAWLER_PREFIX, name)\n\nexport const getCrawlerContainerState = (name) => getContainerStateByName(CRAWLER_PREFIX, name)\n\n//// PIPELINES ////////////////////////////////////////////////////////////////////\n\nexport const createPipelineContainer = (apiToken, name, externalNERs) => new Promise((resolve, reject) => {\n    const env = [`AMBAR_API_URL=${config.apiUrl}`, `AMBAR_API_TOKEN=${apiToken}`, `AMBAR_RABBIT_HOST=${config.rabbitHost}`, `AMBAR_PIPELINE_NAME=${name}`, `OCR_PDF_MAX_PAGE_COUNT=${config.ocrPdfMaxPageCount}`, `OCR_PDF_SYMBOLS_PER_PAGE_THRESHOLD=${config.ocrPdfSymbolsPerPageThreshold}`, `EXTERNAL_NERS=${JSON.stringify(externalNERs)}`, `NER_ENABLED=${config.nerEnabled}`, `PRESERVE_ORIGINALS=${config.preserveOriginals}`]\n\n    dockerClient.createContainer({\n        Image: `${config.dockerRepo}/${config.pipelineImageName}`,\n        name: generatePipelineContainerName(name),\n        Env: env,\n        HostConfig: {\n            RestartPolicy: { Name: 'always', MaximumRetryCount: 0 },\n            NetworkMode: AMBAR_INTERNAL_NETWORK\n        }\n    },\n        (err, container) => {\n            if (err) {\n                reject(err)\n                return\n            }\n            resolve(container)\n        })\n})\n\nexport const tryRemovePipelineContainer = (name) => tryRemoveContainer(PIPELINE_PREFIX, name)\n\nexport const startPipelineContainer = (name) => startContainerByName(PIPELINE_PREFIX, name)\n\n///////////////////////////////////////////////////////////////////////////////////\n\nconst getContainers = (prefix) => new Promise((resolve, reject) =>\n    dockerClient.listContainers({ all: true }, (err, containers) => {\n        if (err) {\n            reject(err)\n            return\n        }\n\n        const result = containers\n            .filter(c => c.Names.length === 1 && c.Names.some(n => n.startsWith(`/${prefix}`)))\n            .map(c => ({ ...c, Names: [c.Names[0].replace(`/${prefix}_`, '')] }))\n\n        resolve(result)\n    })\n)\n\nconst checkIfContainerExists = (prefix, containerName) => new Promise((resolve, reject) =>\n    getContainers(prefix)\n        .then(containers => {\n            const filteredContainers = containers.filter(c => c.Names.some(n => n === containerName))\n\n            resolve(filteredContainers.length !== 0)\n        })\n        .catch(err => reject(err))\n)\n\nconst tryRemoveContainer = (prefix, name) => new Promise((resolve, reject) =>\n    checkIfContainerExists(prefix, name)\n        .then(exist => {\n            if (!exist) {\n                resolve()\n                return\n            }\n\n            return removeContainer(prefix, name)\n                .then((res) => {\n                    resolve(res)\n                })\n        })\n        .catch(err => reject(err))\n)\n\nconst getContainerIdByName = (prefix, containerName) => new Promise((resolve, reject) =>\n    getContainers(prefix)\n        .then(containers => {\n            const filteredContainers = containers\n                .filter(c => c.Names.some(n => n === containerName))\n\n            if (!filteredContainers || filteredContainers.length === 0) {\n                throw {\n                    statusCode: 404,\n                    message: `Container with name ${containerName} not found`\n                }\n            }\n\n            resolve(filteredContainers[0].Id)\n        })\n        .catch(err => reject(err))\n)\n\nconst removeContainer = (prefix, name) => new Promise((resolve, reject) =>\n    getContainerIdByName(prefix, name)\n        .then(id => dockerClient.getContainer(id).remove({ force: true }, (err, data) => {\n            if (err) {\n                reject(err)\n            } else {\n                resolve(data)\n            }\n        }))\n        .catch(err => reject(err))\n)\n\nconst startContainerByName = (prefix, name) => new Promise((resolve, reject) =>\n    getContainerIdByName(prefix, name)\n        .then(id => {\n            dockerClient.getContainer(id).start((err, data) => {\n                if (err) {\n                    reject(err)\n                    return\n                }\n\n                resolve(data)\n            })\n        })\n        .catch(err => reject(err))\n)\n\nconst stopContainerByName = (prefix, name) => new Promise((resolve, reject) =>\n    getContainerIdByName(prefix, name)\n        .then(id => {\n            dockerClient.getContainer(id).stop((err, data) => {\n                if (err) {\n                    reject(err)\n                    return\n                }\n\n                resolve(data)\n            })\n        })\n        .catch(err => reject(err))\n)\n\nconst restartContainerByName = (prefix, name) => new Promise((resolve, reject) =>\n    getContainerIdByName(prefix, name)\n        .then(id => {\n            dockerClient.getContainer(id).restart((err, data) => {\n                if (err) {\n                    reject(err)\n                    return\n                }\n\n                resolve(data)\n            })\n        })\n        .catch(err => reject(err))\n)\n\nconst getContainerStateByName = (prefix, name) => new Promise((resolve, reject) =>\n    getContainerIdByName(prefix, name)\n        .then(id => dockerClient.getContainer(id).inspect((err, data) => {\n            if (err) {\n                reject(err)\n                return\n            }\n\n            resolve(data)\n        })\n        )\n        .catch(err => reject(err))\n)\n"]}