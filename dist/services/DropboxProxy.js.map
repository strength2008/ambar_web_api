{"version":3,"sources":["../../src/services/DropboxProxy.js"],"names":["disableToken","token","Promise","resolve","reject","dbx","accessToken","authTokenRevoke","then","catch","err","tryDisableToken"],"mappings":"sIAAA,kC;;AAEO,IAAMA,sCAAe,SAAfA,YAAe,CAACC,KAAD,UAAW,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpE,YAAIC,MAAM,sBAAY,EAAEC,aAAaL,KAAf,EAAZ,CAAV;AACAI,YAAIE,eAAJ;AACKC,YADL,CACU,oBAAML,SAAN,EADV;AAEKM,aAFL,CAEW,UAACC,GAAD,UAASN,OAAOM,GAAP,CAAT,EAFX;AAGH,KALsC,CAAX,EAArB;;AAOA,IAAMC,4CAAkB,SAAlBA,eAAkB,CAACV,KAAD,UAAW,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvE,YAAIC,MAAM,sBAAY,EAAEC,aAAaL,KAAf,EAAZ,CAAV;AACAI,YAAIE,eAAJ;AACKC,YADL,CACU,oBAAML,QAAQ,IAAR,CAAN,EADV;AAEKM,aAFL,CAEW,UAACC,GAAD,UAASP,QAAQ,KAAR,CAAT,EAFX;AAGH,KALyC,CAAX,EAAxB","file":"DropboxProxy.js","sourcesContent":["import Dropbox from 'dropbox'\n\nexport const disableToken = (token) => new Promise((resolve, reject) => {\n    let dbx = new Dropbox({ accessToken: token })\n    dbx.authTokenRevoke()\n        .then(() => resolve())\n        .catch((err) => reject(err))\n})\n\nexport const tryDisableToken = (token) => new Promise((resolve, reject) => {\n    let dbx = new Dropbox({ accessToken: token })\n    dbx.authTokenRevoke()\n        .then(() => resolve(true))\n        .catch((err) => resolve(false))\n})"]}