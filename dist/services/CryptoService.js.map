{"version":3,"sources":["../../src/services/CryptoService.js"],"names":["pbkdf2","promisify","DOWNLOAD_URI_CIPHER_KEY","getSha256","data","createHash","update","digest","getSha1","getPasswordHash","password","salt","then","hash","toString","generateRandom","length","randomBytes","encryptDownloadUri","indexName","fileId","cipher","createCipher","uri","JSON","stringify","final","decryptDownloadUri","decipher","createDecipher","decryptedUri","parse"],"mappings":"wOAAA,gC;AACA,oC;;AAEA,IAAMA,SAAS,mBAASC,SAAT,CAAmB,iBAAOD,MAA1B,CAAf;;AAEA,IAAME,0BAA0B,UAAhC;;AAEO,IAAMC,gCAAY,SAAZA,SAAY,CAACC,IAAD,UAAU,iBAAOC,UAAP,CAAkB,QAAlB,EAA4BC,MAA5B,CAAmCF,IAAnC,EAAyCG,MAAzC,CAAgD,KAAhD,CAAV,EAAlB;AACA,IAAMC,4BAAU,SAAVA,OAAU,CAACJ,IAAD,UAAU,iBAAOC,UAAP,CAAkB,MAAlB,EAA0BC,MAA1B,CAAiCF,IAAjC,EAAuCG,MAAvC,CAA8C,KAA9C,CAAV,EAAhB;;AAEA,IAAME,4CAAkB,SAAlBA,eAAkB,CAACC,QAAD,EAAWC,IAAX,UAAoBX,OAAOU,QAAP,EAAiBC,IAAjB,EAAuB,IAAvB,EAA6B,GAA7B,EAAkC,QAAlC,EAA4CC,IAA5C,CAAiD,UAACC,IAAD,UAAUA,KAAKC,QAAL,CAAc,KAAd,CAAV,EAAjD,CAApB,EAAxB;;AAEA,IAAMC,0CAAiB,SAAjBA,cAAiB,QAACC,MAAD,uEAAU,GAAV,QAAkB,iBAAOC,WAAP,CAAmBD,MAAnB,EAA2BF,QAA3B,CAAoC,KAApC,CAAlB,EAAvB;;AAEA,IAAMI,kDAAqB,SAArBA,kBAAqB,CAACC,SAAD,EAAYC,MAAZ,EAAuB;AACrD,QAAMC,SAAS,iBAAOC,YAAP,CAAoB,QAApB,EAA8BpB,uBAA9B,CAAf;AACA,QAAMqB,MAAM,EAACJ,WAAWA,SAAZ,EAAuBC,QAAQA,MAA/B,EAAZ;;AAEA,WAAOC,OAAOf,MAAP,CAAckB,KAAKC,SAAL,CAAeF,GAAf,CAAd,EAAmC,MAAnC,EAA2C,KAA3C,IAAoDF,OAAOK,KAAP,CAAa,KAAb,CAA3D;AACH,CALM;;AAOA,IAAMC,kDAAqB,SAArBA,kBAAqB,CAACJ,GAAD,EAAS;AACvC,QAAMK,WAAW,iBAAOC,cAAP,CAAsB,QAAtB,EAAgC3B,uBAAhC,CAAjB;AACA,QAAM4B,eAAeF,SAAStB,MAAT,CAAgBiB,GAAhB,EAAqB,KAArB,EAA4B,MAA5B,IAAsCK,SAASF,KAAT,CAAe,MAAf,CAA3D;;AAEA,WAAOF,KAAKO,KAAL,CAAWD,YAAX,CAAP;AACH,CALM","file":"CryptoService.js","sourcesContent":["import crypto from 'crypto'\nimport bluebird from 'bluebird'\n\nconst pbkdf2 = bluebird.promisify(crypto.pbkdf2);\n\nconst DOWNLOAD_URI_CIPHER_KEY = 'BfeZp2UV'\n\nexport const getSha256 = (data) => crypto.createHash('sha256').update(data).digest('hex')\nexport const getSha1 = (data) => crypto.createHash('sha1').update(data).digest('hex')\n\nexport const getPasswordHash = (password, salt) => pbkdf2(password, salt, 8192, 512, 'sha512').then((hash) => hash.toString('hex'))\n\nexport const generateRandom = (length = 256) => crypto.randomBytes(length).toString('hex')\n\nexport const encryptDownloadUri = (indexName, fileId) => {\n    const cipher = crypto.createCipher('aes192', DOWNLOAD_URI_CIPHER_KEY)\n    const uri = {indexName: indexName, fileId: fileId}\n\n    return cipher.update(JSON.stringify(uri), 'utf8', 'hex') + cipher.final('hex')\n}\n\nexport const decryptDownloadUri = (uri) => {\n    const decipher = crypto.createDecipher('aes192', DOWNLOAD_URI_CIPHER_KEY)\n    const decryptedUri = decipher.update(uri, 'hex', 'utf8') + decipher.final('utf8')\n\n    return JSON.parse(decryptedUri)\n}\n\n"]}