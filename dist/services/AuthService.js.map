{"version":3,"sources":["../../src/services/AuthService.js"],"names":["DEFAULT_TOKEN_TTL_SECONDS","DEFAULT_SET_PASSWORD_KEY_TTL_DAYS","getStorageMax","plan","UI_SEARCH_PAGE_LOCATION","UI_SETTINGS_PAGE_LOCATION","UI_STAT_PAGE_LOCATION","UI_ACCOUNT_PAGE_LOCATION","calculateToken","email","emailToken","getSha256","getAllowedUiRoutes","config","req","routes","uiRoutes","isSettingsPageAllowed","undefined","extractEmailFromHeaders","defaultAccountEmail","mode","getUserIndex","getSha1","toLowerCase","checkIfKeyPresentAndNotEmpty","key","dictionary","extractTokenFromHeaders","headers","generateServiceToken","storage","serviceId","serviceToken","generateRandom","token","addServiceToken","redis","generateUserToken","addToken","ttl","generateNewUser","name","langAnalyzer","Promise","resolve","reject","setPasswordKey","lang_analyzer","storage_max","password_hash","password_salt","role","defaultAccountRole","state","index_name","generateSetPasswordFields","created","getCurrentDateTime","set_password_key","set_password_key_expiration","getCurrentDateTimeAddDays","generateDefaultUser","password","salt","then","user","catch","err","generateDefaultUserRole","acc_type","acc_rules","init","getUserByEmail","mongoDb","defaultAccountName","defaultAccountPassword","defaultAccountLangAnalyzer","defaultAccountPlan","generatedUser","createUpdateUser","createUpdateUserRole","createUserIndex","elasticSearch","ensureAuthenticated","res","next","auth","status","json","checkIfTokenExists","exists","ensureAuthenticatedAsService","caller","serviceRegex","RegExp","pipelineContainerPrefix","crawlerContainerPrefix","test"],"mappings":"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","file":"AuthService.js","sourcesContent":["import { MongoProxy, EsProxy, CacheProxy, DateTimeService, CryptoService } from './index'\nimport ErrorResponse from '../utils/ErrorResponse'\nimport config from '../config'\n\nexport const DEFAULT_TOKEN_TTL_SECONDS = 7 * 24 * 60 * 60\nexport const DEFAULT_SET_PASSWORD_KEY_TTL_DAYS = 7\n\nconst getStorageMax = (plan) => (plan === 'free' ? 1024 * 1024 * 1024 : -1)\n\nconst UI_SEARCH_PAGE_LOCATION = '/'\nconst UI_SETTINGS_PAGE_LOCATION = '/settings'\nconst UI_STAT_PAGE_LOCATION = '/statistics'\nconst UI_ACCOUNT_PAGE_LOCATION = '/account'\n\nconst calculateToken = (email, emailToken) => (!email || !emailToken) ? null : `atk:${CryptoService.getSha256(`${email}|${emailToken}`)}`\n\nexport const getAllowedUiRoutes = (config, req) => {\n    const routes = {\n        uiRoutes: [\n            UI_SEARCH_PAGE_LOCATION,\n            UI_STAT_PAGE_LOCATION,\n            UI_ACCOUNT_PAGE_LOCATION,\n            isSettingsPageAllowed(config, req) ? UI_SETTINGS_PAGE_LOCATION : undefined\n        ]\n    }\n\n    return routes\n}\n\nexport const isSettingsPageAllowed = (config, req) => {\n    const email = extractEmailFromHeaders(req)\n\n    return (email === config.defaultAccountEmail) || (config.mode != 'cloud')\n}\n\nexport const getUserIndex = (email) => config.mode === 'cloud' ? CryptoService.getSha1(email.toLowerCase()) : CryptoService.getSha1(config.defaultAccountEmail.toLowerCase())\n\nconst checkIfKeyPresentAndNotEmpty = (key, dictionary) => {\n    if (!(key in dictionary)) { return false }\n    if (!dictionary[key]) { return false }\n    if (dictionary[key] == '') { return false }\n    return true\n}\n\nexport const extractTokenFromHeaders = (req) => {\n    if ((!checkIfKeyPresentAndNotEmpty('ambar-email', req.headers)) || (!checkIfKeyPresentAndNotEmpty('ambar-email-token', req.headers))) {\n        return null\n    }\n    const email = req.headers['ambar-email'].toLowerCase()\n    const emailToken = req.headers['ambar-email-token']\n    return calculateToken(email, emailToken)\n}\n\nexport const extractEmailFromHeaders = (req) => checkIfKeyPresentAndNotEmpty('ambar-email', req.headers) ? req.headers['ambar-email'].toLowerCase() : config.defaultAccountEmail\n\nexport const generateServiceToken = (storage, serviceId) => {\n    const serviceToken = CryptoService.generateRandom()\n    const token = calculateToken(serviceId, serviceToken)\n    CacheProxy.addServiceToken(storage.redis, token)\n    return serviceToken\n}\n\nexport const generateUserToken = (storage, email) => {\n    const emailToken = CryptoService.generateRandom()\n    const token = calculateToken(email, emailToken)\n    CacheProxy.addToken(storage.redis, token, DEFAULT_TOKEN_TTL_SECONDS)\n    return { emailToken, ttl: DEFAULT_TOKEN_TTL_SECONDS }\n}\n\nexport const generateNewUser = (name, email, langAnalyzer, plan) => new Promise((resolve, reject) => {\n    const setPasswordKey = CryptoService.generateRandom(64)\n\n    resolve({\n        name: name,\n        email: email,\n        lang_analyzer: langAnalyzer,\n        plan: plan,\n        storage_max: getStorageMax(plan),\n        password_hash: null,\n        password_salt: null,\n        role: config.defaultAccountRole,\n        state: 'new',\n        index_name: getUserIndex(email),\n        ...generateSetPasswordFields(),\n        created: DateTimeService.getCurrentDateTime()\n    })\n})\n\nexport const generateSetPasswordFields = () => {\n    return {\n        set_password_key: CryptoService.generateRandom(64),\n        set_password_key_expiration: DateTimeService.getCurrentDateTimeAddDays(DEFAULT_SET_PASSWORD_KEY_TTL_DAYS)\n    }\n}\n\nconst generateDefaultUser = (name, email, password, langAnalyzer, plan) => new Promise((resolve, reject) => {\n    const salt = CryptoService.generateRandom()\n\n    generateNewUser(name, email, langAnalyzer, plan)\n        .then((user) =>\n            resolve({\n                ...user,\n                password_hash: '',\n                password_salt: '',\n                state: 'active',\n                set_password_key: null,\n                set_password_key_expiration: null\n            })\n        )\n        .catch((err) => { reject(err) })\n})\n\nconst generateDefaultUserRole = () => ({\n    name: 'admin',\n    acc_type: 'allow_all',\n    acc_rules: []\n})\n\nexport const init = (storage) => new Promise((resolve, reject) => {\n    MongoProxy.getUserByEmail(storage.mongoDb, config.defaultAccountEmail)\n        .then((user) => {\n            if (user) {\n                resolve()\n                return\n            }\n            return generateDefaultUser(config.defaultAccountName, config.defaultAccountEmail, config.defaultAccountPassword, config.defaultAccountLangAnalyzer, config.defaultAccountPlan)\n                .then((generatedUser) => MongoProxy.createUpdateUser(storage.mongoDb, generatedUser))\n                .then(() => MongoProxy.createUpdateUserRole(storage.mongoDb, generateDefaultUserRole()))\n                .then(() => EsProxy.createUserIndex(\n                    storage.elasticSearch,\n                    getUserIndex(config.defaultAccountEmail),\n                    config.defaultAccountLangAnalyzer))\n                .then(() => resolve())\n        })\n        .catch((err) => { reject(err) })\n})\n\nexport const ensureAuthenticated = (storage) => (req, res, next) => {\n    if (config.auth != 'basic') {\n        next()\n        return\n    }\n\n    const token = extractTokenFromHeaders(req)\n\n    if (!token) {\n        res.status(401).json(new ErrorResponse('Unauthorized'))\n        return\n    }\n\n    CacheProxy.checkIfTokenExists(storage.redis, token)\n        .then((exists) => {\n            if (!exists) {\n                res.status(401).json(new ErrorResponse('Unauthorized'))\n                return\n            }\n            next()\n        })\n        .catch(() => {\n            res.status(500).json(new ErrorResponse('Cache error'))\n        })\n}\n\nexport const ensureAuthenticatedAsService = (storage) => (req, res, next) => {\n    if (config.auth != 'basic') {\n        next()\n        return\n    }\n\n    const caller = extractEmailFromHeaders(req)\n    const serviceRegex = new RegExp(`^(${config.pipelineContainerPrefix}|${config.crawlerContainerPrefix})[0-9]{1,}`)\n\n    if (!serviceRegex.test(caller)) {\n        res.status(401).json(new ErrorResponse('Unauthorized'))\n        return\n    }\n\n    const token = extractTokenFromHeaders(req)\n\n    if (!token) {\n        res.status(401).json(new ErrorResponse('Unauthorized'))\n        return\n    }\n\n    CacheProxy.checkIfTokenExists(storage.redis, token)\n        .then((exists) => {\n            if (!exists) {\n                res.status(401).json(new ErrorResponse('Unauthorized'))\n                return\n            }\n            next()\n        })\n        .catch(() => {\n            res.status(500).json(new ErrorResponse('Cache error'))\n        })\n}"]}