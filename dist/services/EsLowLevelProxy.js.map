{"version":3,"sources":["../../src/services/EsLowLevelProxy.js"],"names":["EsQueryBuilder","ENC_UTF8","bodyToStream","body","contentToken","data","stringifiedBody","JSON","stringify","start","indexOf","prefix","substring","suffix","length","contentRequestStream","create","dataStream","append","Buffer","from","updateFile","indexName","fileId","fullIndexName","getFullIndexName","doc","doc_as_upsert","bodyStream","Promise","resolve","reject","pipe","post","url","elasticSearchUrl","esFileTypeName","headers","err","resp","response","parse","result"],"mappings":"0GAAA,kC;AACA,mC;AACA,6C;AACA,yD;AACA,yD,IAAYA,c;AACZ,mD;AACA;AACA,kD;;AAEA,IAAMC,WAAW,OAAjB;;AAEA,IAAMC,eAAe,SAAfA,YAAe,CAACC,IAAD,EAAOC,YAAP,EAAqBC,IAArB,EAA8B;AAC/C,QAAMC,kBAAkBC,KAAKC,SAAL,CAAeL,IAAf,CAAxB;AACA,QAAMM,QAAQH,gBAAgBI,OAAhB,CAAwBN,YAAxB,CAAd;;AAEA,QAAMO,SAASL,gBAAgBM,SAAhB,CAA0B,CAA1B,EAA6BH,QAAQ,CAArC,CAAf;AACA,QAAMI,SAASP,gBAAgBM,SAAhB,CAA0BH,QAAQL,aAAaU,MAArB,GAA8B,CAAxD,CAAf;;AAEA,QAAMC,uBAAuB,yBAAeC,MAAf,EAA7B;AACA,QAAMC,aAAa,mCAAiBZ,IAAjB,CAAnB;;AAEAU,yBAAqBG,MAArB,CAA4BC,OAAOC,IAAP,CAAYT,MAAZ,EAAoBV,QAApB,CAA5B;AACAc,yBAAqBG,MAArB,CAA4BD,UAA5B;AACAF,yBAAqBG,MAArB,CAA4BC,OAAOC,IAAP,CAAYP,MAAZ,EAAoBZ,QAApB,CAA5B;;AAEA,WAAOc,oBAAP;AACH,CAfD;;AAiBA;;;AAGO,IAAMM,kCAAa,SAAbA,UAAa,CAACC,SAAD,EAAYC,MAAZ,EAAoBlB,IAApB,EAA6B;AACnD,QAAMmB,gBAAgBxB,eAAeyB,gBAAf,CAAgCH,SAAhC,CAAtB;;AAEA,QAAMlB,eAAe,UAArB;AACA,QAAMD,OAAO;AACTuB,aAAKtB,YADI;AAETuB,uBAAe,IAFN,EAAb;;;AAKA,QAAMC,aAAa1B,aAAaC,IAAb,EAAmBC,YAAnB,EAAiCC,IAAjC,CAAnB;;AAEA,WAAO,IAAIwB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCH,mBAAWI,IAAX,CAAgB,kBAAQC,IAAR,CAAa;AACzBC,iBAAQ,iBAAOC,gBAAf,SAAmCX,aAAnC,SAAoD,iBAAOY,cAA3D,SAA6Eb,MAA7E,8CADyB;AAEzBc,qBAAS;AACL,gCAAgB,kBADX,EAFgB,EAAb;;AAKb,kBAACC,GAAD,EAAMC,IAAN,EAAYpC,IAAZ,EAAqB;AACpB,gBAAImC,GAAJ,EAAS;AACLP,uBAAOO,GAAP;AACA;AACH;;AAED,gBAAME,WAAWjC,KAAKkC,KAAL,CAAWF,KAAKpC,IAAhB,CAAjB;;AAEA,gBAAIqC,SAASE,MAAT,KAAoB,SAApB,IAAiCF,SAASE,MAAT,KAAoB,SAAzD,EAAoE;AAChEZ,wBAAQU,SAASE,MAAjB;AACA;AACH;;AAEDX,mBAAOS,QAAP;AACH,SAnBe,CAAhB;;AAqBH,KAtBM,CAAP;AAuBH,CAlCM","file":"EsLowLevelProxy.js","sourcesContent":["import request from 'request'\nimport config from '../config'\nimport base64 from 'base64-stream'\nimport BufferToChunks from '../utils/BufferToChunks'\nimport * as EsQueryBuilder from '../utils/EsQueryBuilder'\nimport SliceBuffer from '../utils/SliceBuffer'\nimport { createReadStream } from 'streamifier'\nimport combinedStream from 'combined-stream2'\n\nconst ENC_UTF8 = 'utf-8'\n\nconst bodyToStream = (body, contentToken, data) => {\n    const stringifiedBody = JSON.stringify(body)\n    const start = stringifiedBody.indexOf(contentToken)\n\n    const prefix = stringifiedBody.substring(0, start - 1)\n    const suffix = stringifiedBody.substring(start + contentToken.length + 1)\n\n    const contentRequestStream = combinedStream.create()\n    const dataStream = createReadStream(data)\n\n    contentRequestStream.append(Buffer.from(prefix, ENC_UTF8))\n    contentRequestStream.append(dataStream)\n    contentRequestStream.append(Buffer.from(suffix, ENC_UTF8))\n\n    return contentRequestStream\n}\n\n/**\n * Low level update by query implememntation to bypass large JSON files problem \n */\nexport const updateFile = (indexName, fileId, data) => {\n    const fullIndexName = EsQueryBuilder.getFullIndexName(indexName)\n\n    const contentToken = '@content'\n    const body = {\n        doc: contentToken,\n        doc_as_upsert: true\n    }\n\n    const bodyStream = bodyToStream(body, contentToken, data)\n\n    return new Promise((resolve, reject) => {\n        bodyStream.pipe(request.post({\n            url: `${config.elasticSearchUrl}/${fullIndexName}/${config.esFileTypeName}/${fileId}/_update?retry_on_conflict=5&refresh=true`,\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }, (err, resp, body) => {\n            if (err) {\n                reject(err)\n                return\n            }\n\n            const response = JSON.parse(resp.body)\n            \n            if (response.result === 'updated' || response.result === 'created') {\n                resolve(response.result)\n                return\n            }\n\n            reject(response)\n        }\n        ))\n    })\n}"]}