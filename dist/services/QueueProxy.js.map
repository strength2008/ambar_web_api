{"version":3,"sources":["../../src/services/QueueProxy.js"],"names":["AMBAR_PIPELINE_QUEUE","AMBAR_PIPELINE_QUEUE_MAX_PRIORITY","AMBAR_PIPELINE_EXCHANGE","AMBAR_PIPELINE_WAITING_QUEUE","AMBAR_PIPELINE_WAITING_EXCHANGE","AMBAR_PIPELINE_WAITING_QUEUE_TTL","AMBAR_CRAWLER_QUEUE","AMBAR_CRAWLER_QUEUE_MAX_PRIORITY","AMBAR_CRAWLER_EXCHANGE","AMBAR_CRAWLER_MESSAGE_DEFAULT_TTL","getPipelineMessagePriority","storage","fileName","Promise","resolve","reject","regex","priority","test","enqueuePipelineMessage","message","meta","short_name","rabbit","createConfirmChannel","then","channel","publish","Buffer","from","JSON","stringify","persistent","waitForConfirms","close","catch","err","getCrawlerMessagePriority","crawlerUid","getCrawlerSettingsByCrawlerUid","mongoDb","settings","schedule","isActive","lastRunMsAgo","getDateTimeDifferenceFromNow","last_run_time","scheduleIntervalMs","getCronIntervalInMs","cron_schedule","delayedIntervals","Math","trunc","enqueueCrawlerMessage","ttl","uid","expiration","initRabbit","connect","rabbitHost","conn","on","console","error","createChannel","assertExchange","durable","assertQueue","arguments","bindQueue"],"mappings":"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","file":"QueueProxy.js","sourcesContent":["import amqp from 'amqplib'\nimport { MongoProxy, DateTimeService } from './index'\nimport moment from 'moment'\nimport config from '../config'\n\nexport const AMBAR_PIPELINE_QUEUE = \"AMBAR_PIPELINE_QUEUE\"\nexport const AMBAR_PIPELINE_QUEUE_MAX_PRIORITY = 2\nexport const AMBAR_PIPELINE_EXCHANGE = \"AMBAR_PIPELINE_EXCHANGE\"\nexport const AMBAR_PIPELINE_WAITING_QUEUE = \"AMBAR_PIPELINE_WAITING_QUEUE\"\nexport const AMBAR_PIPELINE_WAITING_EXCHANGE = \"AMBAR_PIPELINE_WAITING_EXCHANGE\"\n\nexport const AMBAR_PIPELINE_WAITING_QUEUE_TTL = 60 * 60 * 1000\n\nexport const AMBAR_CRAWLER_QUEUE = \"AMBAR_CRAWLER_QUEUE\"\nexport const AMBAR_CRAWLER_QUEUE_MAX_PRIORITY = 10\nexport const AMBAR_CRAWLER_EXCHANGE = \"AMBAR_CRAWLER_EXCHANGE\"\n\nexport const AMBAR_CRAWLER_MESSAGE_DEFAULT_TTL = 10 * 1000\n\nconst getPipelineMessagePriority = (storage, fileName) => new Promise((resolve, reject) => {\n\tconst regex = /(\\.jp[e]*g$)|(\\.png$)|(\\.bmp$)|(\\.tif[f]*$)|(\\.pdf$)/i\t\n\tconst priority = regex.test(fileName) ? 1 : 2\n\tresolve(priority)\n})\n\nexport const enqueuePipelineMessage = (storage, message) => new Promise((resolve, reject) => {\n\tconst fileName = message.meta.short_name\n\n\tstorage.rabbit.createConfirmChannel()\n\t\t.then(channel => {\n\t\t\treturn getPipelineMessagePriority(storage, fileName)\n\t\t\t\t.then(priority => {\n\t\t\t\t\tchannel.publish(AMBAR_PIPELINE_EXCHANGE, '', Buffer.from(JSON.stringify(message)), { persistent: true, priority: priority })\n\t\t\t\t\treturn channel.waitForConfirms()\n\t\t\t\t\t\t.then(() => channel.close())\n\t\t\t\t})\n\t\t})\n\t\t.then(() => resolve())\n\t\t.catch(err => reject(err))\n})\n\nconst getCrawlerMessagePriority = (storage, crawlerUid) => new Promise((resolve, reject) => {\n\tMongoProxy.getCrawlerSettingsByCrawlerUid(storage.mongoDb, crawlerUid)\n\t\t.then(settings => {\n\t\t\tif (!settings.schedule.isActive) {\n\t\t\t\tresolve(AMBAR_CRAWLER_QUEUE_MAX_PRIORITY)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tconst lastRunMsAgo = DateTimeService.getDateTimeDifferenceFromNow(settings.last_run_time)\n\t\t\tconst scheduleIntervalMs = DateTimeService.getCronIntervalInMs(settings.schedule.cron_schedule)\n\n\t\t\tif (!lastRunMsAgo) {\n\t\t\t\tresolve(AMBAR_CRAWLER_QUEUE_MAX_PRIORITY)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tconst delayedIntervals = Math.trunc(lastRunMsAgo / scheduleIntervalMs) + 1\n\n\t\t\tif (delayedIntervals >= AMBAR_CRAWLER_QUEUE_MAX_PRIORITY) {\n\t\t\t\tresolve(AMBAR_CRAWLER_QUEUE_MAX_PRIORITY)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tresolve(delayedIntervals)\n\t\t})\n\t\t.catch(err => reject(err))\n})\n\nexport const enqueueCrawlerMessage = (storage, message, ttl = AMBAR_CRAWLER_MESSAGE_DEFAULT_TTL) => new Promise((resolve, reject) => {\n\tconst crawlerUid = message.uid\n\n\tstorage.rabbit.createConfirmChannel()\n\t\t.then(channel => {\n\t\t\treturn getCrawlerMessagePriority(storage, crawlerUid)\n\t\t\t\t.then(priority => {\n\t\t\t\t\tchannel.publish(AMBAR_CRAWLER_EXCHANGE, '', Buffer.from(JSON.stringify(message)), { expiration: ttl, priority: priority })\n\t\t\t\t\treturn channel.waitForConfirms()\n\t\t\t\t\t\t.then(() => channel.close())\n\t\t\t\t})\n\t\t})\n\t\t.then(() => resolve())\n\t\t.catch(err => reject(err))\n})\n\nexport const initRabbit = new Promise((resolve, reject) => {\n\tamqp.connect(`${config.rabbitHost}?heartbeat=60`)\n\t\t.then((conn) => {\n\t\t\tconn.on('error', (err) => {\n\t\t\t\tconsole.error('Rabbit error!')\n\t\t\t\tthrow err\n\t\t\t})\n\n\t\t\treturn conn.createChannel()\n\t\t\t\t.then((channel) => {\n\t\t\t\t\tchannel.assertExchange(AMBAR_PIPELINE_EXCHANGE, 'fanout', { durable: false })\n\t\t\t\t\t\t.then(() => channel.assertExchange(AMBAR_PIPELINE_WAITING_EXCHANGE,\n\t\t\t\t\t\t\t'fanout', { durable: false }))\n\t\t\t\t\t\t.then(() => channel.assertQueue(AMBAR_PIPELINE_QUEUE,\n\t\t\t\t\t\t\t{ durable: false, arguments: { 'x-dead-letter-exchange': AMBAR_PIPELINE_WAITING_EXCHANGE, 'x-max-priority': AMBAR_PIPELINE_QUEUE_MAX_PRIORITY } }))\n\t\t\t\t\t\t.then(() => channel.assertQueue(AMBAR_PIPELINE_WAITING_QUEUE,\n\t\t\t\t\t\t\t{ durable: false, arguments: { 'x-dead-letter-exchange': AMBAR_PIPELINE_EXCHANGE, 'x-message-ttl': AMBAR_PIPELINE_WAITING_QUEUE_TTL } }))\n\t\t\t\t\t\t.then(() => channel.bindQueue(AMBAR_PIPELINE_QUEUE,\n\t\t\t\t\t\t\tAMBAR_PIPELINE_EXCHANGE))\n\t\t\t\t\t\t.then(() => channel.bindQueue(AMBAR_PIPELINE_WAITING_QUEUE,\n\t\t\t\t\t\t\tAMBAR_PIPELINE_WAITING_EXCHANGE))\n\t\t\t\t\t\t.then(() => channel.assertExchange(AMBAR_CRAWLER_EXCHANGE, 'fanout', { durable: false }))\n\t\t\t\t\t\t.then(() => channel.assertQueue(AMBAR_CRAWLER_QUEUE, { durable: false, arguments: { 'x-max-priority': AMBAR_CRAWLER_QUEUE_MAX_PRIORITY } }))\n\t\t\t\t\t\t.then(() => channel.bindQueue(AMBAR_CRAWLER_QUEUE,\n\t\t\t\t\t\t\tAMBAR_CRAWLER_EXCHANGE))\n\t\t\t\t\t\t.then(() => channel.close())\n\t\t\t\t})\n\t\t\t\t.then(() => resolve(conn))\n\t\t})\n\t\t.catch(err => reject(err))\n})\n"]}