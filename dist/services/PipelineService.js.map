{"version":3,"sources":["../../src/services/PipelineService.js"],"names":["generatePipelineName","index","pipelineContainerPrefix","init","storage","externalNERs","Promise","resolve","reject","pipelinesPromises","Array","pipelineCount","map","item","pipelineName","tryRemovePipelineContainer","then","token","generateServiceToken","createPipelineContainer","startPipelineContainer","all","console","log","indexLogItem","elasticSearch","createLogRecord","catch","error","err","toString","destroy","type","message","source_id"],"mappings":"sHAAA;AACA,mC;;AAEA,IAAMA,uBAAuB,SAAvBA,oBAAuB,CAACC,KAAD,eAAc,iBAAOC,uBAArB,GAA+CD,KAA/C,EAA7B;;AAEO,IAAME,sBAAO,SAAPA,IAAO,CAACC,OAAD,EAAUC,YAAV,UAA2B,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC5E,YAAMC,oBAAoB,6BAAIC,MAAM,iBAAOC,aAAb,CAAJ,GAAiCC,GAAjC,CAAqC,UAACC,IAAD,EAAOZ,KAAP,EAAiB;AAC5E,gBAAMa,eAAed,qBAAqBC,KAArB,CAArB;;AAEA,mBAAO,mBAAYc,0BAAZ,CAAuCD,YAAvC;AACFE,gBADE,CACG,YAAM;AACR,oBAAMC,QAAQ,mBAAYC,oBAAZ,CAAiCd,OAAjC,EAA0CU,YAA1C,CAAd;AACA,uBAAO,mBAAYK,uBAAZ,CAAoCF,KAApC,EAA2CH,YAA3C,EAAyDT,YAAzD,CAAP;AACH,aAJE;AAKFW,gBALE,CAKG,YAAM;AACR,uBAAO,mBAAYI,sBAAZ,CAAmCN,YAAnC,CAAP;AACH,aAPE,CAAP;AAQH,SAXyB,CAA1B;;AAaAR,gBAAQe,GAAR,CAAYZ,iBAAZ;AACKO,YADL,CACU,YAAM;AACRM,oBAAQC,GAAR,CAAY,sBAAZ;AACA,2BAAQC,YAAR;AACIpB,oBAAQqB,aADZ;AAEIC,4BAAgB,MAAhB,EAAwB,sBAAxB,CAFJ;;AAIAnB,oBAAQ,IAAR;AACH,SARL;AASKoB,aATL,CASW,eAAO;AACVL,oBAAQM,KAAR,qCAAgDC,IAAIC,QAAJ,EAAhD;AACA,2BAAQN,YAAR;AACIpB,oBAAQqB,aADZ;AAEIC,4BAAgB,OAAhB,sCAA2DG,IAAIC,QAAJ,EAA3D,CAFJ;;AAIAtB,mBAAOqB,GAAP;AACH,SAhBL;AAiBH,KA/B8C,CAA3B,EAAb;;AAiCA,IAAME,4BAAU,SAAVA,OAAU,CAAC3B,OAAD,UAAa,IAAIE,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACjE,YAAMC,oBAAoB,6BAAIC,MAAM,iBAAOC,aAAb,CAAJ,GAAiCC,GAAjC,CAAqC,UAACC,IAAD,EAAOZ,KAAP,EAAiB;AAC5E,gBAAMa,eAAed,qBAAqBC,KAArB,CAArB;AACA,mBAAO,mBAAYc,0BAAZ,CAAuCD,YAAvC,CAAP;AACH,SAHyB,CAA1B;;AAKAR,gBAAQe,GAAR,CAAYZ,iBAAZ;AACKO,YADL,CACU,YAAM;AACRM,oBAAQC,GAAR,CAAY,oBAAZ;AACA,2BAAQC,YAAR;AACIpB,oBAAQqB,aADZ;AAEIC,4BAAgB,MAAhB,EAAwB,oBAAxB,CAFJ;;AAIAnB,oBAAQ,IAAR;AACH,SARL;AASKoB,aATL,CASW,eAAO;AACVL,oBAAQM,KAAR,kCAA6CC,IAAIC,QAAJ,EAA7C;AACA,2BAAQN,YAAR;AACIpB,oBAAQqB,aADZ;AAEIC,4BAAgB,OAAhB,mCAAwDG,IAAIC,QAAJ,EAAxD,CAFJ;;AAIAtB,mBAAOqB,GAAP;AACH,SAhBL;AAiBH,KAvBmC,CAAb,EAAhB;;AAyBP,IAAMH,kBAAkB,SAAlBA,eAAkB,CAACM,IAAD,EAAOC,OAAP,UAAoB;AACxCD,cAAMA,IADkC;AAExCE,mBAAW,QAF6B;AAGxCD,iBAASA,OAH+B,EAApB,EAAxB","file":"PipelineService.js","sourcesContent":["import { CacheProxy, DockerProxy, EsProxy, AuthService } from './index'\nimport config from '../config'\n\nconst generatePipelineName = (index) => `${config.pipelineContainerPrefix}${index}`\n\nexport const init = (storage, externalNERs) => new Promise((resolve, reject) => {\n    const pipelinesPromises = [...Array(config.pipelineCount)].map((item, index) => {\n        const pipelineName = generatePipelineName(index)\n\n        return DockerProxy.tryRemovePipelineContainer(pipelineName)\n            .then(() => {\n                const token = AuthService.generateServiceToken(storage, pipelineName)\n                return DockerProxy.createPipelineContainer(token, pipelineName, externalNERs)\n            })\n            .then(() => {\n                return DockerProxy.startPipelineContainer(pipelineName)\n            })\n    })\n\n    Promise.all(pipelinesPromises)\n        .then(() => {\n            console.log('Pipeline initialized')\n            EsProxy.indexLogItem(\n                storage.elasticSearch,\n                createLogRecord('info', 'Pipeline initialized')\n            )\n            resolve(true)\n        })\n        .catch(err => {\n            console.error(`Failed to initialize pipeline. ${err.toString()}`)\n            EsProxy.indexLogItem(\n                storage.elasticSearch,\n                createLogRecord('error', `Failed to initialize pipeline. ${err.toString()}`)\n            )\n            reject(err)\n        })\n})\n\nexport const destroy = (storage) => new Promise((resolve, reject) => {\n    const pipelinesPromises = [...Array(config.pipelineCount)].map((item, index) => {\n        const pipelineName = generatePipelineName(index)\n        return DockerProxy.tryRemovePipelineContainer(pipelineName)\n    })\n\n    Promise.all(pipelinesPromises)\n        .then(() => {\n            console.log('Pipeline destroyed')\n            EsProxy.indexLogItem(\n                storage.elasticSearch,\n                createLogRecord('info', 'Pipeline destroyed')\n            )\n            resolve(true)\n        })\n        .catch(err => {\n            console.error(`Failed to destroy pipeline. ${err.toString()}`)\n            EsProxy.indexLogItem(\n                storage.elasticSearch,\n                createLogRecord('error', `Failed to destroy pipeline. ${err.toString()}`)\n            )\n            reject(err)\n        })\n})\n\nconst createLogRecord = (type, message) => ({\n    type: type,\n    source_id: 'webapi',\n    message: message\n})\n"]}