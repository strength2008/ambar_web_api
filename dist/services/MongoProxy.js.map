{"version":3,"sources":["../../src/services/MongoProxy.js"],"names":["CRAWLER_DATA","BUCKET_DATA","THUMBNAIL_DATA","USER_DATA","USER_ROLE_DATA","AUTO_TAGGING_RULE_DATA","EXTERNAL_NER_DATA","getExternalNERs","db","Promise","resolve","reject","collection","find","toArray","err","result","initDefaultTaggingRules","promises","defaultTaggingRules","map","iResolve","iReject","ruleId","getSha1","taggingRule","name","updateOne","id","upsert","all","then","catch","getTaggingRules","getCrawlersSettings","is_removed","getCrawlersSettingsByIndexName","indexName","index_name","getCrawlerSettingsByCrawlerUid","crawlerUid","findOne","uid","createCrawlerSettings","settings","insertOne","updateCrawlerSettings","updateCrawlerSettingsLastRunTime","lastRunTime","$set","last_run_time","removeCrawlerSettingsByCrawlerUid","deleteOne","removeCrawlerSettingsByIndexName","deleteMany","getBucketsByIndexName","getBucketById","bucketId","createBucket","bucket","getThumbnailById","thumbId","createThumbnail","thumbData","data","getUsers","getUserByEmail","email","getUserByIndexName","createUpdateUser","user","deleteUser","getUsersCount","defaultEmail","count","$ne","createUpdateUserRole","role"],"mappings":"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","file":"MongoProxy.js","sourcesContent":["import { ObjectId } from 'mongodb'\nimport moment from 'moment'\nimport config from '../config'\nimport { CryptoService } from './index'\n\nconst CRAWLER_DATA = 'crawler_data'\nconst BUCKET_DATA = 'bucket_data'\nconst THUMBNAIL_DATA = 'thumbnail_data'\nconst USER_DATA = 'user_data'\nconst USER_ROLE_DATA = 'user_role_data'\nconst AUTO_TAGGING_RULE_DATA = 'auto_tagging_rule_data'\nconst EXTERNAL_NER_DATA = 'external_ner_data'\n\n// EXTERNAL NERS\nexport const getExternalNERs = (db) => new Promise((resolve, reject) => {\n    db.collection(EXTERNAL_NER_DATA)\n        .find()\n        .toArray(\n        (err, result) => {\n            if (err) {\n                reject(err)\n                return\n            }\n\n            resolve(result)\n        })\n})\n\n//TAGGING RULES\nexport const initDefaultTaggingRules = (db) => new Promise((resolve, reject) => {\n    const promises = config.defaultTaggingRules.map(taggingRule =>\n        new Promise((iResolve, iReject) => {\n            const ruleId = CryptoService.getSha1(`taggingRule_${taggingRule.name}`)\n\n            db.collection(AUTO_TAGGING_RULE_DATA)\n                .updateOne({ id: ruleId }, { ...taggingRule, id: ruleId }, { upsert: true }, (err, result) => {\n                    if (err) {\n                        iReject(err)\n                        return\n                    }\n\n                    iResolve(result)\n                })\n        }))\n\n    Promise.all(promises)\n        .then(() => resolve())\n        .catch(err => reject(err))\n})\n\nexport const getTaggingRules = (db) => new Promise((resolve, reject) => {\n    db.collection(AUTO_TAGGING_RULE_DATA)\n        .find()\n        .toArray(\n        (err, result) => {\n            if (err) {\n                reject(err)\n                return\n            }\n\n            resolve(result)\n        })\n})\n//////////////////////////////////////////////////////////////////////////////////////\n\n// CRAWLERS\nexport const getCrawlersSettings = (db) => new Promise((resolve, reject) => {\n    db.collection(CRAWLER_DATA)\n        .find({ is_removed: false })\n        .toArray(\n        (err, result) => {\n            if (err) {\n                reject(err)\n                return\n            }\n\n            resolve(result)\n        })\n})\n\nexport const getCrawlersSettingsByIndexName = (db, indexName) => new Promise((resolve, reject) => {\n    db.collection(CRAWLER_DATA)\n        .find({ is_removed: false, index_name: indexName })\n        .toArray(\n        (err, result) => {\n            if (err) {\n                reject(err)\n                return\n            }\n\n            resolve(result)\n        })\n})\n\nexport const getCrawlerSettingsByCrawlerUid = (db, crawlerUid) => new Promise((resolve, reject) => {\n    db.collection(CRAWLER_DATA)\n        .findOne(\n        { uid: crawlerUid },\n        (err, result) => {\n            if (err) {\n                reject(err)\n                return\n            }\n\n            resolve(result)\n        })\n})\n\nexport const createCrawlerSettings = (db, settings) => new Promise((resolve, reject) => {\n    db.collection(CRAWLER_DATA)\n        .insertOne(settings, (err, result) => {\n            if (err) {\n                reject(err)\n                return\n            }\n\n            resolve(result)\n        })\n})\n\nexport const updateCrawlerSettings = (db, settings) => new Promise((resolve, reject) => {\n    db.collection(CRAWLER_DATA)\n        .updateOne(\n        { uid: settings.uid },\n        settings,\n        (err, result) => {\n            if (err) {\n                reject(err)\n                return\n            }\n\n            resolve(result)\n        }\n        )\n})\n\nexport const updateCrawlerSettingsLastRunTime = (db, crawlerUid, lastRunTime) => new Promise((resolve, reject) => {\n    db.collection(CRAWLER_DATA)\n        .updateOne(\n        { uid: crawlerUid },\n        { $set: { last_run_time: lastRunTime } },\n        (err, result) => {\n            if (err) {\n                reject(err)\n                return\n            }\n\n            resolve(result)\n        }\n        )\n})\n\nexport const removeCrawlerSettingsByCrawlerUid = (db, crawlerUid) => new Promise((resolve, reject) => {\n    db.collection(CRAWLER_DATA)\n        .deleteOne(\n        { uid: crawlerUid },\n        null,\n        (err, result) => {\n            if (err) {\n                reject(err)\n                return\n            }\n            resolve(result)\n        })\n})\n\nexport const removeCrawlerSettingsByIndexName = (db, indexName) => new Promise((resolve, reject) => {\n    db.collection(CRAWLER_DATA)\n        .deleteMany(\n        { index_name: indexName },\n        null,\n        (err, result) => {\n            if (err) {\n                reject(err)\n                return\n            }\n            resolve(result)\n        })\n})\n//////////////////////////////////////////////////////////////////////////////////////\n\n// BUCKETS\nexport const getBucketsByIndexName = (db, indexName) => new Promise((resolve, reject) => {\n    db.collection(BUCKET_DATA)\n        .find({ index_name: indexName })\n        .toArray(\n        (err, result) => {\n            if (err) {\n                reject(err)\n                return\n            }\n            resolve(result)\n        })\n})\n\nexport const getBucketById = (db, indexName, bucketId) => new Promise((resolve, reject) => {\n    db.collection(BUCKET_DATA)\n        .findOne(\n        { id: bucketId, index_name: indexName },\n        (err, result) => {\n            if (err) {\n                reject(err)\n                return\n            }\n\n            resolve(result)\n        })\n})\n\nexport const createBucket = (db, bucket) => new Promise((resolve, reject) => {\n    db.collection(BUCKET_DATA)\n        .insertOne(bucket, (err, result) => {\n            if (err) {\n                reject(err)\n                return\n            }\n\n            resolve(result)\n        })\n})\n//////////////////////////////////////////////////////////////////////////////////////\n\n// THUMBNAILS\nexport const getThumbnailById = (db, thumbId) => new Promise((resolve, reject) => {\n    db.collection(THUMBNAIL_DATA)\n        .findOne(\n        { id: thumbId },\n        (err, result) => {\n            if (err) {\n                reject(err)\n                return\n            }\n\n            resolve(result)\n        })\n})\n\nexport const createThumbnail = (db, thumbId, thumbData) => new Promise((resolve, reject) => {\n    db.collection(THUMBNAIL_DATA)\n        .updateOne({ id: thumbId }, { id: thumbId, data: thumbData }, { upsert: true }, (err, result) => {\n            if (err) {\n                reject(err)\n                return\n            }\n\n            resolve(result)\n        })\n})\n//////////////////////////////////////////////////////////////////////////////////////\n\n// USERS\nexport const getUsers = (db) => new Promise((resolve, reject) => {\n    db.collection(USER_DATA)\n        .find()\n        .toArray(\n        (err, result) => {\n            if (err) {\n                reject(err)\n                return\n            }\n\n            resolve(result)\n        })\n})\n\nexport const getUserByEmail = (db, email) => new Promise((resolve, reject) => {\n    db.collection(USER_DATA)\n        .findOne(\n        { email: email },\n        (err, result) => {\n            if (err) {\n                reject(err)\n                return\n            }\n\n            resolve(result)\n        })\n})\n\nexport const getUserByIndexName = (db, indexName) => new Promise((resolve, reject) => {\n    db.collection(USER_DATA)\n        .findOne(\n        { index_name: indexName },\n        (err, result) => {\n            if (err) {\n                reject(err)\n                return\n            }\n\n            resolve(result)\n        })\n})\n\nexport const createUpdateUser = (db, user) => new Promise((resolve, reject) => {\n    db.collection(USER_DATA)\n        .updateOne({ email: user.email }, user, { upsert: true }, (err, result) => {\n            if (err) {\n                reject(err)\n                return\n            }\n\n            resolve(result)\n        })\n})\n\nexport const deleteUser = (db, user) => new Promise((resolve, reject) => {\n    db.collection(USER_DATA)\n        .deleteOne({ email: user.email },\n        null,\n        (err, result) => {\n            if (err) {\n                reject(err)\n                return\n            }\n\n            resolve(result)\n        })\n})\n\nexport const getUsersCount = (db, defaultEmail) => new Promise((resolve, reject) => {\n    db.collection(USER_DATA)\n        .count({\n            email: { $ne: defaultEmail }\n        },\n        (err, result) => {\n            if (err) {\n                reject(err)\n                return\n            }\n\n            resolve(result)\n        })\n})\n//////////////////////////////////////////////////////////////////////////////////////\n\n/// ROLES\nexport const createUpdateUserRole = (db, role) => new Promise((resolve, reject) => {\n    db.collection(USER_ROLE_DATA)\n        .updateOne({ name: role.name }, role, { upsert: true }, (err, result) => {\n            if (err) {\n                reject(err)\n                return\n            }\n\n            resolve(result)\n        })\n})\n\n"]}