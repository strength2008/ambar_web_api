{"version":3,"sources":["../../src/services/DateTimeService.js"],"names":["getCurrentDateTime","format","dateTimeFormat","getCurrentDateTimeAddDays","days","add","getCurrentDateTimeMinusMinutes","minutes","subtract","getStartOfToday","startOf","getStartOfYesterday","getStartOfThisWeek","getStartOfThisMonth","getStartOfThisYear","parseDateTime","dateStr","getDateTimeDifferenceFromNowInHumanForm","duration","diff","humanize","getDateTimeDifferenceFromNow","isSame","dateA","dateB","getCronIntervalInMs","cronSchedule","interval","parseExpression","nextRun","next","_date","nextNextRun"],"mappings":"+eAAA,gC;AACA,yC;AACA,mC;;AAEO,IAAMA,kDAAqB,SAArBA,kBAAqB,WAAM,wBAASC,MAAT,CAAgB,iBAAOC,cAAvB,CAAN,EAA3B;AACA,IAAMC,gEAA4B,SAA5BA,yBAA4B,CAACC,IAAD,UAAU,wBAASC,GAAT,CAAaD,IAAb,EAAmB,MAAnB,EAA2BH,MAA3B,CAAkC,iBAAOC,cAAzC,CAAV,EAAlC;AACA,IAAMI,0EAAiC,SAAjCA,8BAAiC,CAACC,OAAD,UAAa,wBAASC,QAAT,CAAkB,EAAED,SAASA,OAAX,EAAlB,EAAwCN,MAAxC,CAA+C,iBAAOC,cAAtD,CAAb,EAAvC;AACA,IAAMO,4CAAkB,SAAlBA,eAAkB,WAAM,wBAASC,OAAT,CAAiB,KAAjB,EAAwBT,MAAxB,CAA+B,iBAAOC,cAAtC,CAAN,EAAxB;AACA,IAAMS,oDAAsB,SAAtBA,mBAAsB,WAAM,wBAASH,QAAT,CAAkB,EAAEJ,MAAM,CAAR,EAAlB,EAA+BM,OAA/B,CAAuC,KAAvC,EAA8CT,MAA9C,CAAqD,iBAAOC,cAA5D,CAAN,EAA5B;AACA,IAAMU,kDAAqB,SAArBA,kBAAqB,WAAM,wBAASF,OAAT,CAAiB,SAAjB,EAA4BT,MAA5B,CAAmC,iBAAOC,cAA1C,CAAN,EAA3B;AACA,IAAMW,oDAAsB,SAAtBA,mBAAsB,WAAM,wBAASH,OAAT,CAAiB,OAAjB,EAA0BT,MAA1B,CAAiC,iBAAOC,cAAxC,CAAN,EAA5B;AACA,IAAMY,kDAAqB,SAArBA,kBAAqB,WAAM,wBAASJ,OAAT,CAAiB,MAAjB,EAAyBT,MAAzB,CAAgC,iBAAOC,cAAvC,CAAN,EAA3B;AACA,IAAMa,wCAAgB,SAAhBA,aAAgB,CAACC,OAAD,UAAa,sBAAOA,OAAP,EAAgB,iBAAOd,cAAvB,EAAuC,IAAvC,CAAb,EAAtB;AACA,IAAMe,4FAA0C,SAA1CA,uCAA0C,CAACD,OAAD,UAAa,iBAAOE,QAAP,CAAgB,wBAASC,IAAT,CAAc,sBAAOH,OAAP,EAAgB,iBAAOd,cAAvB,EAAuC,IAAvC,CAAd,CAAhB,EAA6EkB,QAA7E,EAAb,EAAhD;AACA,IAAMC,sEAA+B,SAA/BA,4BAA+B,CAACL,OAAD,UAAa,wBAASG,IAAT,CAAc,sBAAOH,OAAP,EAAgB,iBAAOd,cAAvB,EAAuC,IAAvC,CAAd,CAAb,EAArC;AACA,IAAMoB,0BAAS,SAATA,MAAS,CAACC,KAAD,EAAQC,KAAR,UAAkBT,cAAcQ,KAAd,EAAqBD,MAArB,CAA4BP,cAAcS,KAAd,CAA5B,CAAlB,EAAf;AACA,IAAMC,oDAAsB,SAAtBA,mBAAsB,CAACC,YAAD,EAAkB;AACjD,QAAMC,WAAW,qBAAOC,eAAP,CAAuBF,YAAvB,CAAjB;AACA,QAAMG,UAAUF,SAASG,IAAT,GAAgBC,KAAhC;AACA,QAAMC,cAAcL,SAASG,IAAT,GAAgBC,KAApC;AACA,WAAO,sBAAOC,WAAP,EAAoBb,IAApB,CAAyBU,OAAzB,CAAP;AACH,CALM","file":"DateTimeService.js","sourcesContent":["import moment from 'moment'\nimport parser from 'cron-parser'\nimport config from '../config'\n\nexport const getCurrentDateTime = () => moment().format(config.dateTimeFormat)\nexport const getCurrentDateTimeAddDays = (days) => moment().add(days, 'days').format(config.dateTimeFormat)\nexport const getCurrentDateTimeMinusMinutes = (minutes) => moment().subtract({ minutes: minutes }).format(config.dateTimeFormat)\nexport const getStartOfToday = () => moment().startOf('day').format(config.dateTimeFormat)\nexport const getStartOfYesterday = () => moment().subtract({ days: 1 }).startOf('day').format(config.dateTimeFormat)\nexport const getStartOfThisWeek = () => moment().startOf('isoWeek').format(config.dateTimeFormat)\nexport const getStartOfThisMonth = () => moment().startOf('month').format(config.dateTimeFormat)\nexport const getStartOfThisYear = () => moment().startOf('year').format(config.dateTimeFormat)\nexport const parseDateTime = (dateStr) => moment(dateStr, config.dateTimeFormat, true)\nexport const getDateTimeDifferenceFromNowInHumanForm = (dateStr) => moment.duration(moment().diff(moment(dateStr, config.dateTimeFormat, true))).humanize()\nexport const getDateTimeDifferenceFromNow = (dateStr) => moment().diff(moment(dateStr, config.dateTimeFormat, true))\nexport const isSame = (dateA, dateB) => parseDateTime(dateA).isSame(parseDateTime(dateB))\nexport const getCronIntervalInMs = (cronSchedule) => {\n    const interval = parser.parseExpression(cronSchedule)\n    const nextRun = interval.next()._date\n    const nextNextRun = interval.next()._date\n    return moment(nextNextRun).diff(nextRun)\n}\n"]}