{"version":3,"sources":["../../../src/services/EsProxy/EsProxy.js"],"names":["EsQueryBuilder","AmbarLogMapping","AmbarFileDataMapping","MAPPING_ANALYZER_REGEX","MIN_THRESHOLD_EXTENSION","getHiddenMarkId","fileId","getSha256","normalizeHitsScore","hits","maxScore","map","hit","_score","getStats","esClient","indexName","Promise","resolve","reject","search","index","getFullIndexName","type","esFileTypeName","body","getStatsQuery","then","result","catch","err","transformTagsStat","esResponse","resp","aggregations","tags","buckets","forEach","tag","push","name","key","tagType","filesCount","doc_count","mergeAnalyzedFieldsHighlight","highlight","Object","keys","filter","test","originalKey","replace","concat","highlightEntitiesInHitContentHighlights","content","text","length","Error","named_entities","HIGHLIGHT_EM_OPEN_TAG","HIGHLIGHT_EM_CLOSE_TAG","ENTITY_EM_OPEN_TAG","ENTITY_EM_CLOSE_TAG","EM_OPEN_TAG_LENGTH","EM_CLOSE_TAG_LENGTH","EM_OPEN_TAG_REGEX","EM_CLOSE_TAG_REGEX","opened","exec","closed","offset","start","end","lastIndex","clearedText","entity","position","sort","a","b","hl","idx","id","coordsData","coord","coordType","resultText","lastSlicePosition","lastHlCoord","tagsToInsert","flushTagsToInsert","startIdx","t","slice","insertTag","i","currentHl","find","intersectingHls","reverse","join","normalizeHitContentHighlights","ALLOWED_TAGS","SEPARATOR_TAG","SPACE_CHAR","EMPTY_CHAR","strippedHl","RegExp","transformHit","transformedHit","_source","named_entities_distinct","score","hidden_mark","undefined","startsWith","meta","inner_hits","ambar_file_tag","ambar_file_hidden_mark","ambar_file_named_entity","foundEntity","ent","count","indexed_datetime","getPathType","fullPath","getPathDepth","match","getParentPath","lastIndexOf","getPathName","calculateTreeNodeChildrenCount","treeNode","children","reduce","sum","node","hits_count","normalizeTreeAggregationResult","esResult","total","tree","plainTree","full_name_parts","path","bucket","parent_path","depth","thumb_available","file_id","content_type","sha256","normalizeStatsAggregationResult","summary","data","extensions","extension","hits_percent","presentExtensionsHitsCount","names","types","getShortStats","getShortStatsQuery","getTagsStat","esFileTagTypeName","getTagsStatsQuery","getFilesTreeByQuery","request","getFilesTreeQuery","getFilesStatsByQuery","getFilesStatsQuery","searchFiles","from","size","fullIndexName","requests","getFilesWithHighlightsQuery","getFilesWithoutHighlightsQuery","msearch","results","responses","Math","max","max_score","resultHits","some","author","getFileHighlightByFileId","getFileHighlightQuery","getFullFileHighlightByFileId","getFullFileHighlightQuery","checkIfMetaIdExists","metaId","query","term","checkIfFileExists","get","found","statusCode","getFileByFileId","includeChildren","bool","must","should","has_child","match_all","minimum_should_match","getFileBySha","sha","hideFile","hiddenMark","getCurrentDateTime","esFileHiddenMarkTypeName","parent","refresh","res","unHideFile","hiddenMarkId","delete","routing","indexNamedEntities","entities","payload","_index","_type","esFileNamedEntityTypeName","_id","_parent","bulk","errors","indexTag","deleteTag","tagId","indexLogItem","logItem","esLogIndexName","esLogTypeName","getLastLogRecords","sourceId","numberOfRecords","created_datetime","order","source_id","createLogIndexIfNotExist","indices","create","status","createUserIndex","langAnalyzer","userMappings","JSON","parse","stringify","deleteUserIndex","deleteAutoTagsAndNamedEntities","all","deleteAutoTags","deleteNamedEntities","deleteByQuery","parent_id"],"mappings":"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","file":"EsProxy.js","sourcesContent":["import striptags from 'striptags'\nimport config from '../../config'\nimport { DateTimeService, CryptoService } from '../index'\nimport * as EsQueryBuilder from '../../utils/EsQueryBuilder'\nimport * as AmbarLogMapping from './AmbarLogMapping.json'\nimport * as AmbarFileDataMapping from './AmbarFileDataMapping.json'\n\nconst MAPPING_ANALYZER_REGEX = /\\$\\{ANALYZER\\}/g\nconst MIN_THRESHOLD_EXTENSION = 0.05\n\nconst getHiddenMarkId = (fileId) => CryptoService.getSha256(`hiddenmark_${fileId}`)\n\nconst normalizeHitsScore = (hits, maxScore) => hits.map(hit => ({\n    ...hit,\n    _score: hit._score / maxScore\n}))\n\nexport const getStats = (esClient, indexName) => new Promise((resolve, reject) =>\n    esClient.search({\n        index: EsQueryBuilder.getFullIndexName(indexName),\n        type: config.esFileTypeName,\n        body: EsQueryBuilder.getStatsQuery()\n    })\n        .then(result => {\n            resolve(result)\n        })\n        .catch(err => reject(err))\n)\n\nconst transformTagsStat = (esResponse) => {\n    const resp = []\n\n    esResponse.aggregations.tags.buckets.forEach(tag => {\n        tag.type.buckets.forEach(tagType => {\n            resp.push({ name: tag.key, type: tagType.key, filesCount: tagType.doc_count })\n        })\n    })\n\n    return resp\n}\n\nconst mergeAnalyzedFieldsHighlight = (highlight) => {\n    if (!highlight) {\n        return highlight\n    }\n\n    Object.keys(highlight).filter(key => /\\.analyzed$/.test(key)).forEach(key => {\n        const originalKey = key.replace(/\\.analyzed$/, '')\n        if (!highlight[originalKey]) {\n            highlight[originalKey] = []\n        }\n        highlight[originalKey].concat(highlight[key])\n        delete highlight[key]\n    })\n\n    return highlight\n}\n\nconst highlightEntitiesInHitContentHighlights = (hit) => {\n    if (!hit.content) {\n        return hit\n    }\n\n    if (!hit.content.highlight) {\n        return hit\n    }\n\n    if (!hit.content.highlight.text) {\n        return hit\n    }\n\n    if (hit.content.highlight.text.length != 1) {\n        throw new Error('Entities can not be highlighted in partial highlights!')\n    }\n\n    if (hit.named_entities.length == 0) {\n        return hit\n    }\n\n    const HIGHLIGHT_EM_OPEN_TAG = '<em>'\n    const HIGHLIGHT_EM_CLOSE_TAG = '</em>'\n\n    const ENTITY_EM_OPEN_TAG = '<em class=\"entity\">'\n    const ENTITY_EM_CLOSE_TAG = '</em>'\n\n    const EM_OPEN_TAG_LENGTH = HIGHLIGHT_EM_OPEN_TAG.length\n    const EM_CLOSE_TAG_LENGTH = HIGHLIGHT_EM_CLOSE_TAG.length\n\n    const EM_OPEN_TAG_REGEX = /\\<em\\>/gim\n    const EM_CLOSE_TAG_REGEX = /\\<\\/em\\>/gim\n\n    let text = hit.content.highlight.text[0]\n\n    let opened = EM_OPEN_TAG_REGEX.exec(text)\n    let closed = EM_CLOSE_TAG_REGEX.exec(text)\n\n    // collect all highlights positions\n    let highlight = []\n\n    while (opened && closed) {\n        const offset = highlight.length * EM_OPEN_TAG_LENGTH + highlight.length * EM_CLOSE_TAG_LENGTH\n        highlight.push({ type: 'HL', start: opened.index - offset, end: EM_CLOSE_TAG_REGEX.lastIndex - EM_OPEN_TAG_LENGTH - EM_CLOSE_TAG_LENGTH - offset })\n        opened = EM_OPEN_TAG_REGEX.exec(text)\n        closed = EM_CLOSE_TAG_REGEX.exec(text)\n    }\n\n    // clear text from highlights\n    const clearedText = text.replace(EM_OPEN_TAG_REGEX, '').replace(EM_CLOSE_TAG_REGEX, '')\n\n    // collect all named entitites positions\n    hit.named_entities.forEach(entity => highlight.push({ type: 'NE', start: entity.position.start, end: entity.position.start + entity.position.length }))\n\n    // sort all items to be inserted\n    highlight = highlight.sort((a, b) => a.end < b.end ? 1 : -1).map((hl, idx) => ({ ...hl, id: idx }))\n\n    const coordsData = []\n    highlight.forEach(hl => {\n        coordsData.push({\n            coord: hl.end,\n            coordType: 'e',\n            type: hl.type,\n            id: hl.id\n        })\n        coordsData.push({\n            coord: hl.start,\n            coordType: 's',\n            type: hl.type,\n            id: hl.id\n        })\n    })\n\n    coordsData.sort((a, b) => {\n        if (a.coord == b.coord) {\n            return a.id < b.id ? 1 : -1\n        }\n        return a.coord < b.coord ? 1 : -1\n    })\n\n    const resultText = []\n    let lastSlicePosition = clearedText.length\n    let lastHlCoord\n    let tagsToInsert = []\n\n    const flushTagsToInsert = (startIdx) => {\n        tagsToInsert.filter(t => t.start >= startIdx).sort((a, b) => a.start > b.start ? 1 : -1).forEach(t => {\n            resultText.push(clearedText.slice(t.start, lastSlicePosition))\n            resultText.push(t.type === 'HL' ? HIGHLIGHT_EM_OPEN_TAG : ENTITY_EM_OPEN_TAG)\n            lastSlicePosition = t.start\n        })\n        tagsToInsert = tagsToInsert.filter(t => t.start < startIdx)\n    }\n\n    const insertTag = (coord) => {\n        resultText.push(clearedText.slice(coord.coord, lastSlicePosition))\n        resultText.push(coord.coordType == 'e'\n            ? ENTITY_EM_CLOSE_TAG\n            : coord.type === 'HL'\n                ? HIGHLIGHT_EM_OPEN_TAG\n                : ENTITY_EM_OPEN_TAG)\n        lastSlicePosition = coord.coord\n        lastHlCoord = coord\n    }\n\n    for (let i = 0; i < coordsData.length; i++) {\n        if (coordsData[i].coordType == 'e') {\n            flushTagsToInsert(coordsData[i].coord)\n            insertTag(coordsData[i])\n        }\n        else {\n            const currentHl = highlight.find(hl => hl.id === coordsData[i].id)\n            const intersectingHls = highlight\n                .filter(hl => (hl.id != currentHl.id) && (hl.start <= currentHl.start) && (hl.end >= currentHl.start) && (hl.end <= currentHl.end))\n                .sort((a, b) => a.start > b.start ? 1 : -1)\n\n            if (intersectingHls.length === 0) {\n                flushTagsToInsert(coordsData[i].coord)\n                insertTag(coordsData[i])\n            }\n            else {\n                tagsToInsert.push({ type: currentHl.type, start: intersectingHls[0].start })\n            }\n        }\n    }\n\n    flushTagsToInsert(0)\n    resultText.push(clearedText.slice(0, lastSlicePosition))\n    resultText.reverse()\n\n    hit.content.highlight.text[0] = resultText.join('')\n\n    return hit\n}\n\nconst normalizeHitContentHighlights = (hit) => {\n    const ALLOWED_TAGS = ['br', 'em', 'em class=\\\"entity\\\"']\n    const SEPARATOR_TAG = '<br/>'\n    const SPACE_CHAR = ' '\n    const EMPTY_CHAR = ''\n\n    if (!hit.content) {\n        return hit\n    }\n\n    if (!hit.content.highlight) {\n        return hit\n    }\n\n    if (!hit.content.highlight.text) {\n        return hit\n    }\n\n    hit.content.highlight.text = hit.content.highlight.text.map(hl => {\n        let strippedHl = hl\n            .replace(/\\</gim, '&lt;')\n            .replace(/\\>/gim, '&gt;')\n\n        ALLOWED_TAGS.forEach(tag => {\n            strippedHl = strippedHl\n                .replace(new RegExp(`(\\&lt\\;${tag}\\&gt\\;)`, 'gim'), `<${tag}>`)\n                .replace(new RegExp(`(\\&lt\\;${tag}\\/\\&gt\\;)`, 'gim'), `<${tag}/>`)\n                .replace(new RegExp(`(\\&lt\\;\\/${tag}\\&gt\\;)`, 'gim'), `</${tag}>`)\n        })\n\n        strippedHl = strippedHl.replace(/(?:\\r\\n|\\r|\\n)/gi, SEPARATOR_TAG)\n            .replace(/(<br\\s*\\/?>(\\s*)){2,}/gi, SEPARATOR_TAG)\n            .replace(/((&nbsp;)+)/gi, SPACE_CHAR)\n            .replace(/(?:\\t)+/gi, SPACE_CHAR)\n            .replace(/[\\s]+/gi, SPACE_CHAR)\n\n        return strippedHl\n    })\n\n    return hit\n}\n\nconst transformHit = (hit) => {\n    const transformedHit = {\n        ...hit._source,\n        named_entities: [],\n        named_entities_distinct: [],\n        tags: [],\n        score: hit._score,\n        hidden_mark: undefined\n    }\n\n    const highlight = mergeAnalyzedFieldsHighlight(hit.highlight)\n\n    if (highlight) {\n        Object.keys(highlight).forEach(key => {\n            if (key.startsWith('meta.')) {\n                if (!transformedHit.meta.highlight) {\n                    transformedHit.meta.highlight = {}\n                }\n                transformedHit.meta.highlight[key.replace('meta.', '')] = highlight[key]\n            }\n            if (key.startsWith('content.')) {\n                if (!transformedHit.content.highlight) {\n                    transformedHit.content.highlight = {}\n                }\n                transformedHit.content.highlight[key.replace('content.', '')] = highlight[key]\n            }\n        })\n    }\n\n    if (hit.inner_hits && hit.inner_hits.ambar_file_tag) {\n        transformedHit.tags = hit.inner_hits.ambar_file_tag.hits.hits.map(hit => {\n            const tag = hit._source\n            return hit.highlight ? { ...hit._source, highlight: hit.highlight } : hit._source\n        })\n    }\n\n    if (hit.inner_hits && hit.inner_hits.ambar_file_hidden_mark && hit.inner_hits.ambar_file_hidden_mark.hits.hits.length > 0) {\n        transformedHit.hidden_mark = hit.inner_hits.ambar_file_hidden_mark.hits.hits[0]._source\n    }\n\n    if (hit.inner_hits && hit.inner_hits.ambar_file_named_entity && hit.inner_hits.ambar_file_named_entity.hits.hits.length > 0) {\n        transformedHit.named_entities = hit.inner_hits.ambar_file_named_entity.hits.hits.map(hit => hit._source)\n        transformedHit.named_entities.forEach(entity => {\n            let foundEntity = transformedHit.named_entities_distinct.find(ent => ent.name === entity.name)\n\n            if (foundEntity) {\n                foundEntity.count = foundEntity.count + 1\n            } else {\n                transformedHit.named_entities_distinct.push({ ...entity, position: undefined, indexed_datetime: undefined, id: undefined, count: 1 })\n            }\n        })\n        transformedHit.named_entities_distinct = transformedHit.named_entities_distinct.sort((a, b) => a.count - b.count)\n    }\n\n    return transformedHit\n}\n\nconst getPathType = (fullPath) => /\\/$/g.test(fullPath) ? 'folder' : 'file'\nconst getPathDepth = (fullPath) => getPathType(fullPath) === 'folder' ?\n    fullPath.match(/\\//g).length - 3 :\n    fullPath.match(/\\//g).length - 2\nconst getParentPath = (fullPath) => getPathType(fullPath) === 'file' ?\n    fullPath.slice(0, fullPath.lastIndexOf('/') + 1) :\n    fullPath.slice(0, fullPath.slice(0, -1).lastIndexOf('/') + 1)\nconst getPathName = (fullPath) => getPathType(fullPath) === 'file' ?\n    fullPath.slice(fullPath.lastIndexOf('/') + 1) :\n    fullPath.slice(fullPath.slice(0, fullPath.length - 1).lastIndexOf('/') + 1, -1)\nconst calculateTreeNodeChildrenCount = (treeNode) => treeNode.children.length > 0 ?\n    treeNode.children.reduce((sum, node) => sum + node.hits_count, 0) :\n    0\n\nconst normalizeTreeAggregationResult = (esResult) => {\n    const result = {\n        total: esResult.hits.total,\n        tree: []\n    }\n\n    const plainTree = esResult.aggregations.full_name_parts.buckets\n        //.filter(bucket => getPathType(bucket.key) != 'file')\n        .map(bucket => ({\n            path: bucket.key,\n            name: getPathName(bucket.key),\n            parent_path: getParentPath(bucket.key),\n            depth: getPathDepth(bucket.key),\n            type: getPathDepth(bucket.key) === 0 ? 'source' : getPathType(bucket.key),\n            thumb_available: getPathType(bucket.key) === 'file' ?\n                bucket.thumb_available.buckets[0].key === 1 ?\n                    true :\n                    false :\n                null,\n            file_id: getPathType(bucket.key) === 'file' ?\n                bucket.file_id.buckets[0].key :\n                null,\n            content_type: getPathType(bucket.key) === 'file' ?\n                bucket.content_type.buckets[0].key :\n                null,\n            sha256: getPathType(bucket.key) === 'file' ?\n                bucket.sha256.buckets[0].key :\n                null,\n            hits_count: bucket.doc_count,\n            children: []\n        }))\n\n    plainTree\n        .filter(node => node.depth > 0)\n        .forEach(node =>\n            plainTree\n                .filter(treeNode => treeNode.depth === node.depth - 1)\n                .filter(treeNode => treeNode.path === node.parent_path)\n                .forEach(treeNode => treeNode.children.push(node)))\n\n    plainTree\n        .filter(treeNode => treeNode.type != 'file')\n        .filter(treeNode => treeNode.children.length > 0)\n        .filter(treeNode => calculateTreeNodeChildrenCount(treeNode) != treeNode.hits_count)\n        .forEach(treeNode => treeNode.children.push({\n            path: `${treeNode.path}...`,\n            name: '...',\n            parent_path: treeNode.path,\n            depth: treeNode.depth + 1,\n            type: 'mixed',\n            thumb_available: null,\n            file_id: null,\n            content_type: null,\n            sha256: null,\n            hits_count: treeNode.hits_count - calculateTreeNodeChildrenCount(treeNode),\n            children: []\n        }))\n\n    return { ...result, tree: plainTree.filter(node => node.depth === 0) }\n}\n\nconst normalizeStatsAggregationResult = (esResult) => {\n    const result = {\n        total: esResult.hits.total,\n        summary: {},\n        tags: {},\n        named_entities: {}\n    }\n\n    result.summary = {\n        data: esResult.aggregations.summary\n    }\n\n    result.extensions = {\n        total: esResult.hits.total,\n        data: esResult.aggregations.extensions.buckets\n            .filter(bucket => bucket.doc_count > MIN_THRESHOLD_EXTENSION * esResult.hits.total)\n            .map(bucket => ({\n                extension: bucket.key,\n                hits_percent: bucket.doc_count / esResult.hits.total * 100,\n                hits_count: bucket.doc_count\n            }))\n    }\n    const presentExtensionsHitsCount = result.extensions.data.reduce((sum, bucket) => sum + bucket.hits_count, 0)\n    if (presentExtensionsHitsCount < esResult.hits.total) {\n        result.extensions.data.push({\n            extension: 'Others',\n            hits_percent: (esResult.hits.total - presentExtensionsHitsCount) / esResult.hits.total * 100,\n            hits_count: esResult.hits.total - presentExtensionsHitsCount\n        })\n    }\n\n    result.named_entities = {\n        total: esResult.aggregations.named_entities.doc_count,\n        data: esResult.aggregations.named_entities.names.buckets\n            .map(bucket => ({\n                name: bucket.key,\n                type: bucket.types.buckets[0].key,\n                hits_percent: bucket.doc_count / esResult.aggregations.named_entities.doc_count * 100,\n                hits_count: bucket.doc_count\n            }))\n    }\n\n    result.tags = {\n        total: esResult.aggregations.tags.doc_count,\n        data: esResult.aggregations.tags.names.buckets\n            .map(bucket => ({\n                name: bucket.key,\n                type: bucket.types.buckets[0].key,\n                hits_percent: bucket.doc_count / esResult.aggregations.tags.doc_count * 100,\n                hits_count: bucket.doc_count\n            }))\n    }\n\n    return result\n}\n\nexport const getShortStats = (esClient, indexName) => new Promise((resolve, reject) =>\n    esClient.search({\n        index: EsQueryBuilder.getFullIndexName(indexName),\n        type: config.esFileTypeName,\n        body: EsQueryBuilder.getShortStatsQuery()\n    })\n        .then(result => {\n            resolve(result)\n        })\n        .catch(err => reject(err))\n)\n\nexport const getTagsStat = (esClient, indexName) => new Promise((resolve, reject) =>\n    esClient.search({\n        index: EsQueryBuilder.getFullIndexName(indexName),\n        type: config.esFileTagTypeName,\n        body: EsQueryBuilder.getTagsStatsQuery()\n    })\n        .then(result => {\n            resolve(transformTagsStat(result))\n        })\n        .catch(err => reject(err))\n)\n\nexport const getFilesTreeByQuery = (esClient, indexName, request) => new Promise((resolve, reject) => {\n    esClient.search({\n        index: EsQueryBuilder.getFullIndexName(indexName),\n        type: config.esFileTypeName,\n        body: EsQueryBuilder.getFilesTreeQuery(request)\n    })\n        .then(result => resolve(normalizeTreeAggregationResult(result)))\n        .catch(err => reject(err))\n})\n\nexport const getFilesStatsByQuery = (esClient, indexName, request) => new Promise((resolve, reject) => {\n    esClient.search({\n        index: EsQueryBuilder.getFullIndexName(indexName),\n        type: config.esFileTypeName,\n        body: EsQueryBuilder.getFilesStatsQuery(request)\n    })\n        .then(result => resolve(normalizeStatsAggregationResult(result)))\n        .catch(err => reject(err))\n})\n\nexport const searchFiles = (esClient, indexName, request, from, size) => {\n    const fullIndexName = EsQueryBuilder.getFullIndexName(indexName)\n\n    const requests = [\n        { index: fullIndexName, type: config.esFileTypeName },\n        EsQueryBuilder.getFilesWithHighlightsQuery(request, from * size, size),\n        { index: fullIndexName, type: config.esFileTypeName },\n        EsQueryBuilder.getFilesWithoutHighlightsQuery(request, from * size, size)\n    ]\n\n    return new Promise((resolve, reject) =>\n        esClient.msearch({\n            body: requests\n        })\n            .then(results => {\n                const result = results.responses\n                const maxScore = Math.max(result[0].hits.max_score, result[1].hits.max_score)\n\n                const resultHits = normalizeHitsScore(result[0].hits.hits, maxScore)\n                    .concat(normalizeHitsScore(result[1].hits.hits, maxScore))\n                    .sort((a, b) => b._score - a._score)\n                    .map((hit) => normalizeHitContentHighlights(transformHit(hit)))\n                    .filter((hit) => (hit.content.highlight &&\n                        hit.content.highlight.text &&\n                        hit.content.highlight.text.length > 0 &&\n                        !hit.content.highlight.text.some(text => /<em>/.test(text)) &&\n                        !hit.meta.highlight &&\n                        !hit.content.highlight.author &&\n                        request.content != '*' &&\n                        request.content != '')\n                        ? false\n                        : true)\n\n                resolve({\n                    total: result[0].hits.total + result[1].hits.total,\n                    hits: resultHits\n                })\n            })\n            .catch(err => reject(err))\n    )\n}\n\nexport const getFileHighlightByFileId = (esClient, indexName, request, fileId) => new Promise((resolve, reject) => {\n    esClient.search({\n        index: EsQueryBuilder.getFullIndexName(indexName),\n        type: config.esFileTypeName,\n        body: EsQueryBuilder.getFileHighlightQuery(request, fileId)\n    })\n        .then(result => {\n            if (result.hits.hits && result.hits.hits.length === 1) {\n                resolve(\n                    normalizeHitContentHighlights(\n                        transformHit(result.hits.hits[0])\n                    )\n                )\n            }\n            else {\n                resolve({})\n            }\n        })\n        .catch(err => reject(err))\n})\n\nexport const getFullFileHighlightByFileId = (esClient, indexName, request, fileId) => new Promise((resolve, reject) => {\n    esClient.search({\n        index: EsQueryBuilder.getFullIndexName(indexName),\n        type: config.esFileTypeName,\n        body: EsQueryBuilder.getFullFileHighlightQuery(request, fileId)\n    })\n        .then(result => {\n            if (result.hits.hits && result.hits.hits.length === 1) {\n                resolve(\n                    normalizeHitContentHighlights(\n                        highlightEntitiesInHitContentHighlights(\n                            transformHit(result.hits.hits[0])\n                        )\n                    )\n                )\n            }\n            else {\n                resolve({})\n            }\n        })\n        .catch(err => reject(err))\n})\n\nexport const checkIfMetaIdExists = (esClient, indexName, metaId) => new Promise((resolve, reject) => {\n    esClient.search({\n        index: EsQueryBuilder.getFullIndexName(indexName),\n        type: config.esFileTypeName,\n        _source: false,\n        body: {\n            query: {\n                term: { 'meta.id': metaId }\n            }\n        }\n    })\n        .then(result => resolve(result.hits.total > 0 ? true : false))\n        .catch(err => reject(err))\n})\n\nexport const checkIfFileExists = (esClient, indexName, fileId) => new Promise((resolve, reject) => {\n    esClient.get({\n        index: EsQueryBuilder.getFullIndexName(indexName),\n        type: config.esFileTypeName,\n        _source: false,\n        id: fileId\n    })\n        .then(result => {\n            resolve(result.found)\n        })\n        .catch(err => {\n            if (err.statusCode == 404) {\n                resolve(false)\n                return\n            }\n            reject(err)\n        })\n})\n\nexport const getFileByFileId = (esClient, indexName, fileId, includeChildren = false) => new Promise((resolve, reject) => {\n    esClient.search({\n        index: EsQueryBuilder.getFullIndexName(indexName),\n        type: config.esFileTypeName,\n        body: {\n            query: {\n                bool: {\n                    must: [\n                        { term: { 'file_id': fileId } }\n                    ],\n                    should: includeChildren ? [\n                        {\n                            has_child: {\n                                type: 'ambar_file_tag',\n                                query: {\n                                    match_all: {}\n                                },\n                                inner_hits: {}\n                            }\n                        },\n                        {\n                            has_child: {\n                                type: 'ambar_file_named_entity',\n                                query: {\n                                    match_all: {}\n                                },\n                                inner_hits: {}\n                            }\n                        },\n                        {\n                            has_child: {\n                                type: 'ambar_file_hidden_mark',\n                                query: {\n                                    match_all: {}\n                                },\n                                inner_hits: {}\n                            }\n                        }\n                    ] : [],\n                    minimum_should_match: 0\n                }\n            }\n        }\n    })\n        .then(result => resolve(result.hits.total > 0 ? normalizeHitContentHighlights(transformHit(result.hits.hits[0])) : null))\n        .catch(err => reject(err))\n})\n\nexport const getFileBySha = (esClient, indexName, sha) => new Promise((resolve, reject) => {\n    esClient.search({\n        index: EsQueryBuilder.getFullIndexName(indexName),\n        type: config.esFileTypeName,\n        body: {\n            from: 0,\n            size: 1,\n            query: {\n                term: { 'sha256': sha }\n            }\n        }\n    })\n        .then(result => resolve(result.hits.total > 0 ? normalizeHitContentHighlights(transformHit(result.hits.hits[0])) : null))\n        .catch(err => reject(err))\n})\n\nexport const hideFile = (esClient, indexName, fileId) => new Promise((resolve, reject) => {\n    const hiddenMark = {\n        id: getHiddenMarkId(fileId),\n        indexed_datetime: DateTimeService.getCurrentDateTime()\n    }\n\n    esClient.index({\n        index: EsQueryBuilder.getFullIndexName(indexName),\n        type: config.esFileHiddenMarkTypeName,\n        parent: fileId,\n        refresh: true,\n        id: hiddenMark.id,\n        body: hiddenMark\n    })\n        .then(res => resolve(res))\n        .catch(err => reject(err))\n})\n\nexport const unHideFile = (esClient, indexName, fileId) => new Promise((resolve, reject) => {\n    const hiddenMarkId = getHiddenMarkId(fileId)\n\n    esClient.delete({\n        index: EsQueryBuilder.getFullIndexName(indexName),\n        type: config.esFileHiddenMarkTypeName,\n        routing: fileId,\n        refresh: true,\n        id: hiddenMarkId\n    })\n        .then(res => resolve(res))\n        .catch(err => reject(err))\n})\n\nexport const indexNamedEntities = (esClient, indexName, fileId, entities) => new Promise((resolve, reject) => {\n    const payload = []\n\n    entities.forEach(entity => {\n        payload.push({ index: { _index: EsQueryBuilder.getFullIndexName(indexName), _type: config.esFileNamedEntityTypeName, _id: entity.id, _parent: fileId } })\n        payload.push({ ...entity, indexed_datetime: DateTimeService.getCurrentDateTime() })\n    })\n\n    esClient.bulk({\n        body: payload\n    })\n        .then(res => {\n            if (!res.errors) {\n                resolve(res)\n                return\n            }\n            reject(res)\n        })\n        .catch(err => reject(err))\n})\n\nexport const indexTag = (esClient, indexName, fileId, tag) => new Promise((resolve, reject) => {\n    tag.indexed_datetime = DateTimeService.getCurrentDateTime()\n    esClient.index({\n        index: EsQueryBuilder.getFullIndexName(indexName),\n        type: config.esFileTagTypeName,\n        parent: fileId,\n        refresh: true,\n        id: tag.id,\n        body: tag\n    })\n        .then(res => resolve(res))\n        .catch(err => reject(err))\n})\n\nexport const deleteTag = (esClient, indexName, fileId, tagId) => new Promise((resolve, reject) => {\n    esClient.delete({\n        index: EsQueryBuilder.getFullIndexName(indexName),\n        type: config.esFileTagTypeName,\n        routing: fileId,\n        refresh: true,\n        id: tagId\n    })\n        .then(res => resolve(res))\n        .catch(err => reject(err))\n})\n\nexport const indexLogItem = (esClient, logItem) => {\n    logItem.indexed_datetime = DateTimeService.getCurrentDateTime()\n    esClient.index({\n        index: config.esLogIndexName,\n        type: config.esLogTypeName,\n        body: logItem\n    })\n}\n\nexport const getLastLogRecords = (esClient, sourceId, numberOfRecords) => new Promise((resolve, reject) => {\n    let query = {\n        from: 0,\n        size: numberOfRecords,\n        sort: { created_datetime: { order: 'desc' } }\n    }\n    if (sourceId) {\n        query.query = {\n            term: { source_id: sourceId }\n        }\n    }\n    return esClient.search({\n        index: config.esLogIndexName,\n        type: config.esLogTypeName,\n        body: query\n    })\n        .then(result => resolve(result.hits.hits.map(hit => hit._source).reverse()))\n        .catch(err => reject(err))\n})\n\nexport const createLogIndexIfNotExist = (esClient) => new Promise((resolve, reject) => {\n    esClient.indices.create({\n        index: 'ambar_log_record_data',\n        body: AmbarLogMapping\n    })\n        .then(result => resolve())\n        .catch(err => {\n            if (err.status === 400) {\n                resolve() // Log index already exists\n                return\n            }\n\n            reject(err)\n        })\n})\n\nexport const createUserIndex = (esClient, indexName, langAnalyzer) => new Promise((resolve, reject) => {\n    let userMappings = JSON.parse(JSON.stringify({ ...AmbarFileDataMapping }).replace(MAPPING_ANALYZER_REGEX, langAnalyzer))\n\n    esClient.indices.create({\n        index: EsQueryBuilder.getFullIndexName(indexName),\n        body: userMappings\n    })\n        .then(result => resolve(result))\n        .catch(err => reject(err))\n})\n\nexport const deleteUserIndex = (esClient, indexName) => new Promise((resolve, reject) => {\n    esClient.indices.delete({\n        index: EsQueryBuilder.getFullIndexName(indexName)\n    })\n        .then(result => resolve(result))\n        .catch(err => reject(err))\n})\n\nexport const deleteAutoTagsAndNamedEntities = (esClient, indexName, fileId) => new Promise((resolve, reject) => {\n    Promise.all([deleteAutoTags(esClient, indexName, fileId),\n    deleteNamedEntities(esClient, indexName, fileId)])\n        .then(results => resolve(results))\n        .catch(err => reject(err))\n})\n\nconst deleteAutoTags = (esClient, indexName, fileId) => new Promise((resolve, reject) => {\n    esClient.deleteByQuery({\n        index: EsQueryBuilder.getFullIndexName(indexName),\n        type: config.esFileTagTypeName,\n        body: {\n            query: {\n                bool: {\n                    must: [\n                        {\n                            parent_id: {\n                                type: \"ambar_file_tag\",\n                                id: fileId\n                            }\n                        },\n                        {\n                            bool: {\n                                should: [\n                                    {\n                                        term: {\n                                            type: 'auto'\n                                        }\n                                    },\n                                    {\n                                        term: {\n                                            type: 'source'\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    })\n        .then(res => resolve(res))\n        .catch(err => reject(err))\n})\n\nconst deleteNamedEntities = (esClient, indexName, fileId) => new Promise((resolve, reject) => {\n    esClient.deleteByQuery({\n        index: EsQueryBuilder.getFullIndexName(indexName),\n        type: config.esFileNamedEntityTypeName,\n        body: {\n            query: {\n                parent_id: {\n                    type: \"ambar_file_named_entity\",\n                    id: fileId\n                }\n            }\n        }\n    })\n        .then(res => resolve(res))\n        .catch(err => reject(err))\n})"]}