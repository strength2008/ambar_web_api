{"version":3,"sources":["../../src/services/GridFsProxy.js"],"names":["createGridFsInstance","mongoDbInstance","uploadFile","mongo","fileName","buffer","Promise","resolve","reject","gfs","writeStream","createWriteStream","filename","mode","on","result","error","pipe","uploadPlainTextFile","content_type","checkIfFileExist","exist","err","found","removeFile","remove","gridStore","downloadFile","readStream","createReadStream"],"mappings":"+MAAA,6C;AACA,kC;AACA,0C;;AAEA,IAAMA,uBAAuB,SAAvBA,oBAAuB,CAACC,eAAD,EAAqB;AAC9C,WAAO,4BAAOA,eAAP,oBAAP;AACH,CAFD;;AAIO,IAAMC,kCAAa,SAAbA,UAAa,CAACC,KAAD,EAAQC,QAAR,EAAkBC,MAAlB,UAA6B,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpF,YAAMC,MAAMT,qBAAqBG,KAArB,CAAZ;;AAEA,YAAMO,cAAcD,IAAIE,iBAAJ,CAAsB,EAAEC,UAAUR,QAAZ,EAAsBS,MAAM,GAA5B,EAAtB,CAApB;;AAEAH,oBAAYI,EAAZ,CAAe,OAAf,EAAwB,UAACC,MAAD,UAAYR,QAAQQ,MAAR,CAAZ,EAAxB;AACAL,oBAAYI,EAAZ,CAAe,OAAf,EAAwB,UAACE,KAAD,UAAWR,OAAOQ,KAAP,CAAX,EAAxB;;AAEA,2CAAiBX,MAAjB,EAAyBY,IAAzB,CAA8BP,WAA9B;AACH,KATsD,CAA7B,EAAnB;;AAWA,IAAMQ,oDAAsB,SAAtBA,mBAAsB,CAACf,KAAD,EAAQC,QAAR,EAAkBC,MAAlB,UAA6B,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC7F,YAAMC,MAAMT,qBAAqBG,KAArB,CAAZ;;AAEA,YAAMO,cAAcD,IAAIE,iBAAJ,CAAsB,EAAEC,UAAUR,QAAZ,EAAsBS,MAAM,GAA5B,EAAiCM,cAAc,YAA/C,EAAtB,CAApB;;AAEAT,oBAAYI,EAAZ,CAAe,OAAf,EAAwB,UAACC,MAAD,UAAYR,QAAQQ,MAAR,CAAZ,EAAxB;AACAL,oBAAYI,EAAZ,CAAe,OAAf,EAAwB,UAACE,KAAD,UAAWR,OAAOQ,KAAP,CAAX,EAAxB;;AAEA,2CAAiBX,MAAjB,EAAyBY,IAAzB,CAA8BP,WAA9B;AACH,KAT+D,CAA7B,EAA5B;;AAWA,IAAMU,8CAAmB,SAAnBA,gBAAmB,CAACjB,KAAD,EAAQC,QAAR,UAAqB,IAAIE,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAClF,YAAMC,MAAMT,qBAAqBG,KAArB,CAAZ;;AAEAM,YAAIY,KAAJ,CAAU,EAAET,UAAUR,QAAZ,EAAV,EAAkC,UAACkB,GAAD,EAAMC,KAAN,EAAgB;AAC9C,gBAAID,GAAJ,EAAS;AACLd,uBAAOc,GAAP;AACA;AACH;;AAEDf,oBAAQgB,KAAR;AACH,SAPD;AAQH,KAXoD,CAArB,EAAzB;;AAaA,IAAMC,kCAAa,SAAbA,UAAa,CAACrB,KAAD,EAAQC,QAAR,UAAqB,IAAIE,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC5E,YAAMC,MAAMT,qBAAqBG,KAArB,CAAZ;;AAEAM,YAAIgB,MAAJ,CAAW,EAAEb,UAAUR,QAAZ,EAAX,EAAmC,UAACkB,GAAD,EAAMI,SAAN,EAAoB;AACnD,gBAAIJ,GAAJ,EAAS;AACLd,uBAAOc,GAAP;AACA;AACH;;AAEDf;AACH,SAPD;AAQH,KAX8C,CAArB,EAAnB;;AAaA,IAAMoB,sCAAe,SAAfA,YAAe,CAACxB,KAAD,EAAQC,QAAR,EAAqB;AAC7C,QAAMK,MAAMT,qBAAqBG,KAArB,CAAZ;AACA,QAAMyB,aAAanB,IAAIoB,gBAAJ,CAAqB,EAAEjB,UAAUR,QAAZ,EAArB,CAAnB;AACA,WAAOwB,UAAP;AACH,CAJM","file":"GridFsProxy.js","sourcesContent":["import GridFs from 'gridfs-stream'\nimport mongo from 'mongodb'\nimport { createReadStream } from 'streamifier'\n\nconst createGridFsInstance = (mongoDbInstance) => {\n    return GridFs(mongoDbInstance, mongo)\n}\n\nexport const uploadFile = (mongo, fileName, buffer) => new Promise((resolve, reject) => {\n    const gfs = createGridFsInstance(mongo)\n\n    const writeStream = gfs.createWriteStream({ filename: fileName, mode: 'w' })\n\n    writeStream.on('close', (result) => resolve(result))\n    writeStream.on('error', (error) => reject(error))\n\n    createReadStream(buffer).pipe(writeStream)\n})\n\nexport const uploadPlainTextFile = (mongo, fileName, buffer) => new Promise((resolve, reject) => {\n    const gfs = createGridFsInstance(mongo)\n\n    const writeStream = gfs.createWriteStream({ filename: fileName, mode: 'w', content_type: 'text/plain' })\n\n    writeStream.on('close', (result) => resolve(result))\n    writeStream.on('error', (error) => reject(error))\n\n    createReadStream(buffer).pipe(writeStream)\n})\n\nexport const checkIfFileExist = (mongo, fileName) => new Promise((resolve, reject) => {\n    const gfs = createGridFsInstance(mongo)\n\n    gfs.exist({ filename: fileName }, (err, found) => {\n        if (err) {\n            reject(err)\n            return\n        }\n\n        resolve(found)\n    })\n})\n\nexport const removeFile = (mongo, fileName) => new Promise((resolve, reject) => {\n    const gfs = createGridFsInstance(mongo)\n\n    gfs.remove({ filename: fileName }, (err, gridStore) => {\n        if (err) {\n            reject(err)\n            return\n        }\n\n        resolve()\n    });\n})\n\nexport const downloadFile = (mongo, fileName) => {\n    const gfs = createGridFsInstance(mongo)\n    const readStream = gfs.createReadStream({ filename: fileName })\n    return readStream\n}"]}