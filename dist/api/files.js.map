{"version":3,"sources":["../../src/api/files.js"],"names":["MetaBuilder","AmbarCrawlerSettingsBuilder","generateMetaId","source_id","full_name","created_datetime","updated_datetime","getSha256","generateFileId","generateExtractedTextFileName","sha","config","storage","api","post","ensureAuthenticatedAsService","req","res","next","body","indexName","params","index","status","json","metaId","checkIfMetaIdExists","redis","then","redisResult","elasticSearch","exists","addMetaId","statusToSend","sendStatus","catch","requestBody","size","crawlerUid","uid","fileSize","parseInt","meta","buildMeta","Promise","all","getEsIndexContentSize","getEsIndexContentMaxSize","mongoDb","indexSize","indexMaxSize","setEsIndexContentSize","enqueuePipelineMessage","fileId","id","head","fileName","checkIfFileExist","found","clientHash","files","fileContent","Buffer","isBuffer","buffer","byteLength","serverHash","toLowerCase","uploadFile","get","writeHead","encodeURIComponent","downloadFile","pipe","delete","removeFile","getFileBySha","ambarFile","content","getFileByFileId","file","updateFile","result","Error","extractedTextFileName","uploadPlainTextFile","deleteAutoTagsAndNamedEntities","ensureAuthenticated","email","extractEmailFromHeaders","getUserIndex","sha256","fileExsists","fileMeta","fileSha","fileType","type","short_name","uri","decryptDownloadUri","err","sourceId","buildShortMeta","getBucketById","bucket","createBucket","index_name","description","put","checkIfFileExists","fileExists","hideFile","unHideFile","statusCode"],"mappings":"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","file":"files.js","sourcesContent":["import { Router } from 'express'\nimport ErrorResponse from '../utils/ErrorResponse'\nimport {\n    CryptoService,\n    EsLowLevelProxy,\n    EsProxy,\n    CacheProxy,\n    DateTimeService,\n    GridFsProxy,\n    MongoProxy,\n    FileUploader,\n    AuthService,\n    QueueProxy\n} from '../services'\nimport * as MetaBuilder from '../utils/MetaBuilder'\nimport * as AmbarCrawlerSettingsBuilder from '../models/AmbarCrawlerSettingsBuilder'\n\nconst generateMetaId = (source_id, full_name, created_datetime, updated_datetime) => {\n    return CryptoService.getSha256(`${source_id}${full_name}${created_datetime}${updated_datetime}`)\n}\n\nconst generateFileId = (source_id, full_name) => {\n    return CryptoService.getSha256(`${source_id}${full_name}`)\n}\n\nconst generateExtractedTextFileName = (sha) => `text_${sha}`\n\nexport default ({ config, storage }) => {\n    let api = Router()\n\n    //////////////// CALLED FROM CRAWLERS ////////////////////////////////////\n    /**\n    * Check if partial meta exist in ES     \n    */\n    api.post('/meta/exists/:index', AuthService.ensureAuthenticatedAsService(storage), (req, res, next) => {\n        const { body: { full_name, updated_datetime, created_datetime, source_id }, params: { index: indexName } } = req\n\n        if (!full_name || !updated_datetime || !created_datetime || !source_id || !indexName) {\n            res.status(400).json(new ErrorResponse('Required field is missing'))\n            return\n        }\n\n        const metaId = generateMetaId(source_id, full_name, created_datetime, updated_datetime)\n\n        CacheProxy.checkIfMetaIdExists(storage.redis, indexName, metaId)\n            .then((redisResult) => {\n                if (redisResult) {\n                    return 200\n                }\n\n                return EsProxy.checkIfMetaIdExists(storage.elasticSearch, indexName, metaId)\n                    .then(exists => {\n                        if (exists) {\n                            CacheProxy.addMetaId(storage.redis, indexName, metaId)\n                            return 200\n                        }\n                        return 404\n                    })\n            })\n            .then((statusToSend) => {\n                res.sendStatus(statusToSend)\n            })\n            .catch(next)\n    })\n\n    /**\n     * Enqueue meta for specified sha (enqueuing message to pipeline)\n     */\n    api.post('/meta/:index/:sha/:size/:uid', AuthService.ensureAuthenticatedAsService(storage), (req, res, next) => {\n        const { body: requestBody, params: { sha, index: indexName, size, uid: crawlerUid } } = req\n\n        const fileSize = parseInt(size)\n\n        if (!requestBody) {\n            res.status(400).json(new ErrorResponse('Empty request'))\n            return\n        }\n\n        const meta = MetaBuilder.buildMeta(requestBody)\n\n        if (!meta || !sha || !indexName) {\n            res.status(400).json(new ErrorResponse('Invalid request'))\n            return\n        }\n\n        Promise.all([\n            CacheProxy.getEsIndexContentSize(storage.redis, storage.elasticSearch, indexName),\n            CacheProxy.getEsIndexContentMaxSize(storage.redis, storage.mongoDb, indexName)\n        ])\n            .then(([indexSize, indexMaxSize]) => {\n                if (((indexSize + fileSize) > indexMaxSize) && indexMaxSize != -1) {\n                    res.sendStatus(507)\n                    return\n                }\n\n                CacheProxy.setEsIndexContentSize(storage.redis, indexName, indexSize + fileSize)\n\n                return QueueProxy.enqueuePipelineMessage(storage, { sha: sha, fileId: generateFileId(meta.source_id, meta.full_name), indexName: indexName, crawlerUid: crawlerUid, meta: meta })\n                    .then(() => {\n                        CacheProxy.addMetaId(storage.redis, indexName, meta.id)\n                        res.sendStatus(200)\n                    })\n            })\n            .catch(next)\n    })\n\n    /*\n    * Check if parsed content exists\n    */\n    api.head('/content/:sha/parsed', AuthService.ensureAuthenticatedAsService(storage), (req, res, next) => {\n        const sha = req.params.sha\n\n        const fileName = generateExtractedTextFileName(sha)\n\n        GridFsProxy.checkIfFileExist(storage.mongoDb, fileName)\n            .then(found => found ? sha : null)\n            .then(sha => {\n                if (!sha) {\n                    res.sendStatus(404)\n                    return\n                }\n\n                res.sendStatus(302)\n            })\n            .catch(next)\n    })\n\n    /**\n     * Create content\n     */\n    api.post('/content/:sha', AuthService.ensureAuthenticatedAsService(storage), FileUploader, (req, res, next) => {\n        let { params: { sha: clientHash }, files } = req\n        const fileContent = (Buffer.isBuffer(files[0].buffer) && Buffer.byteLength(files[0].buffer) > 0) ? files[0].buffer : new Buffer(0)\n        const serverHash = CryptoService.getSha256(fileContent)\n\n        if (serverHash.toLowerCase() !== clientHash.toLowerCase()) {\n            res.status(400).json(new ErrorResponse(`Server hash isn't equal client hash. Server hash: '${serverHash}'`))\n            return\n        }\n\n        GridFsProxy.checkIfFileExist(storage.mongoDb, serverHash)\n            .then(found => {\n                if (found) {\n                    res.sendStatus(302)\n                    return\n                }\n\n                return GridFsProxy.uploadFile(storage.mongoDb, serverHash, fileContent)\n                    .then(() => res.sendStatus(201))\n            })\n            .catch(next)\n    })\n\n    //////////////// CALLED FROM PIPELINE ////////////////////////////////////\n    /**\n     * Get file content by sha\n     */\n    api.get('/content/:sha', AuthService.ensureAuthenticatedAsService(storage), (req, res, next) => {\n        const sha = req.params.sha\n\n        GridFsProxy.checkIfFileExist(storage.mongoDb, sha)\n            .then(found => found ? sha : null)\n            .then(sha => {\n                if (!sha) {\n                    res.sendStatus(404)\n                    return\n                }\n\n                res.writeHead(200, {\n                    'Content-Type': 'application/octet-stream',\n                    'Content-Disposition': `attachment; filename*=UTF-8''${encodeURIComponent(sha)}`\n                })\n\n                GridFsProxy.downloadFile(storage.mongoDb, sha).pipe(res)\n\n                return\n            })\n            .catch(next)\n    })\n\n    /**\n     * Delete file content by sha\n     */\n    api.delete('/content/:sha', AuthService.ensureAuthenticatedAsService(storage), (req, res, next) => {\n        const sha = req.params.sha\n\n        GridFsProxy.checkIfFileExist(storage.mongoDb, sha)\n            .then(found => found ? sha : null)\n            .then(sha => {\n                if (!sha) {\n                    res.sendStatus(404)\n                    return\n                }\n\n                return GridFsProxy.removeFile(storage.mongoDb, sha)\n                    .then(() => res.sendStatus(200))\n            })\n            .catch(next)\n    })\n\n    /**\n     * Get parsed file content by sha\n     */\n    api.get('/content/:sha/parsed', AuthService.ensureAuthenticatedAsService(storage), (req, res, next) => {\n        const sha = req.params.sha\n\n        const fileName = generateExtractedTextFileName(sha)\n\n        GridFsProxy.checkIfFileExist(storage.mongoDb, fileName)\n            .then(found => found ? fileName : null)\n            .then(fileName => {\n                if (!fileName) {\n                    res.sendStatus(404)\n                    return\n                }\n\n                res.writeHead(200, {\n                    'Content-Type': 'application/octet-stream',\n                    'Content-Disposition': `attachment; filename*=UTF-8''${encodeURIComponent(fileName)}`\n                })\n\n                GridFsProxy.downloadFile(storage.mongoDb, fileName).pipe(res)\n\n                return\n            })\n            .catch(next)\n    })\n\n    /**\n     * Get file content fields from ES\n     */\n    api.get('/content/:indexName/:sha/fields', AuthService.ensureAuthenticatedAsService(storage), (req, res, next) => {\n        const { params: { indexName, sha } } = req\n\n        EsProxy.getFileBySha(storage.elasticSearch, indexName, sha)\n            .then(ambarFile => {\n                if (!ambarFile) {\n                    res.sendStatus(404)\n                    return\n                }\n\n                res.status(200).json(ambarFile.content)\n            })\n            .catch(next)\n    })\n\n    /**\n     * Get full file meta from ES\n     */\n    api.get('/file/:indexName/:fileId/meta', AuthService.ensureAuthenticatedAsService(storage), (req, res, next) => {\n        const { params: { indexName, fileId } } = req\n\n        EsProxy.getFileByFileId(storage.elasticSearch, indexName, fileId)\n            .then(ambarFile => {\n                if (!ambarFile) {\n                    res.sendStatus(404)\n                    return\n                }\n\n                res.status(200).json(ambarFile)\n            })\n            .catch(next)\n    })\n\n\n    /**\n     * Update or create ambar file\n    */\n    api.post('/file/:indexName/:fileId/processed', AuthService.ensureAuthenticatedAsService(storage), FileUploader, (req, res, next) => {\n        const { params: { indexName, fileId }, files } = req\n\n        const file = (Buffer.isBuffer(files[0].buffer) && Buffer.byteLength(files[0].buffer) > 0) ? files[0].buffer : new Buffer(0)\n\n        EsLowLevelProxy.updateFile(indexName, fileId, file)\n            .then((result) => {\n                if (result === 'created') {\n                    res.sendStatus(201)\n                    return\n                }\n\n                if (result === 'updated') {\n                    res.sendStatus(200)\n                    return\n                }\n\n                throw new Error(result)\n            })\n            .catch(next)\n    })\n\n    /**\n     * Upload parsed text to GridFS\n    */\n    api.post('/content/:sha/extracted', AuthService.ensureAuthenticatedAsService(storage), FileUploader, (req, res, next) => {\n        const { params: { sha }, files } = req\n\n        const extractedTextFileName = generateExtractedTextFileName(sha)\n\n        const file = (Buffer.isBuffer(files[0].buffer) && Buffer.byteLength(files[0].buffer) > 0) ? files[0].buffer : new Buffer(0)\n\n        GridFsProxy.uploadPlainTextFile(storage.mongoDb, extractedTextFileName, file)\n            .then(() => {\n                res.sendStatus(200)\n            })\n            .catch(next)\n    })\n\n    api.delete('/autotagsandnes/:indexName/:fileId', AuthService.ensureAuthenticatedAsService(storage), (req, res, next) => {\n        const { params: { indexName, fileId } } = req\n\n        EsProxy.deleteAutoTagsAndNamedEntities(storage.elasticSearch, indexName, fileId)\n            .then(results => {\n                res.sendStatus(200)\n            })\n            .catch(next)\n    })\n\n    //////////////// CALLED FROM UI ///////////////////////////////////////////   \n    /**     \n     * @api {get} api/files/direct/:fileId/source Download File Source by File Id    \n     * @apiGroup Files                \n     *  \n     * @apiHeader {String} ambar-email User email\n     * @apiHeader {String} ambar-email-token User token\n     * \n     * @apiSuccessExample HTTP/1.1 200 OK     \n     * Octet-Stream\n     * \n     * @apiErrorExample {json} HTTP/1.1 404 Not Found\n     * File meta or content not found\n     */\n    api.get('/direct/:fileId/source', AuthService.ensureAuthenticated(storage), (req, res, next) => {\n        const fileId = req.params.fileId\n\n        const email = AuthService.extractEmailFromHeaders(req)\n        const indexName = AuthService.getUserIndex(email)\n\n        EsProxy.getFileByFileId(storage.elasticSearch, indexName, fileId, false)\n            .then(file => {\n                if (file === null) {\n                    res.status(404).json(new ErrorResponse('File meta not found'))\n                    return\n                }\n\n                return GridFsProxy.checkIfFileExist(storage.mongoDb, file.sha256)\n                    .then(fileExsists => ({\n                        fileExsists: fileExsists,\n                        fileMeta: file.meta,\n                        fileSha: file.sha256,\n                        fileType: file.content.type\n                    }))\n                    .then(result => {\n                        if (!result.fileExsists) {\n                            res.status(404).json(new ErrorResponse('File content not found'))\n                            return\n                        }\n\n                        const { fileMeta: { short_name: fileName }, fileSha, fileType } = result\n\n                        res.writeHead(200, {\n                            'Content-Type': fileType,\n                            'Content-Disposition': `attachment; filename*=UTF-8''${encodeURIComponent(fileName)}`\n                        })\n\n                        GridFsProxy.downloadFile(storage.mongoDb, fileSha).pipe(res)\n                    })\n            })\n            .catch(next)\n    })\n\n    /**     \n     * @api {get} api/files/direct/:fileId/text Get Parsed Text From File by File Id    \n     * @apiGroup Files                \n     *  \n     * @apiHeader {String} ambar-email User email\n     * @apiHeader {String} ambar-email-token User token\n     * \n     * @apiSuccessExample HTTP/1.1 200 OK     \n     * Octet-Stream\n     * \n     * @apiErrorExample {json} HTTP/1.1 404 Not Found\n     * File meta or content not found\n     */\n    api.get('/direct/:fileId/text', AuthService.ensureAuthenticated(storage), (req, res, next) => {\n        const fileId = req.params.fileId\n\n        const email = AuthService.extractEmailFromHeaders(req)\n        const indexName = AuthService.getUserIndex(email)\n\n        EsProxy.getFileByFileId(storage.elasticSearch, indexName, fileId, false)\n            .then(file => {\n                if (file === null) {\n                    res.status(404).json(new ErrorResponse('File meta not found'))\n                    return\n                }\n\n                const extractedTextFileName = generateExtractedTextFileName(file.sha256)\n\n                return GridFsProxy.checkIfFileExist(storage.mongoDb, extractedTextFileName)\n                    .then(fileExsists => ({\n                        fileExsists: fileExsists,\n                        fileMeta: file.meta,\n                        fileType: 'text/plain'\n                    }))\n                    .then(result => {\n                        if (!result.fileExsists) {\n                            res.status(404).json(new ErrorResponse('Parsed content not found'))\n                            return\n                        }\n\n                        const { fileMeta: { short_name: fileName }, fileType } = result\n\n                        res.writeHead(200, {\n                            'Content-Type': fileType,\n                            'Content-Disposition': `attachment; filename*=UTF-8''${encodeURIComponent(`${fileName}.txt`)}`\n                        })\n\n                        GridFsProxy.downloadFile(storage.mongoDb, extractedTextFileName).pipe(res)\n                    })\n            })\n            .catch(next)\n    })\n\n    /**     \n     * @api {get} api/files/direct/:fileId/meta Get File Meta by File Id    \n     * @apiGroup Files  \n     *             \n     * @apiHeader {String} ambar-email User email\n     * @apiHeader {String} ambar-email-token User token\n     * \n     * @apiSuccessExample HTTP/1.1 200 OK     \n     * Octet-Stream\n     * \n     * @apiErrorExample {json} HTTP/1.1 404 Not Found\n     * File meta or content not found\n     */\n    api.get('/direct/:fileId/meta', AuthService.ensureAuthenticated(storage), (req, res, next) => {\n        const fileId = req.params.fileId\n\n        const email = AuthService.extractEmailFromHeaders(req)\n        const indexName = AuthService.getUserIndex(email)\n\n        EsProxy.getFileByFileId(storage.elasticSearch, indexName, fileId)\n            .then(file => {\n                if (file === null) {\n                    res.status(404).json(new ErrorResponse('File meta not found'))\n                    return\n                }\n\n                res.status(200).json(file)\n            })\n            .catch(next)\n    })\n\n    /**     \n      * @api {get} api/files/:uri Download File Content by Secure Uri    \n      * @apiGroup Files                \n      *  \n      * @apiSuccessExample HTTP/1.1 200 OK     \n      * Octet-Stream\n      * \n      * @apiErrorExample {json} HTTP/1.1 404 Not Found\n      * File meta or content not found\n      */\n    api.get('/:id', (req, res, next) => {\n        const uri = req.params.id\n\n        let result\n\n        try {\n            result = CryptoService.decryptDownloadUri(uri)\n        } catch (err) {\n            res.status(400).json(new ErrorResponse('Uri is broken'))\n            return\n        }\n\n        const { fileId, indexName } = result\n\n        EsProxy.getFileByFileId(storage.elasticSearch, indexName, fileId, false)\n            .then(file => {\n                if (file === null) {\n                    res.status(404).json(new ErrorResponse('File meta not found'))\n                    return\n                }\n\n                return GridFsProxy.checkIfFileExist(storage.mongoDb, file.sha256)\n                    .then(fileExsists => ({\n                        fileExsists: fileExsists,\n                        fileMeta: file.meta,\n                        fileSha: file.sha256,\n                        fileType: file.content.type\n                    }))\n                    .then(result => {\n                        if (!result.fileExsists) {\n                            res.status(404).json(new ErrorResponse('File content not found'))\n                            return\n                        }\n\n                        const { fileMeta: { short_name: fileName }, fileSha, fileType } = result\n\n                        res.writeHead(200, {\n                            'Content-Type': fileType,\n                            'Content-Disposition': `attachment; filename*=UTF-8''${encodeURIComponent(fileName)}`\n                        })\n\n                        GridFsProxy.downloadFile(storage.mongoDb, fileSha).pipe(res)\n                    })\n            })\n            .catch(next)\n    })\n\n    /**     \n      * @api {get} api/files/:uri/text Download Parsed Text by Secure Uri    \n      * @apiGroup Files                \n      *  \n      * @apiSuccessExample HTTP/1.1 200 OK     \n      * Octet-Stream\n      * \n      * @apiErrorExample {json} HTTP/1.1 404 Not Found\n      * File meta or content not found\n      */\n    api.get('/:id/text', (req, res, next) => {\n        const uri = req.params.id\n\n        let result\n        try {\n            result = CryptoService.decryptDownloadUri(uri)\n        } catch (err) {\n            res.status(400).json(new ErrorResponse('Uri is broken'))\n            return\n        }\n\n        const { fileId, indexName } = result\n\n        EsProxy.getFileByFileId(storage.elasticSearch, indexName, fileId, false)\n            .then(file => {\n                if (file === null) {\n                    res.status(404).json(new ErrorResponse('File meta not found'))\n                    return\n                }\n\n                const extractedTextFileName = generateExtractedTextFileName(file.sha256)\n\n                return GridFsProxy.checkIfFileExist(storage.mongoDb, extractedTextFileName)\n                    .then(fileExsists => ({\n                        fileExsists: fileExsists,\n                        fileMeta: file.meta,\n                        fileType: 'text/plain'\n                    }))\n                    .then(result => {\n                        if (!result.fileExsists) {\n                            res.status(404).json(new ErrorResponse('Parsed content not found'))\n                            return\n                        }\n\n                        const { fileMeta: { short_name: fileName }, fileType } = result\n\n                        res.writeHead(200, {\n                            'Content-Type': fileType,\n                            'Content-Disposition': `attachment; filename*=UTF-8''${encodeURIComponent(`${fileName}.txt`)}`\n                        })\n\n                        GridFsProxy.downloadFile(storage.mongoDb, extractedTextFileName).pipe(res)\n                    })\n            })\n            .catch(next)\n    })\n\n    /**     \n        * @api {post} api/files/uiupload/:filename Upload File  \n        * @apiGroup Files      \n        * @apiDescription New source named `uiupload` with description `Automatically created on UI upload` will be created if source didn't exist.\n        *          \n        * @apiHeader {String} ambar-email User email\n        * @apiHeader {String} ambar-email-token User token\n        * \n        * @apiExample {curl} Upload File test.txt\n        * curl -X POST \\\n        * http://ambar_api_address/api/files/uiupload/test.txt \\\n        * -H 'content-type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW' \\  \n        * -F file=@test.txt\n        * \n        * @apiSuccessExample {json} HTTP/1.1 200 OK     \n        * { \"fileId\": xxxxx }\n        * \n        * @apiErrorExample {json} HTTP/1.1 400 Bad Request\n        * Wrong request data\n        * \n        * @apiErrorExample {json} HTTP/1.1 404 Not Found\n        * File meta or content not found\n        */\n    api.post('/uiupload/:fileName', AuthService.ensureAuthenticated(storage), FileUploader, (req, res, next) => {\n        let { params: { fileName: fileName }, files } = req\n\n        const sourceId = 'ui-upload'\n        const fileContent = (Buffer.isBuffer(files[0].buffer) && Buffer.byteLength(files[0].buffer) > 0) ? files[0].buffer : new Buffer(0)\n        const size = Buffer.byteLength(fileContent)\n\n        if (size == 0) {\n            res.status(400).json(new ErrorResponse('File is empty!'))\n            return\n        }\n\n        const sha = CryptoService.getSha256(fileContent)\n        const meta = MetaBuilder.buildShortMeta(fileName, sourceId)\n\n        const email = AuthService.extractEmailFromHeaders(req)\n        const indexName = AuthService.getUserIndex(email)\n\n        Promise.all([\n            CacheProxy.getEsIndexContentSize(storage.redis, storage.elasticSearch, indexName),\n            CacheProxy.getEsIndexContentMaxSize(storage.redis, storage.mongoDb, indexName)\n        ])\n            .then(([indexSize, indexMaxSize]) => {\n                if (((indexSize + size) > indexMaxSize) && indexMaxSize != -1) {\n                    res.sendStatus(507)\n                    return\n                }\n\n                CacheProxy.setEsIndexContentSize(storage.redis, indexName, indexSize + size)\n\n                return MongoProxy.getBucketById(storage.mongoDb, indexName, sourceId)\n                    .then(bucket => {\n                        if (!bucket) {\n                            return MongoProxy.createBucket(storage.mongoDb, { id: sourceId, index_name: indexName, description: 'Automatically created on UI upload' })\n                        }\n                        return true\n                    })\n                    .then(() => GridFsProxy.checkIfFileExist(storage.mongoDb, sha))\n                    .then(found => {\n                        if (!found) {\n                            return GridFsProxy.uploadFile(storage.mongoDb, sha, fileContent)\n                        }\n                    })\n                    .then(() => QueueProxy.enqueuePipelineMessage(storage, { sha: sha, indexName: indexName, fileId: generateFileId(meta.source_id, meta.full_name), crawlerUid: 'Default', meta: meta }))\n                    .then(() => {\n                        CacheProxy.addMetaId(storage.redis, indexName, meta.id)\n                        res.status(200).json({ fileId: generateFileId(meta.source_id, meta.full_name) })\n                    })\n            })\n            .catch(next)\n    })\n\n    /**     \n        * @api {put} api/files/hide/:fileId Hide File  \n        * @apiGroup Files      \n        * @apiDescription Hide file by file id\n        *  \n        * @apiHeader {String} ambar-email User email\n        * @apiHeader {String} ambar-email-token User token\n        * \n        * @apiSuccessExample {json} HTTP/1.1 200 OK     \n        * HTTP/1.1 200 OK\n        * \n        * @apiErrorExample {json} HTTP/1.1 404 NotFound\n        * File not found\n        */\n    api.put('/hide/:fileId', AuthService.ensureAuthenticated(storage), (req, res, next) => {\n        const fileId = req.params.fileId\n\n        const email = AuthService.extractEmailFromHeaders(req)\n        const indexName = AuthService.getUserIndex(email)\n\n        EsProxy.checkIfFileExists(storage.elasticSearch, indexName, fileId)\n            .then(fileExists => {\n                if (!fileExists) {\n                    res.sendStatus(404)\n                    return\n                }\n\n                return EsProxy.hideFile(storage.elasticSearch, indexName, fileId)\n                    .then(() => res.sendStatus(200))\n            })\n            .catch(next)\n\n    })\n\n    /**     \n        * @api {put} api/files/unhide/:fileId Unhide File  \n        * @apiGroup Files      \n        * @apiDescription Unhide file by file id\n        *  \n        * @apiHeader {String} ambar-email User email\n        * @apiHeader {String} ambar-email-token User token\n        * \n        * @apiSuccessExample {json} HTTP/1.1 200 OK     \n        * HTTP/1.1 200 OK\n        * \n        * @apiErrorExample {json} HTTP/1.1 404 NotFound\n        * File not found\n        */\n    api.put('/unhide/:fileId', AuthService.ensureAuthenticated(storage), (req, res, next) => {\n        const fileId = req.params.fileId\n\n        const email = AuthService.extractEmailFromHeaders(req)\n        const indexName = AuthService.getUserIndex(email)\n\n        EsProxy.checkIfFileExists(storage.elasticSearch, indexName, fileId)\n            .then(fileExists => {\n                if (!fileExists) {\n                    res.sendStatus(404)\n                    return\n                }\n\n                return EsProxy.unHideFile(storage.elasticSearch, indexName, fileId)\n                    .then(() => res.sendStatus(200))\n                    .catch(err => {\n                        if ((err.statusCode) && (err.statusCode == 404)) {\n                            res.sendStatus(200)\n                            return\n                        }\n\n                        throw new Error(err)\n                    })\n            })\n            .catch(next)\n    })\n\n    return api\n}"]}