{"version":3,"sources":["../../src/api/thumbs.js"],"names":["config","storage","api","post","ensureAuthenticated","req","res","next","thumbId","params","id","files","status","json","fileContent","Buffer","byteLength","buffer","createThumbnail","mongoDb","then","sendStatus","catch","get","getThumbnailById","thumb","header","encodeURIComponent","send","data"],"mappings":"2EAAA;AACA,uD;AACA,uC;;AAEe,gBAAuB,KAArBA,MAAqB,QAArBA,MAAqB,CAAbC,OAAa,QAAbA,OAAa;AAClC,QAAIC,MAAM,sBAAV;;AAEC;;;;;;;;;;AAUDA,QAAIC,IAAJ,CAAS,MAAT,EAAiB,sBAAYC,mBAAZ,CAAgCH,OAAhC,CAAjB,0BAAyE,UAACI,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACrEC,eADqE,GAClDH,GADkD,CAClFI,MADkF,CACzEC,EADyE,CAC3DC,KAD2D,GAClDN,GADkD,CAC3DM,KAD2D;;AAGzF,YAAI,CAACA,KAAL,EAAY;AACRL,gBAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,4BAAkB,uBAAlB,CAArB;AACA;AACH;;AAED,YAAMC,cAAcC,OAAOC,UAAP,CAAkBL,MAAM,CAAN,EAASM,MAA3B,IAAqC,CAArC,GAAyCN,MAAM,CAAN,EAASM,MAAlD,GAA2D,IAAIF,MAAJ,CAAW,CAAX,CAA/E;;AAEA,6BAAWG,eAAX,CAA2BjB,QAAQkB,OAAnC,EAA4CX,OAA5C,EAAqDM,WAArD;AACKM,YADL,CACU,kBAAU;AACZd,gBAAIe,UAAJ,CAAe,GAAf;AACH,SAHL;AAIKC,aAJL,CAIWf,IAJX;AAKH,KAfD;;AAiBA;;;;;;;;;;;AAWAL,QAAIqB,GAAJ,CAAQ,MAAR,EAAgB,UAAClB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACZC,eADY,GACAH,GADA,CACzBI,MADyB,CAChBC,EADgB;;AAGhC,6BAAWc,gBAAX,CAA4BvB,QAAQkB,OAApC,EAA6CX,OAA7C;AACKY,YADL,CACU,UAACK,KAAD,EAAW;AACb,gBAAI,CAACA,KAAL,EAAY;AACRnB,oBAAIe,UAAJ,CAAe,GAAf;AACA;AACH;;AAEDf,gBAAIM,MAAJ,CAAW,GAAX;AACKc,kBADL,CACY;AACJ,gCAAgB,YADZ;AAEJ,2EAAuDC,mBAAmBnB,OAAnB,CAAvD,UAFI,EADZ;;AAKKoB,gBALL,CAKUH,MAAMI,IAAN,CAAWZ,MALrB;AAMH,SAbL;AAcKK,aAdL,CAcWf,IAdX;AAeH,KAlBD;;AAoBA,WAAOL,GAAP;AACH,C","file":"thumbs.js","sourcesContent":["import { Router } from 'express'\nimport ErrorResponse from '../utils/ErrorResponse'\nimport { MongoProxy, FileUploader, AuthService } from '../services'\n\nexport default ({config, storage}) => {\n    let api = Router()\n   \n     /**     \n     * @api {post} api/thumbs/:id Add or Update Thumbnail     \n     * @apiGroup Thumbnails                \n     *  \n     * @apiSuccessExample HTTP/1.1 200 OK     \n     * HTTP/1.1 200 OK\n     * \n     * @apiErrorExample {json} HTTP/1.1 400 Bad Request\n     * Request body is empty\n     */\n    api.post('/:id', AuthService.ensureAuthenticated(storage), FileUploader, (req, res, next) => {\n        const {params: {id: thumbId}, files} = req\n\n        if (!files) {\n            res.status(400).json(new ErrorResponse('Request body is empty'))\n            return\n        }\n\n        const fileContent = Buffer.byteLength(files[0].buffer) > 0 ? files[0].buffer : new Buffer(0)\n\n        MongoProxy.createThumbnail(storage.mongoDb, thumbId, fileContent)\n            .then(result => {\n                res.sendStatus(200)\n            })\n            .catch(next)\n    })\n\n    /**     \n     * @api {get} api/thumbs/:id Get Thumbnail by Id   \n     * @apiGroup Thumbnails                \n     *  \n     * @apiSuccessExample HTTP/1.1 200 OK     \n     * Octet-Stream\n     * \n     * @apiErrorExample {json} HTTP/1.1 404 NotFound\n     * HTTP/1.1 404 NotFound\n     */\n    \n    api.get('/:id', (req, res, next) => {\n        const {params: {id: thumbId}} = req\n\n        MongoProxy.getThumbnailById(storage.mongoDb, thumbId)\n            .then((thumb) => {\n                if (!thumb) {\n                    res.sendStatus(404)\n                    return\n                }\n\n                res.status(200)\n                    .header({\n                        'Content-Type': 'image/jpeg',\n                        'Content-Disposition': `attachment; filename*=UTF-8''${encodeURIComponent(thumbId)}.jpeg`\n                    })\n                    .send(thumb.data.buffer)\n            })\n            .catch(next)\n    })\n\n    return api\n}"]}