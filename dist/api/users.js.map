{"version":3,"sources":["../../src/api/users.js"],"names":["isStrongPassword","password","re","test","isValidEmail","email","config","storage","api","post","req","res","next","body","status","json","normalizedEmail","toLowerCase","trim","getUserByEmail","mongoDb","then","user","state","getPasswordHash","password_salt","passwordHash","password_hash","generateUserToken","emailToken","ttl","token","catch","ensureAuthenticated","extractTokenFromHeaders","removeToken","redis","sendStatus","err","CECheckUserCreateAllowed","userCount","name","langAnalyzer","userPlan","mode","defaultAccountPlan","userLangAnalyzer","defaultAccountLangAnalyzer","getUsersCount","defaultAccountEmail","usersCount","checkUserCreateAllowed","ENTERPEDITCheckUserCreateAllowed","generateNewUser","generatedUser","createUpdateUser","sendSetPasswordEmail","set_password_key","set_password_key_expiration","setPasswordKey","parseDateTime","salt","generateRandom","updatedUser","indexName","getUserIndex","createUserIndex","elasticSearch","lang_analyzer","generateSetPasswordFields","get","extractEmailFromHeaders","routes","getAllowedUiRoutes","newPassword","newSalt","newPasswordHash","getEsIndexContentSize","result","created","plan","storage_max","storage_used","userBytes","isDefaultUser","delete","userIndexName","index_name","deleteUserIndex","deleteUser","removeCrawlerSettingsByIndexName","removeEsIndexContentSize","removeEsIndexContentMaxSize"],"mappings":"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","file":"users.js","sourcesContent":["import { Router } from 'express'\nimport ErrorResponse from '../utils/ErrorResponse'\nimport { DateTimeService, MongoProxy, CryptoService, AuthService, CacheProxy, EsProxy, MandrillProxy } from '../services'\nimport moment from 'moment'\n\nconst isStrongPassword = (password) => {\n    const re = /^(?=(.*[A-Z])+)(?=(.*[0-9])+)(?=(.*[a-z])+).{8,}$/\n    return re.test(password)\n}\nconst isValidEmail = (email) => {\n    const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n    return re.test(email)\n}\n\nexport default ({ config, storage }) => {\n    let api = Router()\n\n    /**     \n      * @api {post} api/users/login Login  \n      * @apiGroup Users                \n      * \n      * @apiParam {String} email     User Email\n      * @apiParam {String} password     User Password\n      * \n      * @apiSuccessExample HTTP/1.1 200 OK     \n {  \n    \"token\": \"504d44935c2ccefb557fd49636a73239147b3895db2f2f...\",\n    \"ttl\": \"604800\"\n }   \n      * \n      * * @apiErrorExample {json} HTTP/1.1 400 BadRequest\n      * Bad request\n      * \n      * * @apiErrorExample {json} HTTP/1.1 404 NotFound\n      * User with specified email not found\n      * \n      * * @apiErrorExample {json} HTTP/1.1 409 Conflict\n      * User is not in active state\n      * \n      * * @apiErrorExample {json} HTTP/1.1 401 Unauthorized\n      * Wrong password\n      */\n    api.post('/login', (req, res, next) => {\n        const { body: { email, password } } = req\n\n        if (!email || !password) {\n            res.status(400).json(new ErrorResponse('Bad request'))\n            return\n        }\n\n        const normalizedEmail = email.toLowerCase().trim()\n\n        MongoProxy.getUserByEmail(storage.mongoDb, normalizedEmail)\n            .then((user) => {\n                if (!user) {\n                    res.status(404).json(new ErrorResponse('User with specified email not found'))\n                    return\n                }\n\n                if (user.state != 'active') {\n                    res.status(409).json(new ErrorResponse('User is not in active state'))\n                    return\n                }\n\n                return CryptoService.getPasswordHash(password, user.password_salt)\n                    .then((passwordHash) => {\n                        if (passwordHash != user.password_hash) {\n                            res.status(401).json(new ErrorResponse('Wrong password'))\n                            return\n                        }\n\n                        const { emailToken, ttl } = AuthService.generateUserToken(storage, normalizedEmail)\n\n                        res.status(200).json({ token: emailToken, ttl: ttl })\n                        return\n                    })\n            })\n            .catch(next)\n    })\n\n    /**     \n     * @api {post} api/users/logout Logout  \n     * @apiGroup Users                \n     * \n     * @apiHeader {String} ambar-email User email\n     * @apiHeader {String} ambar-email-token User token     \n     * \n     * @apiErrorExample {json} HTTP/1.1 401 Unauthorized\n     * Unauthorized\n     */\n    api.post('/logout', AuthService.ensureAuthenticated(storage), (req, res, next) => {\n        const token = AuthService.extractTokenFromHeaders(req)\n\n        try {\n            CacheProxy.removeToken(storage.redis, token)\n            res.sendStatus(200)\n        }\n        catch (err) {\n            next(err)\n        }\n    })\n\n    const ENTERPEDITCheckUserCreateAllowed = (userCount) => config.mode != 'ce' ? true : (userCount > 0 ? false : true)\n    const CECheckUserCreateAllowed = (userCount) => userCount > 0 ? false : true\n\n    /**\n      * Create User\n      */\n    api.post('/', (req, res, next) => {\n        const { body: { name, email, langAnalyzer } } = req\n\n        if (!name || !email || !isValidEmail(email) || !langAnalyzer) {\n            res.status(400).json(new ErrorResponse('Bad request'))\n        }\n\n        const normalizedEmail = email.toLowerCase().trim()\n\n        const userPlan = config.mode === 'cloud' ? 'free' : config.defaultAccountPlan\n        const userLangAnalyzer = config.mode === 'cloud' ? langAnalyzer : config.defaultAccountLangAnalyzer\n\n        MongoProxy.getUsersCount(storage.mongoDb, config.defaultAccountEmail)\n            .then((usersCount) => {\n                const checkUserCreateAllowed = (typeof ENTERPEDITCheckUserCreateAllowed !== 'undefined') ? ENTERPEDITCheckUserCreateAllowed : CECheckUserCreateAllowed\n\n                if (!checkUserCreateAllowed(usersCount)) {\n                    res.status(409).json(new ErrorResponse('Only one user account allowed for Ambar CE'))\n                    return\n                }\n\n                return MongoProxy.getUserByEmail(storage.mongoDb, normalizedEmail)\n                    .then((user) => {\n                        if (user && user.state === 'active') {\n                            res.status(409).json(new ErrorResponse('User with provided email already exists'))\n                            return\n                        }\n\n                        return AuthService.generateNewUser(name, normalizedEmail, userLangAnalyzer, userPlan)\n                            .then((generatedUser) => {\n                                return MongoProxy.createUpdateUser(storage.mongoDb, generatedUser)\n                                    .then(() => {\n                                        return MandrillProxy.sendSetPasswordEmail(\n                                            normalizedEmail,\n                                            generatedUser.set_password_key,\n                                            generatedUser.set_password_key_expiration,\n                                            name)\n                                    })\n                                    .then(() => {\n                                        res.sendStatus(200)\n                                    })\n                            })\n                    })\n            })\n            .catch(next)\n    })\n\n    /**\n      * Set Password\n      */\n    api.post('/password/set', (req, res, next) => {\n        const { body: { email, password, setPasswordKey } } = req\n\n        if (!email || !password || !setPasswordKey || !isStrongPassword(password)) {\n            res.status(400).json(new ErrorResponse('Bad request'))\n        }\n\n        const normalizedEmail = email.toLowerCase().trim()\n\n        MongoProxy.getUserByEmail(storage.mongoDb, normalizedEmail)\n            .then((user) => {\n                if (!user) {\n                    res.status(404).json(new ErrorResponse('User with specified email not found'))\n                    return\n                }\n\n                if (!user.set_password_key || user.set_password_key != setPasswordKey) {\n                    res.status(401).json(new ErrorResponse('Wrong link'))\n                    return\n                }\n\n                if (DateTimeService.parseDateTime(user.set_password_key_expiration) < moment()) {\n                    res.status(408).json(new ErrorResponse('The link has expired'))\n                    return\n                }\n\n                const salt = CryptoService.generateRandom()\n\n                return CryptoService.getPasswordHash(password, salt)\n                    .then((passwordHash) => {\n                        const updatedUser = {\n                            ...user,\n                            password_hash: passwordHash,\n                            password_salt: salt,\n                            state: 'active',\n                            set_password_key_expiration: null,\n                            set_password_key: null\n                        }\n\n                        return MongoProxy.createUpdateUser(storage.mongoDb, updatedUser)\n                    })\n                    .then(() => {\n                        if ((user.state === 'new') && (config.mode === 'cloud')) {\n                            const indexName = AuthService.getUserIndex(user.email)\n                            return EsProxy.createUserIndex(storage.elasticSearch, indexName, user.lang_analyzer)\n                        }\n                    })\n                    .then(() => {\n                        const { emailToken, ttl } = AuthService.generateUserToken(storage, user.email)\n\n                        res.status(200).json({ token: emailToken, ttl: ttl })\n                    })\n            })\n            .catch(next)\n    })\n\n    /**\n     * Set Password is allowed\n     */\n    api.post('/password/set/allowed', (req, res, next) => {\n        const { body: { email, setPasswordKey } } = req\n\n        if (!email || !setPasswordKey) {\n            res.status(400).json(new ErrorResponse('Bad request'))\n        }\n\n        const normalizedEmail = email.toLowerCase().trim()\n\n        MongoProxy.getUserByEmail(storage.mongoDb, normalizedEmail)\n            .then((user) => {\n                if (!user) {\n                    res.status(404).json(new ErrorResponse('User with specified email not found'))\n                    return\n                }\n\n                if (!user.set_password_key || user.set_password_key != setPasswordKey) {\n                    res.status(401).json(new ErrorResponse('Wrong link'))\n                    return\n                }\n\n                if (DateTimeService.parseDateTime(user.set_password_key_expiration) < moment()) {\n                    res.status(408).json(new ErrorResponse('The link has expired'))\n                    return\n                }\n\n                res.sendStatus(200)\n            })\n            .catch(next)\n    })\n\n    /**\n     * Reset Password\n     */\n    api.post('/password/reset', (req, res, next) => {\n        const { body: { email } } = req\n\n        if (!email) {\n            res.status(400).json(new ErrorResponse('Bad request'))\n        }\n\n        const normalizedEmail = email.toLowerCase().trim()\n\n        MongoProxy.getUserByEmail(storage.mongoDb, normalizedEmail)\n            .then((user) => {\n                if (!user) {\n                    res.status(404).json(new ErrorResponse('User with specified email not found'))\n                    return\n                }\n\n                const updatedUser = { ...user, ...AuthService.generateSetPasswordFields() }\n\n                return MongoProxy.createUpdateUser(storage.mongoDb, updatedUser)\n                    .then(() => {\n                        return MandrillProxy.sendSetPasswordEmail(\n                            normalizedEmail,\n                            updatedUser.set_password_key,\n                            updatedUser.set_password_key_expiration,\n                            user.name)\n                    })\n                    .then(() => {\n                        res.sendStatus(200)\n                    })\n            })\n            .catch(next)\n    })\n\n    /**\n     * Check auth\n     */\n    api.get('/check', AuthService.ensureAuthenticated(storage), (req, res, next) => {\n        const email = AuthService.extractEmailFromHeaders(req)\n        const indexName = AuthService.getUserIndex(email)\n        res.status(200).json({ routes: AuthService.getAllowedUiRoutes(config, req) })\n    })\n\n    /**\n      * Change Password\n      */\n    api.post('/password/change', AuthService.ensureAuthenticated(storage), (req, res, next) => {\n        const { body: { password, newPassword } } = req\n\n        if (!password || !newPassword || !isStrongPassword(newPassword)) {\n            res.status(400).json(new ErrorResponse('Bad request'))\n            return\n        }\n\n        const email = AuthService.extractEmailFromHeaders(req)\n\n        MongoProxy.getUserByEmail(storage.mongoDb, email)\n            .then((user) => {\n                if (!user) {\n                    res.status(404).json(new ErrorResponse('User with specified email not found'))\n                    return\n                }\n\n                if (user.state != 'active') {\n                    res.status(409).json(new ErrorResponse('User is not in active state'))\n                    return\n                }\n\n                return CryptoService.getPasswordHash(password, user.password_salt)\n                    .then((passwordHash) => {\n                        if (passwordHash != user.password_hash) {\n                            res.status(401).json(new ErrorResponse('Wrong current password'))\n                            return\n                        }\n\n                        const newSalt = CryptoService.generateRandom()\n\n                        return CryptoService.getPasswordHash(newPassword, newSalt)\n                            .then((newPasswordHash) => {\n                                const updatedUser = { ...user, password_hash: newPasswordHash, password_salt: newSalt }\n                                return MongoProxy.createUpdateUser(storage.mongoDb, updatedUser)\n                            })\n                            .then(() => {\n                                res.sendStatus(200)\n                            })\n                    })\n            })\n            .catch(next)\n    })\n\n    /**\n     * Get user info by email\n     */\n    api.get('/', AuthService.ensureAuthenticated(storage), (req, res, next) => {\n        const email = AuthService.extractEmailFromHeaders(req)\n\n        MongoProxy.getUserByEmail(storage.mongoDb, email)\n            .then((user) => {\n                if (!user) {\n                    res.status(404).json(new ErrorResponse('User with specified email not found'))\n                    return\n                }\n\n                const indexName = AuthService.getUserIndex(email)\n\n                CacheProxy.getEsIndexContentSize(storage.redis, storage.elasticSearch, indexName)\n                    .then(userBytes => {\n\n                        const result = {\n                            name: user.name,\n                            email: user.email,\n                            state: user.state,\n                            created: user.created,\n                            lang_analyzer: user.lang_analyzer,\n                            plan: user.plan,\n                            storage_max: user.storage_max,\n                            storage_used: userBytes,\n                            isDefaultUser: user.email === config.defaultAccountEmail\n                        }\n\n                        res.status(200).json(result)\n                    })\n            })\n            .catch(next)\n    })\n\n    /**\n     * Delete user\n     */\n    api.delete('/', AuthService.ensureAuthenticated(storage), (req, res, next) => {\n        const email = AuthService.extractEmailFromHeaders(req)\n        const indexName = AuthService.getUserIndex(email.toLowerCase().trim())\n        const token = AuthService.extractTokenFromHeaders(req)\n\n        MongoProxy.getUserByEmail(storage.mongoDb, email)\n            .then((user) => {\n                if (!user) {\n                    res.status(404).json(new ErrorResponse('User with specified email not found'))\n                    return\n                }\n\n                const userIndexName = user.index_name\n\n                if (userIndexName != indexName) {\n                    res.status(500).json(new ErrorResponse('User indexes from token and internal storage did not match!'))\n                    return\n                }\n\n                if (config.mode === 'cloud') {\n                    return EsProxy.deleteUserIndex(storage.elasticSearch, indexName)\n                        .then(() => MongoProxy.deleteUser(storage.mongoDb, user))\n                        .then(() => MongoProxy.removeCrawlerSettingsByIndexName(storage.mongoDb, indexName))\n                        .then(() => {\n                            CacheProxy.removeToken(storage.redis, token)\n                            CacheProxy.removeEsIndexContentSize(storage.redis, indexName)\n                            CacheProxy.removeEsIndexContentMaxSize(storage.redis, indexName)\n                            res.sendStatus(200)\n                        })\n                }\n                else {\n                    return MongoProxy.deleteUser(storage.mongoDb, user)\n                        .then(() => {\n                            CacheProxy.removeToken(storage.redis, token)\n                            res.sendStatus(200)\n                        })\n                }\n            })\n            .catch(next)\n    })\n\n    return api\n}"]}