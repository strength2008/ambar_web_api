{"version":3,"sources":["../../src/api/logs.js"],"names":["DEFAULT_RECORDS_COUNT","MAX_RECORDS_COUNT","config","storage","api","use","ensureAuthenticated","post","req","res","logItem","body","status","json","sendStatus","indexLogItem","elasticSearch","get","next","query","recordsCount","sourceId","getLastLogRecords","then","response","catch"],"mappings":"2EAAA;AACA,uD;AACA,uC;;AAEA,IAAMA,wBAAwB,EAA9B;AACA,IAAMC,oBAAoB,GAA1B,C;;;AAGe,gBAAuB,KAArBC,MAAqB,QAArBA,MAAqB,CAAbC,OAAa,QAAbA,OAAa;AAClC,QAAIC,MAAM,sBAAV;;AAEAA,QAAIC,GAAJ,CAAQ,sBAAYC,mBAAZ,CAAgCH,OAAhC,CAAR;;AAEA;;;AAGAC,QAAIG,IAAJ,CAAS,GAAT,EAAc,UAACC,GAAD,EAAMC,GAAN,EAAc;AACXC,eADW,GACAF,GADA,CACjBG,IADiB;;AAGxB,YAAI,CAACD,OAAL,EAAc;AACVD,gBAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,4BAAkB,aAAlB,CAArB;AACA;AACH;;AAEDJ,YAAIK,UAAJ,CAAe,GAAf,EARwB,CAQJ;AACpB,0BAAQC,YAAR,CAAqBZ,QAAQa,aAA7B,EAA4CN,OAA5C;AACH,KAVD;;AAYA;;;AAGAN,QAAIa,GAAJ,CAAQ,GAAR,EAAa,UAACT,GAAD,EAAMC,GAAN,EAAWS,IAAX,EAAoB;AACuCV,WADvC,CACrBW,KADqB,oCACbC,YADa,CACbA,YADa,yCACEpB,qBADF,yBACyBqB,QADzB,cACyBA,QADzB;;AAG7B,YAAID,eAAenB,iBAAf,IAAoCmB,gBAAgB,CAAxD,EAA2D;AACvDX,gBAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,sFAA0EZ,iBAA1E,CAArB;AACA;AACH;;AAED,YAAI,CAACoB,QAAL,EAAe;AACXZ,gBAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,4BAAkB,sBAAlB,CAArB;AACA;AACH;;AAED,0BAAQS,iBAAR,CAA0BnB,QAAQa,aAAlC,EAAiDK,QAAjD,EAA2DD,YAA3D;AACKG,YADL,CACU,4BAAYd,IAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBW,QAArB,CAAZ,EADV;AAEKC,aAFL,CAEWP,IAFX;AAGH,KAhBD;;AAkBA,WAAOd,GAAP;AACH,C","file":"logs.js","sourcesContent":["import { Router } from 'express'\nimport ErrorResponse from '../utils/ErrorResponse'\nimport { EsProxy, AuthService } from '../services'\n\nconst DEFAULT_RECORDS_COUNT = 10\nconst MAX_RECORDS_COUNT = 100\n\n\nexport default ({config, storage}) => {\n    let api = Router()\n\n    api.use(AuthService.ensureAuthenticated(storage))\n    \n    /**\n     * Submit log record\n     */\n    api.post('/', (req, res) => {\n        const {body: logItem} = req\n\n        if (!logItem) {\n            res.status(400).json(new ErrorResponse('Bad request'))\n            return\n        }\n\n        res.sendStatus(200) //Immediately send response\n        EsProxy.indexLogItem(storage.elasticSearch, logItem)            \n    })\n\n    /**\n     * Get log records\n     */\n    api.get('/', (req, res, next) => {\n        const { query: {recordsCount = DEFAULT_RECORDS_COUNT, sourceId} } = req\n\n        if (recordsCount > MAX_RECORDS_COUNT && recordsCount <= 0) {\n            res.status(400).json(new ErrorResponse(`RecordsCount should be greater than 0 and lower than ${MAX_RECORDS_COUNT}`))\n            return\n        }        \n\n        if (!sourceId) {\n            res.status(400).json(new ErrorResponse('sourceId is required'))\n            return\n        }\n\n        EsProxy.getLastLogRecords(storage.elasticSearch, sourceId, recordsCount)\n            .then(response => res.status(200).json(response))\n            .catch(next)\n    })\n\n    return api\n}\n"]}