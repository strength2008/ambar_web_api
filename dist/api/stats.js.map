{"version":3,"sources":["../../src/api/stats.js"],"names":["MIN_THRESHOLD_CONTENT_TYPE","DAYS_SPAN","config","storage","api","use","ensureAuthenticated","buildProcRateStats","esResponse","procRate","data","names","Set","dates","proc_rate","buckets","forEach","dateBucket","source","nameBucket","add","key","Array","from","dateSpan","push","startOf","date","dateItem","format","name","esDateBucket","find","bucket","isSame","esNameBucket","doc_count","buildContentTypeStats","contentTypeTotal","content_type","reduce","sum","contentType","total","minThreshold","map","value","sizeDataInBytes","size","buildProcTotalStats","procTotalStats","totalCount","proc_total","count","avg","min","max","esStatsToView","res","procTotal","get","req","next","email","extractEmailFromHeaders","getStats","elasticSearch","getUserIndex","then","status","json","response","aggregations","catch"],"mappings":"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","file":"stats.js","sourcesContent":["import { Router } from 'express'\nimport moment from 'moment'\nimport ErrorResponse from '../utils/ErrorResponse'\nimport { EsProxy, AuthService, CryptoService } from '../services'\n\nconst MIN_THRESHOLD_CONTENT_TYPE = 0.05\nconst DAYS_SPAN = 30\n\nexport default ({ config, storage }) => {\n    let api = Router()\n\n    api.use(AuthService.ensureAuthenticated(storage))\n\n    const buildProcRateStats = (esResponse) => {\n        const procRate = {\n            data: [],\n            names: []\n        }\n\n        const names = new Set()\n        const dates = []\n\n        esResponse.proc_rate.buckets.forEach((dateBucket) => {\n            dateBucket.source.buckets.forEach((nameBucket) => {\n                names.add(nameBucket.key)\n            })\n        })\n\n        procRate.names = Array.from(names)\n\n        let dateSpan = DAYS_SPAN - 1\n        while (dateSpan >= 0) {\n            dates.push(moment().startOf('day').add(-dateSpan, 'days'))\n            dateSpan--\n        }\n\n        dates.forEach((date) => {\n            const dateItem = {\n                date: date.format('YYYY-MM-DD')\n            }\n            names.forEach((name) => {\n                dateItem[name] = 0\n                const esDateBucket = esResponse.proc_rate.buckets.find((bucket) => (moment(bucket.key).startOf('day').isSame(date)))\n                if (esDateBucket) {\n                    const esNameBucket = esDateBucket.source.buckets.find((bucket) => (bucket.key == name))\n                    if (esNameBucket) {\n                        dateItem[name] = esNameBucket.doc_count\n                    }\n                }\n            })\n            procRate.data.push(dateItem)\n        })\n\n        return procRate\n    }\n\n    const buildContentTypeStats = (esResponse) => {\n        const contentTypeTotal = esResponse.content_type.buckets.reduce((sum, bucket) => {\n            return sum + bucket.doc_count\n        }, 0)\n\n        const contentType = {\n            total: contentTypeTotal,\n            minThreshold: MIN_THRESHOLD_CONTENT_TYPE * contentTypeTotal,\n            data: esResponse.content_type.buckets.map((bucket) => ({ name: bucket.key, value: bucket.doc_count, sizeDataInBytes: bucket.size }))\n        }\n\n        return contentType\n    }\n\n    const buildProcTotalStats = (esResponse) => {\n        const procTotalStats = {\n            totalCount: esResponse.proc_total.count,\n            sizeDataInBytes: {\n                sum: esResponse.proc_total.sum,\n                avg: esResponse.proc_total.avg,\n                min: esResponse.proc_total.min,\n                max: esResponse.proc_total.max\n            }\n        }\n\n        return procTotalStats\n    }\n\n    const esStatsToView = (esResponse) => {\n        const res = {\n            contentType: buildContentTypeStats(esResponse),\n            procRate: buildProcRateStats(esResponse),\n            procTotal: buildProcTotalStats(esResponse)\n        }\n\n        return (res)\n    }\n\n    /**     \n     * @api {get} api/stats Get Statistics     \n     * @apiGroup Statistics          \n     * \n     * @apiHeader {String} ambar-email User email\n     * @apiHeader {String} ambar-email-token User token\n     * \n     * @apiSuccessExample {json} HTTP/1.1 200 OK\n     *  {\n     *  \"contentType\": {\n     *    \"total\": 2,\n     *    \"minThreshold\": 0.1,\n     *    \"data\": [\n     *      {\n     *        \"name\": \"application/msword\",\n     *        \"value\": 1,\n     *        \"sizeDataInBytes\": {\n     *          \"count\": 1,\n     *          \"min\": 91681,\n     *          \"max\": 91681,\n     *          \"avg\": 91681,\n     *          \"sum\": 91681\n     *        }\n     *      }      \n     *    ]\n     *  },\n     *  \"procRate\": {\n     *    \"data\": [     \n     *      {\n     *        \"date\": \"2017-04-13\",\n     *        \"default\": 0\n     *      },\n     *      {\n     *        \"date\": \"2017-04-14\",\n     *        \"default\": 2\n     *      }\n     *    ],\n     *    \"names\": [\n     *      \"default\"\n     *    ]\n     *  },\n     *  \"procTotal\": {\n     *    \"totalCount\": 2,\n     *    \"sizeDataInBytes\": {\n     *      \"sum\": 147522,\n     *      \"avg\": 73761,\n     *      \"min\": 55841,\n     *      \"max\": 91681\n     *    }\n     *  }\n     *}\n     * \n     */\n    api.get('/', (req, res, next) => {\n        const email = AuthService.extractEmailFromHeaders(req)\n\n        EsProxy.getStats(storage.elasticSearch, AuthService.getUserIndex(email))\n            .then(response => res.status(200).json(esStatsToView(response.aggregations)))\n            .catch(next)\n    })\n\n    return api\n}\n"]}