{"version":3,"sources":["../../src/api/entities.js"],"names":["generateEntityId","indexName","fileId","entityName","entityPosition","getSha256","trim","toLowerCase","start","length","config","storage","api","post","ensureAuthenticatedAsService","req","res","next","params","entities","body","status","json","forEach","entity","position","type","name","indexOf","entityId","id","indexNamedEntities","elasticSearch","then","sendStatus","catch"],"mappings":"kUAAA;AACA,uD;AACA,uC;;;;;;;;AAQA,IAAMA,mBAAmB,SAAnBA,gBAAmB,CAACC,SAAD,EAAYC,MAAZ,EAAoBC,UAApB,EAAgCC,cAAhC,EAAmD;AACxE,WAAO,wBAAcC,SAAd,aAAkCJ,UAAUK,IAAV,GAAiBC,WAAjB,EAAlC,GAAmEL,OAAOI,IAAP,GAAcC,WAAd,EAAnE,GAAiGJ,WAAWG,IAAX,GAAkBC,WAAlB,EAAjG,GAAmIH,eAAeI,KAAlJ,GAA0JJ,eAAeK,MAAzK,CAAP;AACH,CAFD,C;;AAIe,gBAAyB,KAAtBC,MAAsB,QAAtBA,MAAsB,CAAdC,OAAc,QAAdA,OAAc;AACpC,QAAIC,MAAM,sBAAV;;AAEA;AACA;;;AAGAA,QAAIC,IAAJ,CAAS,mCAAT,EAA8C,sBAAYC,4BAAZ,CAAyCH,OAAzC,CAA9C,EAAiG,UAACI,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACnDF,WADmD,CACzGG,MADyG,CAC/FhB,MAD+F,eAC/FA,MAD+F,CACvFD,SADuF,eACvFA,SADuF,CAClEkB,QADkE,GACnDJ,GADmD,CAC1EK,IAD0E,CAClED,QADkE;;AAGjH,YAAI,CAACjB,MAAD,IAAW,CAACD,SAAZ,IAAyB,CAACkB,QAA9B,EAAwC;AACpCH,gBAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,4BAAkB,2BAAlB,CAArB;AACA;AACH;;AAED,YAAIH,SAASV,MAAT,KAAoB,CAAxB,EAA2B;AACvBO,gBAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,4BAAkB,gCAAlB,CAArB;AACA;AACH;;AAEDH,iBAASI,OAAT,CAAiB,kBAAU;AACUC,kBADV,CACfC,QADe,WACfA,QADe,CACLC,IADK,WACLA,IADK,CACCC,IADD,WACCA,IADD;;AAGvB,gBAAI,CAACF,QAAD,IAAa,CAACC,IAAd,IAAsB,CAACC,IAA3B,EAAiC;AAC7BX,oBAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,4BAAkB,2BAAlB,CAArB;AACA;AACH;;AAED,gBAAIK,KAAKC,OAAL,CAAa,GAAb,IAAoB,CAAxB,EAA2B;AACvBZ,oBAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,4BAAkB,kDAAlB,CAArB;AACA;AACH;;AAED,gBAAMO,WAAW7B,iBAAiBC,SAAjB,EAA4BC,MAA5B,EAAoCyB,IAApC,EAA0CF,QAA1C,CAAjB;;AAEAD;AACOA,kBADP,IACeM,IAAID,QADnB;AAEIJ,0BAAUA,QAFd;AAGIE,sBAAMA,KAAKpB,WAAL,EAHV;AAIImB,sBAAMA,KAAKnB,WAAL,EAJV;;AAMH,SArBD;;AAuBA,0BAAQwB,kBAAR,CAA2BpB,QAAQqB,aAAnC,EAAkD/B,SAAlD,EAA6DC,MAA7D,EAAqEiB,QAArE;AACKc,YADL,CACU,YAAM;AACRjB,gBAAIkB,UAAJ,CAAe,GAAf;AACH,SAHL;AAIKC,aAJL,CAIWlB,IAJX;AAKH,KAzCD;;AA2CA,WAAOL,GAAP;AACH,C","file":"entities.js","sourcesContent":["import { Router } from 'express'\nimport ErrorResponse from '../utils/ErrorResponse'\nimport {\n    CryptoService,\n    EsProxy,\n    MongoProxy,\n    DateTimeService,\n    AuthService\n} from '../services'\n\nconst generateEntityId = (indexName, fileId, entityName, entityPosition) => {\n    return CryptoService.getSha256(`entity_${indexName.trim().toLowerCase()}${fileId.trim().toLowerCase()}${entityName.trim().toLowerCase()}${entityPosition.start}${entityPosition.length}`)\n}\n\nexport default ({ config, storage }) => {\n    let api = Router()\n\n    //////////////// CALLED FROM PIPELINE OR EXTERNAL NER ////////////////////////////////////\n    /**\n    * Add named entity for specified file id\n    */\n    api.post('/service/:indexName/:fileId/index', AuthService.ensureAuthenticatedAsService(storage), (req, res, next) => {\n        const { params: { fileId, indexName }, body: { entities } } = req\n\n        if (!fileId || !indexName || !entities) {\n            res.status(400).json(new ErrorResponse('Required field is missing'))\n            return\n        }\n\n        if (entities.length === 0) {\n            res.status(400).json(new ErrorResponse('Please specify entities array!'))\n            return\n        }\n\n        entities.forEach(entity => {\n            const { position, type, name } = entity\n\n            if (!position || !type || !name) {\n                res.status(400).json(new ErrorResponse('Required field is missing'))\n                return\n            }\n\n            if (name.indexOf('\"') > 0) {\n                res.status(400).json(new ErrorResponse('Named entity name can not contain semicolon (\")!'))\n                return\n            }\n\n            const entityId = generateEntityId(indexName, fileId, name, position)\n\n            entity = {\n                ...entity, id: entityId,\n                position: position,\n                name: name.toLowerCase(),\n                type: type.toLowerCase()\n            }\n        })\n\n        EsProxy.indexNamedEntities(storage.elasticSearch, indexName, fileId, entities)\n            .then(() => {\n                res.sendStatus(200)\n            })\n            .catch(next)\n    })\n\n    return api\n}"]}