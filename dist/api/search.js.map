{"version":3,"sources":["../../src/api/search.js"],"names":["QueryParser","DEFAULT_PAGE","DEFAULT_SIZE","MAX_SIZE","hrTimeToMilliSeconds","hrTime","config","storage","api","use","ensureAuthenticated","get","req","res","next","query","queryStr","page","pageStr","size","sizeStr","parseInt","decodeURI","Number","isInteger","status","json","parsedQuery","parseEsStringQuery","startTime","process","hrtime","email","extractEmailFromHeaders","indexName","getUserIndex","searchFiles","elasticSearch","then","results","hits","map","hit","meta","encryptDownloadUri","file_id","took","catch","getFilesTreeByQuery","getFilesStatsByQuery","fileId","params","getFileHighlightByFileId","highlight","content","getFullFileHighlightByFileId"],"mappings":"kUAAA;AACA,uD;AACA,mD,IAAYA,W;AACZ;AACA,sC;;AAEA,IAAMC,eAAe,CAArB;AACA,IAAMC,eAAe,EAArB;AACA,IAAMC,WAAW,GAAjB;;AAEA,IAAMC,uBAAuB,SAAvBA,oBAAuB,CAACC,MAAD,UAAY,CAACA,OAAO,CAAP,IAAY,GAAZ,GAAkBA,OAAO,CAAP,CAAnB,IAAgC,GAA5C,EAA7B,C;;AAEe,gBAAyB,KAAtBC,MAAsB,QAAtBA,MAAsB,CAAdC,OAAc,QAAdA,OAAc;AACpC,QAAIC,MAAM,sBAAV;;AAEAA,QAAIC,GAAJ,CAAQ,sBAAYC,mBAAZ,CAAgCH,OAAhC,CAAR;;AAEA;;;;;;;;;;;;;;;;;;;AAmBAC,QAAIG,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACsEF,WADtE,CACrBG,KADqB,CACLC,QADK,cACZD,KADY,8BACKE,IADL,CACWC,OADX,mCACqBjB,YADrB,gDACmCkB,IADnC,CACyCC,OADzC,mCACmDlB,YADnD;AAE7B,YAAMe,OAAOI,SAASH,OAAT,CAAb;AACA,YAAMC,OAAOE,SAASD,OAAT,CAAb;AACA,YAAML,QAAQO,UAAUN,QAAV,CAAd;;AAEA,YAAI,CAACO,OAAOC,SAAP,CAAiBP,IAAjB,CAAD,IAA2BA,OAAO,CAAtC,EAAyC;AACrCJ,gBAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,4BAAkB,iBAAlB,CAArB;AACA;AACH;;AAED,YAAI,CAACH,OAAOC,SAAP,CAAiBL,IAAjB,CAAD,IAA2BA,OAAO,CAAlC,IAAuCA,OAAOhB,QAAlD,EAA4D;AACxDU,gBAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,4BAAkB,iBAAlB,CAArB;AACA;AACH;;AAED,YAAIC,cAAc3B,YAAY4B,kBAAZ,CAA+Bb,KAA/B,CAAlB;;AAEA,YAAMc,YAAYC,QAAQC,MAAR,EAAlB;AACA,YAAMC,QAAQ,sBAAYC,uBAAZ,CAAoCrB,GAApC,CAAd;AACA,YAAMsB,YAAY,sBAAYC,YAAZ,CAAyBH,KAAzB,CAAlB;;AAEA,0BAAQI,WAAR,CAAoB7B,QAAQ8B,aAA5B,EAA2CH,SAA3C,EAAsDP,WAAtD,EAAmEV,IAAnE,EAAyEE,IAAzE;AACKmB,YADL,CACU,UAACC,OAAD,UAAa1B,IAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB;AACZa,mBADY;AAEfC,sBAAMD,QAAQC,IAAR;AACDC,mBADC,CACG,UAACC,GAAD,EAAS;AACVA,wBAAIC,IAAJ,CAAS,cAAT,IAA2B,wBAAcC,kBAAd,CAAiCV,SAAjC,EAA4CQ,IAAIG,OAAhD,CAA3B;AACA,2BAAOH,GAAP;AACH,iBAJC,CAFS;AAOfI,sBAAM1C,qBAAqB0B,QAAQC,MAAR,CAAeF,SAAf,CAArB,CAPS,IAAb,EADV;;AAUKkB,aAVL,CAUWjC,IAVX;AAWH,KAjCD;;AAmCA;;;;;;;;;;;;;;;;AAgBAN,QAAIG,GAAJ,CAAQ,OAAR,EAAiB,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACTE,gBADS,GACMJ,GADN,CACzBG,KADyB,CAChBA,KADgB;AAEjC,YAAMA,QAAQO,UAAUN,QAAV,CAAd;;AAEA,YAAIW,cAAc3B,YAAY4B,kBAAZ,CAA+Bb,KAA/B,CAAlB;;AAEA,YAAMc,YAAYC,QAAQC,MAAR,EAAlB;AACA,YAAMC,QAAQ,sBAAYC,uBAAZ,CAAoCrB,GAApC,CAAd;AACA,YAAMsB,YAAY,sBAAYC,YAAZ,CAAyBH,KAAzB,CAAlB;;AAEA,0BAAQgB,mBAAR,CAA4BzC,QAAQ8B,aAApC,EAAmDH,SAAnD,EAA8DP,WAA9D;AACKW,YADL,CACU,UAACC,OAAD,UAAa1B,IAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB;AACZa,mBADY;AAEfO,sBAAM1C,qBAAqB0B,QAAQC,MAAR,CAAeF,SAAf,CAArB,CAFS,IAAb,EADV;;AAKKkB,aALL,CAKWjC,IALX;AAMH,KAhBD;;AAkBA;;;;;;;;;;;;;;;;AAgBAN,QAAIG,GAAJ,CAAQ,QAAR,EAAkB,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACVE,gBADU,GACKJ,GADL,CAC1BG,KAD0B,CACjBA,KADiB;AAElC,YAAMA,QAAQO,UAAUN,QAAV,CAAd;;AAEA,YAAIW,cAAc3B,YAAY4B,kBAAZ,CAA+Bb,KAA/B,CAAlB;;AAEA,YAAMc,YAAYC,QAAQC,MAAR,EAAlB;AACA,YAAMC,QAAQ,sBAAYC,uBAAZ,CAAoCrB,GAApC,CAAd;AACA,YAAMsB,YAAY,sBAAYC,YAAZ,CAAyBH,KAAzB,CAAlB;;AAEA,0BAAQiB,oBAAR,CAA6B1C,QAAQ8B,aAArC,EAAoDH,SAApD,EAA+DP,WAA/D;AACKW,YADL,CACU,UAACC,OAAD,UAAa1B,IAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB;AACZa,mBADY;AAEfO,sBAAM1C,qBAAqB0B,QAAQC,MAAR,CAAeF,SAAf,CAArB,CAFS,IAAb,EADV;;AAKKkB,aALL,CAKWjC,IALX;AAMH,KAhBD;;AAkBA;;;;;;;;;;;;;;;;;;;;AAoBAN,QAAIG,GAAJ,CAAQ,UAAR,EAAoB,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACVoC,cADU,GAC4BtC,GAD5B,CAC5BuC,MAD4B,CAClBD,MADkB,CACgBnC,KADhB,GAC4BH,GAD5B,CACAG,KADA,CACSA,KADT;;AAGpC,YAAI,CAACA,KAAD,IAAUA,UAAU,EAAxB,EAA4B;AACxBF,gBAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,4BAAkB,gBAAlB,CAArB;AACA;AACH;;AAED,YAAIC,cAAc3B,YAAY4B,kBAAZ,CAA+Bb,KAA/B,CAAlB;;AAEA,YAAMiB,QAAQ,sBAAYC,uBAAZ,CAAoCrB,GAApC,CAAd;AACA,YAAMsB,YAAY,sBAAYC,YAAZ,CAAyBH,KAAzB,CAAlB;;AAEA,0BAAQoB,wBAAR,CAAiC7C,QAAQ8B,aAAzC,EAAwDH,SAAxD,EAAmEP,WAAnE,EAAgFuB,MAAhF;AACKZ,YADL,CACU,UAACI,GAAD,EAAS;AACX,gBAAIW,YAAYX,IAAIY,OAAJ,IAAeZ,IAAIY,OAAJ,CAAYD,SAA3B,GAAuCX,IAAIY,OAAJ,CAAYD,SAAnD,GAA+D,IAA/E;AACA,gBAAI,CAACA,SAAL,EAAgB;AACZA,4BAAY,EAAE,QAAQ,CAAC,EAAD,CAAV,EAAZ;AACH;;AAEDxC,gBAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAE2B,WAAWA,SAAb,EAArB;;AAEA;AACH,SAVL;AAWKN,aAXL,CAWWjC,IAXX;AAYH,KAzBD;;AA2BA;;;;;;;;;;;;;;;;;;;;;AAqBAN,QAAIG,GAAJ,CAAQ,eAAR,EAAyB,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACfoC,cADe,GACuBtC,GADvB,CACjCuC,MADiC,CACvBD,MADuB,CACWnC,KADX,GACuBH,GADvB,CACLG,KADK,CACIA,KADJ;;AAGzC,YAAI,CAACA,KAAD,IAAUA,UAAU,EAAxB,EAA4B;AACxBF,gBAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,4BAAkB,gBAAlB,CAArB;AACA;AACH;;AAED,YAAIC,cAAc3B,YAAY4B,kBAAZ,CAA+Bb,KAA/B,CAAlB;;AAEA,YAAMiB,QAAQ,sBAAYC,uBAAZ,CAAoCrB,GAApC,CAAd;AACA,YAAMsB,YAAY,sBAAYC,YAAZ,CAAyBH,KAAzB,CAAlB;;AAEA,0BAAQuB,4BAAR,CAAqChD,QAAQ8B,aAA7C,EAA4DH,SAA5D,EAAuEP,WAAvE,EAAoFuB,MAApF;AACKZ,YADL,CACU,UAACI,GAAD,EAAS;AACX7B,gBAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBgB,GAArB;;AAEA;AACH,SALL;AAMKK,aANL,CAMWjC,IANX;AAOH,KApBD;;AAsBA,WAAON,GAAP;AACH,C","file":"search.js","sourcesContent":["import { Router } from 'express'\nimport ErrorResponse from '../utils/ErrorResponse'\nimport * as QueryParser from '../utils/QueryParser'\nimport { EsProxy, AuthService, CryptoService } from '../services'\nimport striptags from 'striptags'\n\nconst DEFAULT_PAGE = 0\nconst DEFAULT_SIZE = 10\nconst MAX_SIZE = 200\n\nconst hrTimeToMilliSeconds = (hrTime) => (hrTime[0] * 1e9 + hrTime[1]) / 1e6\n\nexport default ({ config, storage }) => {\n    let api = Router()\n\n    api.use(AuthService.ensureAuthenticated(storage))\n\n    /**\n     * @api {get} api/search Search For Documents By Query     \n     * @apiGroup Search\n     *      \n     * @apiParam {String} query URI_ENCODED query string. Check details of query syntax [here](https://blog.ambar.cloud/mastering-ambar-search-queries/).\n     * @apiParam {Number} [page=0] page to return \n     * @apiParam {Number} [size=10] number of results to return per page. Maximum is 100.\n     *\n     * @apiHeader {String} ambar-email User email.\n     * @apiHeader {String} ambar-email-token User token.\n     * \n     * @apiExample {curl} Search For `John`\n     *     curl -i http://ambar_api_address/api/search?query=John\n     * \n     * @apiSuccessExample {json} HTTP/1.1 200 OK\n     *\n     * @apiErrorExample {json} HTTP/1.1 400 BadRequest\n     * HTTP/1.1 400 BadRequest\n     */\n    api.get('/', (req, res, next) => {\n        const { query: { query: queryStr, page: pageStr = DEFAULT_PAGE, size: sizeStr = DEFAULT_SIZE } } = req\n        const page = parseInt(pageStr)\n        const size = parseInt(sizeStr)\n        const query = decodeURI(queryStr)\n\n        if (!Number.isInteger(page) || page < 0) {\n            res.status(400).json(new ErrorResponse('Page is invalid'))\n            return\n        }\n\n        if (!Number.isInteger(size) || size < 1 || size > MAX_SIZE) {\n            res.status(400).json(new ErrorResponse('Size is invalid'))\n            return\n        }\n\n        let parsedQuery = QueryParser.parseEsStringQuery(query)\n\n        const startTime = process.hrtime()\n        const email = AuthService.extractEmailFromHeaders(req)\n        const indexName = AuthService.getUserIndex(email)\n\n        EsProxy.searchFiles(storage.elasticSearch, indexName, parsedQuery, page, size)\n            .then((results) => res.status(200).json({\n                ...results,\n                hits: results.hits\n                    .map((hit) => {\n                        hit.meta['download_uri'] = CryptoService.encryptDownloadUri(indexName, hit.file_id)\n                        return hit\n                    }),\n                took: hrTimeToMilliSeconds(process.hrtime(startTime))\n            }))\n            .catch(next)\n    })\n\n    /**\n     * @api {get} api/search/tree Get documents tree by query  \n     * @apiGroup Search\n     *      \n     * @apiParam {String} query URI_ENCODED query string. Check details of query syntax [here](https://blog.ambar.cloud/mastering-ambar-search-queries/).\n     *\n     * @apiHeader {String} ambar-email User email.\n     * @apiHeader {String} ambar-email-token User token.\n     * \n     *     curl -i http://ambar_api_address/api/search/tree?query=John\n     * \n     * @apiSuccessExample {json} HTTP/1.1 200 OK\n     *\n     * @apiErrorExample {json} HTTP/1.1 400 BadRequest\n     * HTTP/1.1 400 BadRequest\n     */\n    api.get('/tree', (req, res, next) => {\n        const { query: { query: queryStr } } = req\n        const query = decodeURI(queryStr)\n\n        let parsedQuery = QueryParser.parseEsStringQuery(query)\n\n        const startTime = process.hrtime()\n        const email = AuthService.extractEmailFromHeaders(req)\n        const indexName = AuthService.getUserIndex(email)\n\n        EsProxy.getFilesTreeByQuery(storage.elasticSearch, indexName, parsedQuery)\n            .then((results) => res.status(200).json({\n                ...results,\n                took: hrTimeToMilliSeconds(process.hrtime(startTime))\n            }))\n            .catch(next)\n    })\n\n    /**\n     * @api {get} api/search/stats Get documents stats by query  \n     * @apiGroup Search\n     *      \n     * @apiParam {String} query URI_ENCODED query string. Check details of query syntax [here](https://blog.ambar.cloud/mastering-ambar-search-queries/).\n     *\n     * @apiHeader {String} ambar-email User email.\n     * @apiHeader {String} ambar-email-token User token.\n     * \n     *     curl -i http://ambar_api_address/api/search/stats?query=John\n     * \n     * @apiSuccessExample {json} HTTP/1.1 200 OK\n     *\n     * @apiErrorExample {json} HTTP/1.1 400 BadRequest\n     * HTTP/1.1 400 BadRequest\n     */\n    api.get('/stats', (req, res, next) => {\n        const { query: { query: queryStr } } = req\n        const query = decodeURI(queryStr)\n\n        let parsedQuery = QueryParser.parseEsStringQuery(query)\n\n        const startTime = process.hrtime()\n        const email = AuthService.extractEmailFromHeaders(req)\n        const indexName = AuthService.getUserIndex(email)\n\n        EsProxy.getFilesStatsByQuery(storage.elasticSearch, indexName, parsedQuery)\n            .then((results) => res.status(200).json({\n                ...results,\n                took: hrTimeToMilliSeconds(process.hrtime(startTime))\n            }))\n            .catch(next)\n    })\n\n    /**     \n     * @api {get} api/search/:fileId Retrieve File Highlight by Query and fileId     \n     * @apiGroup Search\n     * \n     * @apiDescription This method is useful for getting higlights of large files > 30 MB\n     * \n     * @apiParam {String} fileId file fileId\n     * @apiParam {String} query query string\n     * \n     * @apiHeader {String} ambar-email User email.\n     * @apiHeader {String} ambar-email-token User token.\n     * \n     * @apiExample {curl} Retrieve Higlights for File with fileId `318be2290125e0a6cfb7229133ba3c4632068ae04942ed5c7c660718d9d41eb3`\n     *     curl -i http://ambar:8004/api/search/318be2290125e0a6cfb7229133ba3c4632068ae04942ed5c7c660718d9d41eb3?query=John\n     *  \n     * @apiSuccessExample {json} HTTP/1.1 200 OK\n     *\n     * @apiErrorExample {json} HTTP/1.1 400 BadRequest\n     * HTTP/1.1 400 BadRequest\n     */\n    api.get('/:fileId', (req, res, next) => {\n        const { params: { fileId: fileId }, query: { query: query } } = req\n\n        if (!query || query === '') {\n            res.status(400).json(new ErrorResponse('Query is empty'))\n            return\n        }\n\n        let parsedQuery = QueryParser.parseEsStringQuery(query)\n\n        const email = AuthService.extractEmailFromHeaders(req)\n        const indexName = AuthService.getUserIndex(email)\n\n        EsProxy.getFileHighlightByFileId(storage.elasticSearch, indexName, parsedQuery, fileId)\n            .then((hit) => {\n                let highlight = hit.content && hit.content.highlight ? hit.content.highlight : null\n                if (!highlight) {\n                    highlight = { 'text': [''] }\n                }\n\n                res.status(200).json({ highlight: highlight })\n\n                return\n            })\n            .catch(next)\n    })\n\n    /**     \n     * @api {get} api/search/:fileId/full Retrieve Full File Highlight by Query and fileId     \n     * @apiGroup Search\n     * \n     * @apiDescription This method is useful for getting higlights of large files > 30 MB\n     * \n     * @apiParam {String} fileId file fileId\n     * @apiParam {String} query query string\n     * \n     * @apiHeader {String} ambar-email User email.\n     * @apiHeader {String} ambar-email-token User token.\n     * \n     * @apiExample {curl} Retrieve Full Higlight for File with fileId `318be2290125e0a6cfb7229133ba3c4632068ae04942ed5c7c660718d9d41eb3`\n     *     curl -i http://ambar:8004/api/search/318be2290125e0a6cfb7229133ba3c4632068ae04942ed5c7c660718d9d41eb3/full?query=John\n     *  \n     * @apiSuccessExample {json} HTTP/1.1 200 OK\n     *       Aesop, by some strange accident it seems to have entirely<br/>disappeared, and to have been lost sight of. His name is<br/>mentioned by Avienus; by Suidas, a celebrated critic, at the<br/>close of the eleventh century, who gives in his lexicon several<br/>isolated verses of his version of the fables; and by <em>John</em><br/>Tzetzes, a grammarian and poet of Constantinople, who lived<br/>during the latter half of the twelfth century. Nevelet, in the<br/>preface to the volume which we have described, points out that<br/>the Fables of Planudes could not be the work of Aesop, as they<br/>contain a reference in two places to Holy\n     * \n     * @apiErrorExample {json} HTTP/1.1 400 BadRequest\n     * HTTP/1.1 400 BadRequest\n     */\n    api.get('/:fileId/full', (req, res, next) => {\n        const { params: { fileId: fileId }, query: { query: query } } = req\n\n        if (!query || query === '') {\n            res.status(400).json(new ErrorResponse('Query is empty'))\n            return\n        }\n\n        let parsedQuery = QueryParser.parseEsStringQuery(query)\n\n        const email = AuthService.extractEmailFromHeaders(req)\n        const indexName = AuthService.getUserIndex(email)\n\n        EsProxy.getFullFileHighlightByFileId(storage.elasticSearch, indexName, parsedQuery, fileId)\n            .then((hit) => {\n                res.status(200).json(hit)\n\n                return\n            })\n            .catch(next)\n    })\n\n    return api\n}\n"]}