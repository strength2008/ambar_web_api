{"version":3,"sources":["../../src/api/crawlers.js"],"names":["AmbarCrawlerSettingsBuilder","UNDEFINED_STATE","DROPBOX_CRAWLER_ID","config","storage","api","use","ensureAuthenticated","crawlerSettingsToUserView","crawlerSettings","state","credentials","token","password","last_run_time","undefined","last_run_time_diff","index_name","is_removed","_id","crawlerSettingsToShortUserView","id","getDateTimeDifferenceFromNowInHumanForm","locations","get","req","res","next","email","extractEmailFromHeaders","indexName","getUserIndex","crawlerUid","getCrawlerUid","getCrawlerSettingsByCrawlerUid","mongoDb","then","sendStatus","getCrawlerStateBySettingsUid","crawler","status","json","catch","err","statusCode","message","post","body","accountId","settings","buildDropboxCrawlerSettings","uid","result","createCrawlerSettings","enqueueCrawlerMessage","schedule","is_active","createNewJob","delete","removeCrawlerSettingsByCrawlerUid","tryRemoveJob","tryDisableToken","crawlerId","params","isSettingsPageAllowed","buildCrawlerSettings","updateCrawlerSettings","getCrawlersSettingsByIndexName","promises","map","cs","Promise","all","crawlers","sort","a","b","localeCompare","put","getExecutingCrawlerContainerNameBySettingsUid","crawlerContainerName","stopCrawlerContainer","setCurrentCrawlerTask","redis","startCrawlerContainer","containerName","updateCrawlerSettingsLastRunTime","getCurrentDateTime"],"mappings":"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","file":"crawlers.js","sourcesContent":["import { Router } from 'express'\nimport ErrorResponse from '../utils/ErrorResponse'\nimport { DockerProxy, CacheProxy, MongoProxy, EsProxy, CrawlerSchedulerService, AuthService, CryptoService, DropboxProxy, DateTimeService, QueueProxy } from '../services'\nimport * as AmbarCrawlerSettingsBuilder from '../models/AmbarCrawlerSettingsBuilder'\n\nconst UNDEFINED_STATE = 'undefined'\nconst DROPBOX_CRAWLER_ID = 'Dropbox'\n\nexport default ({ config, storage }) => {\n    let api = Router()\n\n    api.use(AuthService.ensureAuthenticated(storage))\n\n    const crawlerSettingsToUserView = (crawlerSettings, state) => {\n        return {\n            ...crawlerSettings,\n            credentials: {\n                ...crawlerSettings.credentials,\n                token: crawlerSettings.credentials.token != '' ? '******' : '',\n                password: crawlerSettings.credentials.password != '' ? '******' : '',\n            },\n            state: state || UNDEFINED_STATE,\n            last_run_time: undefined,\n            last_run_time_diff: undefined,\n            index_name: undefined,\n            is_removed: undefined,\n            _id: undefined\n        }\n    }\n\n    const crawlerSettingsToShortUserView = (crawlerSettings, state) => {\n        return {\n            id: crawlerSettings.id,\n            last_run_time: crawlerSettings.last_run_time,\n            last_run_time_diff: crawlerSettings.last_run_time ? DateTimeService.getDateTimeDifferenceFromNowInHumanForm(crawlerSettings.last_run_time) : undefined,\n            state: state || UNDEFINED_STATE,\n            locations: crawlerSettings.locations\n        }\n    }\n\n    ////////////// CALLED FROM UI ACCOUNT PAGE //////////////\n    /**\n     * Get Dropbox crawler\n     */\n    api.get('/account/dropbox', (req, res, next) => {\n        const email = AuthService.extractEmailFromHeaders(req)\n        const indexName = AuthService.getUserIndex(email)\n\n        const crawlerUid = AmbarCrawlerSettingsBuilder.getCrawlerUid(DROPBOX_CRAWLER_ID, indexName)\n\n        MongoProxy.getCrawlerSettingsByCrawlerUid(storage.mongoDb, crawlerUid)\n            .then(crawlerSettings => {\n                if (!crawlerSettings) {\n                    res.sendStatus(404)\n                    return\n                }\n\n                return CrawlerSchedulerService.getCrawlerStateBySettingsUid(storage, crawlerUid)\n                    .then(state => {\n                        const crawler = crawlerSettingsToShortUserView(crawlerSettings, state)\n                        res.status(200).json(crawler)\n                    })\n            })\n            .catch((err) => {\n                if (err.statusCode) {\n                    res.status(err.statusCode).json(new ErrorResponse(err.message))\n                } else {\n                    next(err)\n                }\n            })\n    })\n\n    /**\n     * Create Dropbox crawler\n     */\n    api.post('/account/dropbox', (req, res, next) => {\n        const { body } = req\n\n        if (!body) {\n            res.status(400).json(new ErrorResponse('Request body is empty'))\n            return\n        }\n\n        const { accountId, token, locations } = body\n\n        if (!accountId || !token || !locations) {\n            res.status(400).json(new ErrorResponse('Please provice account id, token and locations'))\n            return\n        }\n\n        const email = AuthService.extractEmailFromHeaders(req)\n        const indexName = AuthService.getUserIndex(email)\n\n        const crawlerUid = AmbarCrawlerSettingsBuilder.getCrawlerUid(DROPBOX_CRAWLER_ID, indexName)\n\n        const settings = AmbarCrawlerSettingsBuilder.buildDropboxCrawlerSettings(DROPBOX_CRAWLER_ID, indexName, accountId, token, locations)\n\n        MongoProxy.getCrawlerSettingsByCrawlerUid(storage.mongoDb, settings.uid)\n            .then(result => {\n                if (result) {\n                    res.status(400).json(new ErrorResponse(`Crawler with uid '${settings.id}' already exists`))\n                    return\n                }\n\n                return MongoProxy.createCrawlerSettings(storage.mongoDb, settings)\n                    .then(() => {\n                        return QueueProxy.enqueueCrawlerMessage(storage, { uid: settings.uid })\n                    })\n                    .then(() => {\n                        if (settings.schedule.is_active) {\n                            return CrawlerSchedulerService.createNewJob(storage, settings)\n                        }\n                    })\n                    .then(() => res.sendStatus(201))\n\n            })\n            .catch(next)\n    })\n\n    /**\n     * Delete Dropbox crawler\n     */\n    api.delete('/account/dropbox/delete', (req, res, next) => {\n        const email = AuthService.extractEmailFromHeaders(req)\n        const indexName = AuthService.getUserIndex(email)\n\n        const crawlerUid = AmbarCrawlerSettingsBuilder.getCrawlerUid(DROPBOX_CRAWLER_ID, indexName)\n\n        MongoProxy.getCrawlerSettingsByCrawlerUid(storage.mongoDb, crawlerUid)\n            .then(crawler => {\n                if (!crawler || crawler.is_removed) {\n                    res.sendStatus(404)\n                    return\n                }\n\n                return MongoProxy.removeCrawlerSettingsByCrawlerUid(storage.mongoDb, crawlerUid)\n                    .then(() => CrawlerSchedulerService.tryRemoveJob(crawlerUid))\n                    .then(() => DropboxProxy.tryDisableToken(crawler.credentials.token))\n                    .then(result => res.sendStatus(200))\n            })\n            .catch(next)\n    })\n\n    ////////////// CALLED FROM UI SETTING PAGE //////////////\n\n    /**\n     * Add or Update crawler settings (uid is calculated by user email->indexName)\n     */\n    api.post('/:id', (req, res, next) => {\n        const { params: { id: crawlerId }, body } = req\n\n        if (!AuthService.isSettingsPageAllowed(config, req)) {\n            res.status(403).json(new ErrorResponse('Forbidden'))\n            return\n        }\n\n        if (!body) {\n            res.status(400).json(new ErrorResponse('Request body is empty'))\n            return\n        }\n\n        const email = AuthService.extractEmailFromHeaders(req)\n        const indexName = AuthService.getUserIndex(email)\n\n        body.id = crawlerId\n        body.index_name = indexName\n\n        let settings\n        try {\n            /// Here crawler unique id is generated (settings.uid)\n            settings = AmbarCrawlerSettingsBuilder.buildCrawlerSettings(body)\n        } catch (err) {\n            res.status(400).json(new ErrorResponse(err))\n            return\n        }\n\n        MongoProxy.getCrawlerSettingsByCrawlerUid(storage.mongoDb, settings.uid)\n            .then(result => {\n                if (!result) {\n                    return MongoProxy.createCrawlerSettings(storage.mongoDb, settings)\n                        .then(() => {\n                            if (settings.schedule.is_active) {\n                                return CrawlerSchedulerService.createNewJob(storage, settings)\n                            }\n                        })\n                        .then(() => res.sendStatus(201))\n                }\n\n                return !result.is_removed\n                    ? MongoProxy.updateCrawlerSettings(storage.mongoDb, settings)\n                        .then(() => CrawlerSchedulerService.tryRemoveJob(settings.uid))\n                        .then(() => {\n                            if (settings.schedule.is_active) {\n                                return CrawlerSchedulerService.createNewJob(storage, settings)\n                            }\n                        })\n                        .then(() => res.sendStatus(200))\n                    : res.status(400).json(new ErrorResponse(`Can't update settings for removed crawler '${settings.id}'`))\n            })\n            .catch(next)\n    })\n\n    /**\n     * Delete crawler container and its settings (uid is calculated by user email->indexName)\n     */\n    api.delete('/:id', (req, res, next) => {\n        const { params: { id: crawlerId } } = req\n\n        if (!AuthService.isSettingsPageAllowed(config, req)) {\n            res.status(403).json(new ErrorResponse('Forbidden'))\n            return\n        }\n\n        const email = AuthService.extractEmailFromHeaders(req)\n        const indexName = AuthService.getUserIndex(email)\n\n        const crawlerUid = AmbarCrawlerSettingsBuilder.getCrawlerUid(crawlerId, indexName)\n\n        MongoProxy.getCrawlerSettingsByCrawlerUid(storage.mongoDb, crawlerUid)\n            .then(result => {\n                if (result === null || result.is_removed) {\n                    res.sendStatus(404)\n                    return\n                }\n\n                return MongoProxy.removeCrawlerSettingsByCrawlerUid(storage.mongoDb, crawlerUid)\n                    .then(() => CrawlerSchedulerService.tryRemoveJob(crawlerUid))\n                    .then(result => res.sendStatus(200))\n            })\n            .catch(next)\n    })\n\n    /**\n     * Get crawlers list (for user, by index name)\n     */\n    api.get('/', (req, res, next) => {\n        if (!AuthService.isSettingsPageAllowed(config, req)) {\n            res.status(403).json(new ErrorResponse('Forbidden'))\n            return\n        }\n\n        const email = AuthService.extractEmailFromHeaders(req)\n        const indexName = AuthService.getUserIndex(email)\n\n        MongoProxy.getCrawlersSettingsByIndexName(storage.mongoDb, indexName)\n            .then(crawlerSettings => {\n                const promises = crawlerSettings.map(cs =>\n                    CrawlerSchedulerService.getCrawlerStateBySettingsUid(storage, cs.uid)\n                        .then(state => {\n                            return crawlerSettingsToUserView(cs, state)\n                        })\n                )\n\n                return Promise.all(promises)\n                    .then((crawlers) => {\n                        res.status(200).json(crawlers.sort((a, b) => a.id.localeCompare(b.id)))\n                    })\n            })\n            .catch(next)\n    })\n\n    /**\n     * Get crawler settings by id (uid is calculated by user email->indexName)\n     */\n    api.get('/:id', (req, res, next) => {\n        const { params: { id: crawlerId } } = req\n\n        if (!AuthService.isSettingsPageAllowed(config, req)) {\n            res.status(403).json(new ErrorResponse('Forbidden'))\n            return\n        }\n\n        const email = AuthService.extractEmailFromHeaders(req)\n        const indexName = AuthService.getUserIndex(email)\n\n        const crawlerUid = AmbarCrawlerSettingsBuilder.getCrawlerUid(crawlerId, indexName)\n\n        MongoProxy.getCrawlerSettingsByCrawlerUid(storage.mongoDb, crawlerUid)\n            .then(crawlerSettings => {\n                if (!crawlerSettings || crawlerSettings.is_removed) {\n                    res.sendStatus(404)\n                    return\n                }\n\n                return CrawlerSchedulerService.getCrawlerStateBySettingsUid(storage, crawlerUid)\n                    .then(state => {\n                        res.status(200).json(crawlerSettingsToUserView(crawlerSettings, state))\n                    })\n            })\n            .catch(next)\n    })\n\n    /**\n     * Start crawler by id (uid is calculated by user email->indexName)\n     */\n    api.put('/:id/start', (req, res, next) => {\n        const { params: { id: crawlerId } } = req\n\n        if (!AuthService.isSettingsPageAllowed(config, req)) {\n            res.status(403).json(new ErrorResponse('Forbidden'))\n            return\n        }\n\n        const email = AuthService.extractEmailFromHeaders(req)\n        const indexName = AuthService.getUserIndex(email)\n\n        const crawlerUid = AmbarCrawlerSettingsBuilder.getCrawlerUid(crawlerId, indexName)\n\n        QueueProxy.enqueueCrawlerMessage(storage, { uid: crawlerUid })\n            .then(result => res.sendStatus(200))\n            .catch(next)\n    })\n\n    /**\n     * Stop crawler by id (uid is calculated by user email->indexName)\n     */\n    api.put('/:id/stop', (req, res, next) => {\n        const { params: { id: crawlerId } } = req\n\n        if (!AuthService.isSettingsPageAllowed(config, req)) {\n            res.status(403).json(new ErrorResponse('Forbidden'))\n            return\n        }\n\n        const email = AuthService.extractEmailFromHeaders(req)\n        const indexName = AuthService.getUserIndex(email)\n\n        const crawlerUid = AmbarCrawlerSettingsBuilder.getCrawlerUid(crawlerId, indexName)\n\n        CrawlerSchedulerService.getExecutingCrawlerContainerNameBySettingsUid(storage, crawlerUid)\n            .then(crawlerContainerName => {\n                if (!crawlerContainerName) {\n                    res.sendStatus(200)\n                    return\n                }\n\n                return DockerProxy.stopCrawlerContainer(crawlerContainerName)\n                    .then(result => {\n                        CacheProxy.setCurrentCrawlerTask(storage.redis, crawlerContainerName, '')\n                        return DockerProxy.startCrawlerContainer(crawlerContainerName)\n                    })\n                    .then(result => {\n                        res.sendStatus(200)\n                    })\n                    .catch(err => {\n                        if (err.statusCode && (err.statusCode === 304 || err.statusCode === 404)) {\n                            res.sendStatus(err.statusCode)\n                        } else {\n                            next(err)\n                        }\n                    })\n            })\n    })\n\n    ////////////// CALLED BY CRAWLERS ONLY //////////////\n\n    /**\n     * Get crawler settings by uid\n     */\n    api.get('/settings/uid/:uid', (req, res, next) => {\n        const { params: { uid: crawlerUid } } = req\n\n        MongoProxy.getCrawlerSettingsByCrawlerUid(storage.mongoDb, crawlerUid)\n            .then(crawlerSettings => {\n                if (!crawlerSettings || crawlerSettings.is_removed) {\n                    res.sendStatus(404)\n                    return\n                }\n\n                res.status(200).json(crawlerSettings)\n            })\n            .catch(next)\n    })\n\n    /**\n     * Report start working on a job\n     */\n    api.post('/report/start/:uid', (req, res, next) => {\n        const { params: { uid: crawlerUid } } = req\n\n        const containerName = AuthService.extractEmailFromHeaders(req)\n\n        CrawlerSchedulerService.getExecutingCrawlerContainerNameBySettingsUid(storage, crawlerUid)\n            .then(crawlerContainerName => {\n                if (crawlerContainerName) {\n                    res.sendStatus(409)\n                    return\n                }\n\n                return MongoProxy.updateCrawlerSettingsLastRunTime(storage.mongoDb, crawlerUid, DateTimeService.getCurrentDateTime())\n                    .then(() => {\n                        CacheProxy.setCurrentCrawlerTask(storage.redis, containerName, crawlerUid)\n                        res.sendStatus(200)\n                        return\n                    })\n            })\n            .catch(next)\n    })\n\n    /**\n     * Report finish working on a job\n     */\n    api.post('/report/finish', (req, res, next) => {\n        const containerName = AuthService.extractEmailFromHeaders(req)\n\n        CacheProxy.setCurrentCrawlerTask(storage.redis, containerName, '')\n\n        res.sendStatus(200)\n    })\n\n    return api\n}\n\n\n"]}