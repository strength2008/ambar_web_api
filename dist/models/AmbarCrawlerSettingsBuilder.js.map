{"version":3,"sources":["../../src/models/AmbarCrawlerSettingsBuilder.js"],"names":["ensurePropertyIsDefined","data","property","hasOwnProperty","Error","ensurePropertiesAreDefined","properties","forEach","p","ensurePropertyIsNotEmpty","getCrawlerUid","crawlerId","indexName","getIndexNameFromCrawlerUid","crawlerUid","split","buildCrawlerSettings","CRAWLER_TYPES","AUTH_TYPES","CRAWLER_ID_REGEX","id","description","type","locations","file_regex","credentials","schedule","max_file_size_bytes","verbose","index_name","uid","test","indexOf","toString","l","location","replace","auth_type","cron_schedule","ex","is_removed","buildDropboxCrawlerSettings","accountId","token","settings","map","host_name","ip_address","login","password","is_active"],"mappings":"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","file":"AmbarCrawlerSettingsBuilder.js","sourcesContent":["import { CronJob } from 'cron'\nimport config from '../config'\n\nconst ensurePropertyIsDefined = (data, property) => {\n    if (!data.hasOwnProperty(property)) {\n        throw new Error(`Property \\'${property}\\' undefined`)\n    }\n}\n\nconst ensurePropertiesAreDefined = (data, properties) => {\n    properties.forEach(p => ensurePropertyIsDefined(data, p))\n}\n\nconst ensurePropertyIsNotEmpty = (data, property) => {\n    if (data[property] === '') {\n        throw new Error(`Property \\'${property}\\' is empty`)\n    }\n}\n\nexport const getCrawlerUid = (crawlerId, indexName) => `${crawlerId}_${indexName}`\nexport const getIndexNameFromCrawlerUid = (crawlerUid) => crawlerUid.split('_')[1]\n\nexport const buildCrawlerSettings = (data) => {\n    const CRAWLER_TYPES = ['smb', 'dropbox', 'ftp', 'ftps', 'imap']\n    const AUTH_TYPES = ['ntlm', 'oauth', 'basic']\n    const CRAWLER_ID_REGEX = /^[0-9a-zA-Z\\-]+$/gim\n\n    const {\n        id,\n        description,\n        type,\n        locations,\n        file_regex,\n        credentials,\n        schedule,\n        max_file_size_bytes,\n        verbose,\n        index_name } = data\n\n    ensurePropertiesAreDefined(\n        data, ['id',\n            'description',\n            'type',\n            'locations',\n            'file_regex',\n            'credentials',\n            'schedule',\n            'max_file_size_bytes',\n            'verbose',\n            'index_name'\n        ])\n\n    ensurePropertyIsNotEmpty(data, 'id')\n    ensurePropertyIsNotEmpty(data, 'index_name')\n\n    const uid = getCrawlerUid(id, index_name)\n\n    if (!CRAWLER_ID_REGEX.test(id)) {\n        throw new Error(`Please provide correct crawler id! Only letters and numbers allowed.`)\n    }\n\n    ensurePropertyIsNotEmpty(data, 'type')\n    if (CRAWLER_TYPES.indexOf(type) === -1) {\n        throw new Error(`Unrecognized crawler type ${type}. Allowed types are: ${CRAWLER_TYPES.toString()}`)\n    }\n\n    locations.forEach(l => {\n        ensurePropertiesAreDefined(l, ['host_name', 'ip_address', 'location'])\n        l.location = type != 'smb' ? l.location.replace('//', '') : l.location\n        l.location = l.location == '/' ? '' : l.location\n    })\n\n    ensurePropertyIsNotEmpty(data, 'file_regex')\n\n    ensurePropertiesAreDefined(credentials, ['auth_type', 'login', 'password', 'token'])\n\n    if (AUTH_TYPES.indexOf(credentials.auth_type) === -1) {\n        throw new Error(`Unrecognized auth type ${credentials.auth_type}. Allowed types are: ${AUTH_TYPES.toString()}`)\n    }\n\n    ensurePropertiesAreDefined(schedule, ['is_active', 'cron_schedule'])\n    ensurePropertyIsNotEmpty(schedule, 'cron_schedule')\n\n    //Validating cron_schedule\n    try {\n        new CronJob(schedule.cron_schedule, () => ({}))\n    } catch (ex) {\n        throw new Error(`Cron schedule is invalid. Error: ${ex.toString()}`)\n    }\n\n    return {\n        id,\n        uid,\n        description,\n        type,\n        index_name,\n        locations,\n        file_regex,\n        credentials,\n        schedule,\n        max_file_size_bytes,\n        verbose,\n        is_removed: false\n    }\n}\n\nexport const buildDropboxCrawlerSettings = (id, indexName, accountId, token, locations) => {\n    const uid = getCrawlerUid(id, indexName)\n\n    const settings =\n        {\n            id: id,\n            uid: uid,\n            description: 'Dropbox crawler',\n            type: 'dropbox',\n            index_name: indexName,\n            locations: locations.map(location => {\n                return {\n                    host_name: '',\n                    ip_address: '',\n                    location: location\n                }\n            }),\n            file_regex: '(\\\\.doc[a-z]*$)|(\\\\.xls[a-z]*$)|(\\\\.txt$)|(\\\\.csv$)|(\\\\.htm[a-z]*$)|(\\\\.ppt[a-z]*$)|(\\\\.pdf$)|(\\\\.msg$)|(\\\\.zip$)|(\\\\.eml$)|(\\\\.rtf$)|(\\\\.md$)|(\\\\.png$)|(\\\\.bmp$)|(\\\\.tif[f]*$)|(\\\\.jp[e]*g$)',\n            credentials: {\n                auth_type: 'oauth',\n                login: accountId,\n                password: '',\n                token: token\n            },\n            schedule: {\n                is_active: true,\n                cron_schedule: '*/15 * * * *'\n            },\n            max_file_size_bytes: 10000000,\n            verbose: true,\n            is_removed: false\n        }\n\n    return settings\n}"]}