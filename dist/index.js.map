{"version":3,"sources":["../src/index.js"],"names":["createLogRecord","type","message","source_id","app","server","createServer","use","credentials","origin","json","limit","bodyLimit","destroy","Promise","all","storage","then","process","exit","initializeStorage","init","getExternalNERs","mongoDb","externalNERs","initDefaultTaggingRules","on","config","elasticSearch","listen","env","PORT","localPort","console","log","address","port","indexLogItem","catch","err","error","toString"],"mappings":"2EAAA,4B;AACA,gC;AACA,kC;AACA,4B;AACA,yC;AACA,4B;AACA,kC;AACA,2C;AACA,sC;;AAEA,IAAMA,kBAAkB,SAAlBA,eAAkB,CAACC,IAAD,EAAOC,OAAP,UAAoB;AAC3CD,QAAMA,IADqC;AAE3CE,aAAW,QAFgC;AAG3CD,WAASA,OAHkC,EAApB,EAAxB;;;AAMA,IAAIE,MAAM,wBAAV;;AAEAA,IAAIC,MAAJ,GAAa,eAAKC,YAAL,CAAkBF,GAAlB,CAAb;;AAEAA,IAAIG,GAAJ,CAAQ,oBAAK;AACZC,cAAa,IADD;AAEZC,SAAQ,IAFI,EAAL,CAAR;;;AAKAL,IAAIG,GAAJ,CAAQ,qBAAWG,IAAX,CAAgB;AACvBC,QAAO,iBAAOC,SADS,EAAhB,CAAR;;;AAIA,IAAMC,UAAU,SAAVA,OAAU;AACfC,UAAQC,GAAR,CAAY;AACX,oCAAwBF,OAAxB,CAAgCG,OAAhC,CADW;AAEX,4BAAgBH,OAAhB,CAAwBG,OAAxB,CAFW,CAAZ;;AAIEC,MAJF,CAIO,oBAAMC,QAAQC,IAAR,EAAN,EAJP,CADe,GAAhB;;AAOA;AACA,yBAAeC,iBAAf;AACEH,IADF,CACO,UAACD,OAAD,EAAa;AAClB,QAAO,sBAAYK,IAAZ,CAAiBL,OAAjB;AACLC,KADK,CACA,oBAAM,kCAAwBI,IAAxB,CAA6BL,OAA7B,CAAN,EADA;AAELC,KAFK,CAEA,oBAAM,qBAAWK,eAAX,CAA2BN,QAAQO,OAAnC,CAAN,EAFA;AAGLN,KAHK,CAGA,UAACO,YAAD,UAAkB,0BAAgBH,IAAhB,CAAqBL,OAArB,EAA8BQ,YAA9B,CAAlB,EAHA;AAILP,KAJK,CAIA,oBAAM,qBAAWQ,uBAAX,CAAmCT,QAAQO,OAA3C,CAAN,EAJA;AAKLN,KALK,CAKA,YAAM;AACXC,UAAQQ,EAAR,CAAW,SAAX,EAAsBb,OAAtB;AACAK,UAAQQ,EAAR,CAAW,QAAX,EAAqBb,OAArB;;AAEAT,MAAIG,GAAJ,CAAQ,MAAR,EAAgB,mBAAI,EAAEoB,wBAAF,EAAUX,gBAAV,EAAJ,CAAhB;AACAZ,MAAIG,GAAJ,CAAQ,mCAAoBS,QAAQY,aAA5B,CAAR;AACAxB,MAAIC,MAAJ,CAAWwB,MAAX,CAAkBX,QAAQY,GAAR,CAAYC,IAAZ,IAAoB,iBAAOC,SAA7C;;AAEAC,UAAQC,GAAR,iBAA0B9B,IAAIC,MAAJ,CAAW8B,OAAX,GAAqBA,OAA/C,SAA0D/B,IAAIC,MAAJ,CAAW8B,OAAX,GAAqBC,IAA/E;AACA,oBAAQC,YAAR;AACCrB,UAAQY,aADT;AAEC5B,kBAAgB,MAAhB,kBAAsCI,IAAIC,MAAJ,CAAW8B,OAAX,GAAqBA,OAA3D,SAAsE/B,IAAIC,MAAJ,CAAW8B,OAAX,GAAqBC,IAA3F,CAFD;;AAIA,EAlBK,CAAP;AAmBA,CArBF;AAsBEE,KAtBF,CAsBQ,UAACC,GAAD,EAAS;AACfN,SAAQO,KAAR,4BAAuCD,IAAIE,QAAJ,EAAvC;AACAvB,SAAQC,IAAR,CAAa,CAAb;AACA,CAzBF,E;;AA2Bef,G","file":"index.js","sourcesContent":["import http from 'http'\nimport moment from 'moment'\nimport express from 'express'\nimport cors from 'cors'\nimport bodyParser from 'body-parser'\nimport api from './api'\nimport config from './config'\nimport ntlm from 'express-ntlm'\nimport { CrawlerSchedulerService, QueueProxy, ErrorHandlerService, AuthService, PipelineService, EsProxy, CacheProxy, MandrillProxy, MongoProxy, StorageService } from './services'\n\nconst createLogRecord = (type, message) => ({\n\ttype: type,\n\tsource_id: 'webapi',\n\tmessage: message\n})\n\nlet app = express()\n\napp.server = http.createServer(app)\n\napp.use(cors({\n\tcredentials: true,\n\torigin: true\n}))\n\napp.use(bodyParser.json({\n\tlimit: config.bodyLimit\n}))\n\nconst destroy = () =>\n\tPromise.all([\n\t\tCrawlerSchedulerService.destroy(storage),\n\t\tPipelineService.destroy(storage)\n\t])\n\t\t.then(() => process.exit())\n\n// connect to storage\nStorageService.initializeStorage()\n\t.then((storage) => {\n\t\treturn AuthService.init(storage)\n\t\t\t.then(() => CrawlerSchedulerService.init(storage))\n\t\t\t.then(() => MongoProxy.getExternalNERs(storage.mongoDb))\n\t\t\t.then((externalNERs) => PipelineService.init(storage, externalNERs))\n\t\t\t.then(() => MongoProxy.initDefaultTaggingRules(storage.mongoDb))\n\t\t\t.then(() => {\n\t\t\t\tprocess.on('SIGTERM', destroy)\n\t\t\t\tprocess.on('SIGINT', destroy)\n\n\t\t\t\tapp.use('/api', api({ config, storage }))\n\t\t\t\tapp.use(ErrorHandlerService(storage.elasticSearch))\n\t\t\t\tapp.server.listen(process.env.PORT || config.localPort)\n\n\t\t\t\tconsole.log(`Started on ${app.server.address().address}:${app.server.address().port}`)\n\t\t\t\tEsProxy.indexLogItem(\n\t\t\t\t\tstorage.elasticSearch,\n\t\t\t\t\tcreateLogRecord('info', `Started on ${app.server.address().address}:${app.server.address().port}`)\n\t\t\t\t)\n\t\t\t})\n\t})\n\t.catch((err) => {\n\t\tconsole.error(`Catastrophic failure! ${err.toString()}`)\n\t\tprocess.exit(1)\n\t})\n\nexport default app"]}