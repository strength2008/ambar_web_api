{"version":3,"sources":["../../src/utils/EsQueryBuilder.js"],"names":["FULL_FILE_FRAGMENT_SIZE","FRAGMENT_SIZE","NUMBER_OF_FRAGMENTS","PHRASE_LIMIT","LARGE_FILE_SIZE_BYTES","MAX_TAGS_TO_RETRIEVE","MAX_NES_TO_RETRIEVE","MAX_TAGS_TO_RETRIEVE_IN_AGG","MAX_NES_TO_RETRIEVE_IN_AGG","AMBAR_FILE_INDEX_PREFIX","esFileIndexName","getFullIndexName","indexName","getTagsStatsQuery","from","size","aggs","tags","terms","field","type","getStatsQuery","getShortStatsQuery","getFilesWithHighlightsQuery","request","getFilesQuery","getFilesWithoutHighlightsQuery","getFileHighlightQuery","fileId","getFullFileHighlightQuery","getFilesTreeQuery","getBoolSubqueries","mustList","contentShouldList","tagQueriesList","neQueriesList","query","bool","must","full_name_parts","file_id","thumb_available","content_type","sha256","getFilesStatsQuery","extensions","summary","stats","children","esFileTagTypeName","names","types","named_entities","esFileNamedEntityTypeName","isWildcardQuery","test","queries","onlySmallFiles","onlyLargeFiles","content","push","simple_query_string","fields","default_operator","term","range","lt","gte","name","wildcard","toLowerCase","match","author","source","length","sourceShouldList","map","should","minimum_should_match","lte","when","forEach","tag","has_child","tagQuery","namedEntities","ne","neQuery","withoutHiddenMarkOnly","esFileHiddenMarkTypeName","match_all","withHiddenMarkOnly","must_not","includeContentHighlight","fullFileHighlight","highlightFields","pre_tags","post_tags","fragment_size","number_of_fragments","highlight_query","phrase_limit","undefined","no_match_size","resultingQuery","inner_hits","highlight","require_field_match","order"],"mappings":"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","file":"EsQueryBuilder.js","sourcesContent":["import config from '../config'\n\nconst FULL_FILE_FRAGMENT_SIZE = 10 * 1024 * 1024\nconst FRAGMENT_SIZE = 500\nconst NUMBER_OF_FRAGMENTS = 50\nconst PHRASE_LIMIT = 1024\nconst LARGE_FILE_SIZE_BYTES = 50000000\nconst MAX_TAGS_TO_RETRIEVE = 100\nconst MAX_NES_TO_RETRIEVE = 500\nconst MAX_TAGS_TO_RETRIEVE_IN_AGG = 50\nconst MAX_NES_TO_RETRIEVE_IN_AGG = 50\n\n/////////////////////////////////////// Index Name /////////////////////////////////////////////////////////\n\nexport const AMBAR_FILE_INDEX_PREFIX = `${config.esFileIndexName}_`\n\nexport const getFullIndexName = (indexName) => `${AMBAR_FILE_INDEX_PREFIX}${indexName}`\n\n/////////////////////////////////////// Tags queries ///////////////////////////////////////////////////////\n\nexport const getTagsStatsQuery = () => (\n    {\n        from: 0,\n        size: 0,\n        aggs: {\n            tags: {\n                terms: { field: 'name', size: MAX_TAGS_TO_RETRIEVE },\n                aggs: { type: { terms: { field: 'type' } } }\n            }\n        }\n    })\n\n/////////////////////////////////////// Stats queries ///////////////////////////////////////////////////////\n\nexport const getStatsQuery = () => (\n    {\n        \"from\": 0,\n        \"size\": 0,\n        \"aggs\": {\n            \"content_type\": {\n                \"terms\": { \"field\": \"content.type\" },\n                \"aggs\": {\n                    \"size\": { \"stats\": { \"field\": \"content.size\" } }\n                }\n            },\n            \"proc_rate\": {\n                \"date_histogram\": {\n                    \"field\": \"indexed_datetime\",\n                    \"interval\": \"day\"\n                },\n                \"aggs\": {\n                    \"source\": {\n                        \"terms\": { \"field\": \"meta.source_id\" }\n                    }\n                }\n            },\n            \"proc_total\": {\n                \"stats\": { \"field\": \"content.size\" }\n            }\n        }\n    }\n)\n\nexport const getShortStatsQuery = () => (\n    {\n        \"from\": 0,\n        \"size\": 0,\n        \"aggs\": {\n            \"proc_total\": {\n                \"stats\": { \"field\": \"content.size\" }\n            }\n        }\n    }\n)\n\n/////////////////////////////////////// Search queries //////////////////////////////////////////////////////\n\nexport const getFilesWithHighlightsQuery = (request, from, size) => getFilesQuery(request, from, size, true, false, true)\nexport const getFilesWithoutHighlightsQuery = (request, from, size) => getFilesQuery(request, from, size, false, true, false)\nexport const getFileHighlightQuery = (request, fileId) => getFilesQuery(request, 0, 1, false, false, true, fileId)\nexport const getFullFileHighlightQuery = (request, fileId) => getFilesQuery(request, 0, 1, false, false, true, fileId, true)\nexport const getFilesTreeQuery = (request) => {\n    const { mustList, contentShouldList, tagQueriesList, neQueriesList } = getBoolSubqueries(request, false, false)\n\n    return {\n        from: 0,\n        size: 0,\n        query: {\n            bool: {\n                must: mustList\n            }\n        },\n        aggs: {\n            full_name_parts: {\n                terms: {\n                    field: 'meta.full_name_parts',\n                    size: 200\n                },\n                aggs: {\n                    file_id: {\n                        terms: {\n                            field: 'file_id',\n                            size: 1\n                        }\n                    },\n                    thumb_available: {\n                        terms: {\n                            field: 'content.thumb_available',\n                            size: 1\n                        }\n                    },\n                    content_type: {\n                        terms: {\n                            field: 'content.type',\n                            size: 1\n                        }\n                    },\n                    sha256: {\n                        terms: {\n                            field: 'sha256',\n                            size: 1\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\nexport const getFilesStatsQuery = (request) => {\n    const { mustList, contentShouldList, tagQueriesList, neQueriesList } = getBoolSubqueries(request, false, false)\n\n    return {\n        from: 0,\n        size: 0,\n        query: {\n            bool: {\n                must: mustList\n            }\n        },\n        aggs: {\n            extensions: {\n                terms: { \"field\": \"meta.extension\" },\n            },\n            summary: {\n                stats: { \"field\": \"content.size\" }\n            },\n            tags: {\n                children: {\n                    type: config.esFileTagTypeName\n                },\n                aggs: {\n                    names: {\n                        terms: {\n                            field: 'name',\n                            size: MAX_TAGS_TO_RETRIEVE_IN_AGG\n                        },\n                        aggs: {\n                            types: {\n                                terms: {\n                                    field: 'type',\n                                    size: 1\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            named_entities: {\n                children: {\n                    type: config.esFileNamedEntityTypeName\n                },\n                aggs: {\n                    names: {\n                        terms: {\n                            field: 'name',\n                            size: MAX_NES_TO_RETRIEVE_IN_AGG\n                        },\n                        aggs: {\n                            types: {\n                                terms: {\n                                    field: 'type',\n                                    size: 1\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nconst isWildcardQuery = (query) => /[\\*\\?]/g.test(query)\n\nconst getBoolSubqueries = (queries, onlySmallFiles, onlyLargeFiles, fileId = null) => {\n    const mustList = []\n    const contentShouldList = []\n    const tagQueriesList = []\n    const neQueriesList = []\n\n    if (queries.content && queries.content != '') {\n        contentShouldList.push({\n            simple_query_string: {\n                query: queries.content,\n                fields: ['content.text', 'content.author.analyzed', 'meta.source_id.analyzed', 'meta.full_name.analyzed'],\n                default_operator: 'and'\n            }\n        })\n    }\n\n    if (fileId && fileId != '') {\n        mustList.push({ term: { file_id: fileId } })\n    }\n\n    if (onlySmallFiles) {\n        mustList.push({ range: { 'content.size': { lt: LARGE_FILE_SIZE_BYTES } } })\n    }\n\n    if (onlyLargeFiles) {\n        mustList.push({ range: { 'content.size': { gte: LARGE_FILE_SIZE_BYTES } } })\n    }\n\n    mustList.push({ term: { 'content.state': 'processed' } })\n\n    if (queries.name && queries.name != '') {\n        mustList.push(isWildcardQuery(queries.name) ? { wildcard: { 'meta.full_name': queries.name.toLowerCase() } } : { match: { 'meta.full_name.analyzed': queries.name } })\n    }\n\n    if (queries.author && queries.author != '') {\n        mustList.push(isWildcardQuery(queries.author) ? { wildcard: { 'content.author': queries.author.toLowerCase() } } : { match: { 'content.author.analyzed': queries.author } })\n    }\n\n    if (queries.source && queries.source.length > 0) {\n        const sourceShouldList = queries.source.map(source => (isWildcardQuery(source) ? { wildcard: { 'meta.source_id': source.toLowerCase() } } : { match: { 'meta.source_id.analyzed': source } }))\n        mustList.push({\n            bool: {\n                should: sourceShouldList,\n                minimum_should_match: 1\n            }\n        })\n    }\n\n    if (queries.size && queries.size.gte) {\n        mustList.push({ range: { 'content.size': { gte: queries.size.gte } } })\n    }\n\n    if (queries.size && queries.size.lte) {\n        mustList.push({ range: { 'content.size': { lte: queries.size.lte } } })\n    }\n\n    if (queries.when && queries.when.gte) {\n        mustList.push({ range: { 'meta.updated_datetime': { gte: queries.when.gte } } })\n    }\n\n    if (queries.when && queries.when.lte) {\n        mustList.push({ range: { 'meta.updated_datetime': { lte: queries.when.lte } } })\n    }\n\n    if (queries.tags && queries.tags.length > 0) {\n        queries.tags.forEach(tag => {\n            tagQueriesList.push({\n                term: {\n                    name: tag\n                }\n            })\n        })\n    }\n\n    if (tagQueriesList.length > 0) {\n        tagQueriesList.forEach(tagQuery => {\n            mustList.push({\n                has_child: {\n                    type: config.esFileTagTypeName,\n                    query: tagQuery\n                }\n            })\n        })\n    }\n\n    if (queries.namedEntities && queries.namedEntities.length > 0) {\n        queries.namedEntities.forEach(ne => {\n            neQueriesList.push({\n                term: {\n                    name: ne\n                }\n            })\n        })\n    }\n\n    if (neQueriesList.length > 0) {\n        neQueriesList.forEach(neQuery => {\n            mustList.push({\n                has_child: {\n                    type: config.esFileNamedEntityTypeName,\n                    query: neQuery\n                }\n            })\n        })\n    }\n\n    if (contentShouldList.length > 0) {\n        mustList.push({\n            bool: {\n                should: contentShouldList,\n                minimum_should_match: 1\n            }\n        })\n    }\n\n    if (queries.withoutHiddenMarkOnly) {\n        mustList.push({\n            bool: {\n                must: [\n                    {\n                        has_child: {\n                            type: config.esFileHiddenMarkTypeName,\n                            query: {\n                                match_all: {}\n                            }\n                        }\n                    }\n                ]\n            }\n        })\n    }\n\n    if (queries.withHiddenMarkOnly) {\n        mustList.push({\n            bool: {\n                must_not: [\n                    {\n                        has_child: {\n                            type: config.esFileHiddenMarkTypeName,\n                            query: {\n                                match_all: {}\n                            }\n                        }\n                    }\n                ]\n            }\n        })\n    }\n\n    return {\n        mustList,\n        contentShouldList,\n        tagQueriesList,\n        neQueriesList\n    }\n}\n\nconst getFilesQuery = (queries, from, size, onlySmallFiles, onlyLargeFiles, includeContentHighlight, fileId = null, fullFileHighlight = false) => {\n    const { mustList, contentShouldList, tagQueriesList, neQueriesList } = getBoolSubqueries(queries, onlySmallFiles, onlyLargeFiles, fileId)\n\n    let highlightFields = {\n        'content.author': {\n            pre_tags: [''],\n            post_tags: [''],\n            fragment_size: FRAGMENT_SIZE,\n            number_of_fragments: NUMBER_OF_FRAGMENTS\n        },\n        'content.author.analyzed': {\n            pre_tags: [''],\n            post_tags: [''],\n            fragment_size: FRAGMENT_SIZE,\n            number_of_fragments: NUMBER_OF_FRAGMENTS\n        },\n        'meta.full_name': {\n            pre_tags: [''],\n            post_tags: [''],\n            fragment_size: FRAGMENT_SIZE,\n            number_of_fragments: NUMBER_OF_FRAGMENTS\n        },\n        'meta.source_id': {\n            pre_tags: [''],\n            post_tags: [''],\n            fragment_size: FRAGMENT_SIZE,\n            number_of_fragments: NUMBER_OF_FRAGMENTS\n        },\n        'meta.full_name.analyzed': {\n            pre_tags: [''],\n            post_tags: [''],\n            fragment_size: FRAGMENT_SIZE,\n            number_of_fragments: NUMBER_OF_FRAGMENTS\n        },\n        'meta.source_id.analyzed': {\n            pre_tags: [''],\n            post_tags: [''],\n            fragment_size: FRAGMENT_SIZE,\n            number_of_fragments: NUMBER_OF_FRAGMENTS\n        }\n    }\n\n    if (includeContentHighlight) {\n        highlightFields = {\n            ...highlightFields, 'content.text': {\n                highlight_query: {\n                    bool: {\n                        should: contentShouldList,\n                        minimum_should_match: 1\n                    }\n                },\n                type: 'fvh',\n                fragment_size: fullFileHighlight ? FULL_FILE_FRAGMENT_SIZE : FRAGMENT_SIZE,\n                number_of_fragments: fullFileHighlight ? 1 : NUMBER_OF_FRAGMENTS,\n                phrase_limit: fullFileHighlight ? undefined : PHRASE_LIMIT,\n                no_match_size: fullFileHighlight ? FULL_FILE_FRAGMENT_SIZE : FRAGMENT_SIZE\n            }\n        }\n    }\n\n    const resultingQuery = {\n        from: from,\n        size: size,\n        query: {\n            bool: {\n                must: mustList,\n                should: [\n                    {\n                        has_child: {\n                            type: config.esFileTagTypeName,\n                            query: {\n                                match_all: {}\n                            },\n                            inner_hits: {\n                                from: 0,\n                                size: MAX_TAGS_TO_RETRIEVE,\n                                highlight: {\n                                    fields: {\n                                        'name': {\n                                            pre_tags: [''],\n                                            post_tags: [''],\n                                            fragment_size: FRAGMENT_SIZE,\n                                            number_of_fragments: NUMBER_OF_FRAGMENTS,\n                                            highlight_query: {\n                                                bool: {\n                                                    should: tagQueriesList\n                                                }\n                                            }\n                                        }\n                                    },\n                                    require_field_match: true\n                                }\n                            }\n                        }\n                    },\n                    {\n                        has_child: {\n                            type: config.esFileNamedEntityTypeName,\n                            query: {\n                                match_all: {}\n                            },\n                            inner_hits: {\n                                from: 0,\n                                size: MAX_NES_TO_RETRIEVE\n                            }\n                        }\n                    },\n                    {\n                        has_child: {\n                            type: config.esFileHiddenMarkTypeName,\n                            query: {\n                                match_all: {}\n                            },\n                            inner_hits: {\n                                from: 0,\n                                size: 1\n                            }\n                        }\n                    }\n                ],\n                minimum_should_match: 0\n            }\n        },\n        highlight: {\n            order: 'score',\n            fields: highlightFields,\n            require_field_match: true\n        }\n    }\n\n    return resultingQuery\n}\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////"]}