{"version":3,"sources":["../../src/utils/QueryParser.js"],"names":["PHRASE_REGEX","MAX_WORDS_TO_PERMUTE","FILE_NAME_QUERY","SOURCE_QUERY","SIZE_GTE_QUERY","SIZE_LTE_QUERY","AUTHOR_QUERY","WHEN_QUERY","TAGS_QUERY","SHOW_QUERY","NAMED_ENTITIES_QUERY","normalizeString","string","replace","trim","multiplySize","size","multiplier","toLowerCase","parseEsStringQuery","query","content","name","source","author","gte","lte","when","tags","namedEntities","namedEntitiesMatch","match","entitiesRegex","entity","exec","push","authorMatch","nameMatch","sourceMatch","split","tagsMatch","whenMatch","getStartOfToday","getStartOfYesterday","getStartOfThisWeek","getStartOfThisMonth","getStartOfThisYear","sizeGteMatch","parseInt","sizeLteMatch","withoutHiddenMarkOnly","withHiddenMarkOnly","showMatch"],"mappings":"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","file":"QueryParser.js","sourcesContent":["import { DateTimeService } from '../services'\n\nconst PHRASE_REGEX = /\\\"([^\\\"]+)\\\"/gim\nconst MAX_WORDS_TO_PERMUTE = 4\n\nconst FILE_NAME_QUERY = /((^|\\s)filename:)([^\\s]*)/im\n\nconst SOURCE_QUERY = /((^|\\s)source:)([a-zA-Z0-9\\-\\,\\*]*)/im\n\nconst SIZE_GTE_QUERY = /((^|\\s)size>[=]{0,1})([0-9]*)([k|m]{0,1})/im\nconst SIZE_LTE_QUERY = /((^|\\s)size<[=]{0,1})([0-9]*)([k|m]{0,1})/im\n\nconst AUTHOR_QUERY = /((^|\\s)author:)([^\\s]*)/im\n\nconst WHEN_QUERY = /((^|\\s)when:)((today)|(yesterday)|(thisweek)|(thismonth)|(thisyear))/im\n\nconst TAGS_QUERY = /((^|\\s)tags:)([^\\s]*)/im\n\nconst SHOW_QUERY = /((^|\\s)show:)((removed)|(all))/im\n\nconst NAMED_ENTITIES_QUERY = /(^|\\s)entities:(((\\\"[^\\\"]+\\\")(\\,){0,1})+)/im\n\nconst normalizeString = (string) => string.replace(/[\\s]+/gi, ' ').trim()\n\nconst multiplySize = (size, multiplier) => {\n    if (multiplier.toLowerCase() === 'k') {\n        return size * 1024\n    }\n    if (multiplier.toLowerCase() === 'm') {\n        return size * 1024 * 1024\n    }\n    return size\n}\n\nexport const parseEsStringQuery = (query) => {\n    var content = ''\n    var name = ''\n    var source = []\n    var author = ''\n    var size = { gte: null, lte: null }\n    var when = { gte: null, lte: null }\n    var tags = []\n    var namedEntities = []\n\n    content = normalizeString(query.replace(FILE_NAME_QUERY, '').replace(SOURCE_QUERY, '').replace(SIZE_GTE_QUERY, '').replace(SIZE_LTE_QUERY, '').replace(AUTHOR_QUERY, '').replace(WHEN_QUERY, '').replace(TAGS_QUERY, '').replace(SHOW_QUERY, '')).replace(NAMED_ENTITIES_QUERY, '')\n\n    var namedEntitiesMatch = query.match(NAMED_ENTITIES_QUERY)\n    if (namedEntitiesMatch && namedEntitiesMatch[2]) {\n        const entitiesRegex = /\\\"([^\\\"]+)\\\"/gim\n        let entity\n        while (entity = entitiesRegex.exec(namedEntitiesMatch[2])) {\n            if (entity[1]) { namedEntities.push(entity[1]) }\n        }\n    }\n\n    var authorMatch = query.match(AUTHOR_QUERY)\n    if (authorMatch && authorMatch[3]) {\n        author = authorMatch[3]\n    }\n\n    var nameMatch = query.match(FILE_NAME_QUERY)\n    if (nameMatch && nameMatch[3]) {\n        name = nameMatch[3]\n    }\n\n    var sourceMatch = query.match(SOURCE_QUERY)\n    if (sourceMatch && sourceMatch[3]) {\n        source = sourceMatch[3].split(',')\n    }\n\n    var tagsMatch = query.match(TAGS_QUERY)\n    if (tagsMatch && tagsMatch[3]) {\n        tags = tagsMatch[3].split(',')\n    }\n\n    var whenMatch = query.match(WHEN_QUERY)\n    if (whenMatch && whenMatch[3]) {\n        switch (whenMatch[3].toLowerCase()) {\n            case 'today': {\n                when.gte = DateTimeService.getStartOfToday()\n            } break\n            case 'yesterday': {\n                when.gte = DateTimeService.getStartOfYesterday()\n                when.lte = DateTimeService.getStartOfToday()\n            } break\n            case 'thisweek': {\n                when.gte = DateTimeService.getStartOfThisWeek()\n            } break\n            case 'thismonth': {\n                when.gte = DateTimeService.getStartOfThisMonth()\n            } break\n            case 'thisyear': {\n                when.gte = DateTimeService.getStartOfThisYear()\n            } break\n        }\n    }\n\n    var sizeGteMatch = query.match(SIZE_GTE_QUERY)\n    if (sizeGteMatch && sizeGteMatch[3]) {\n        size.gte = parseInt(sizeGteMatch[3])\n        if (sizeGteMatch[4] && sizeGteMatch[4] !== '') {\n            size.gte = multiplySize(size.gte, sizeGteMatch[4])\n        }\n    }\n\n    var sizeLteMatch = query.match(SIZE_LTE_QUERY)\n    if (sizeLteMatch && sizeLteMatch[3]) {\n        size.lte = parseInt(sizeLteMatch[3])\n        if (sizeLteMatch[4] && sizeLteMatch[4] !== '') {\n            size.lte = multiplySize(size.lte, sizeLteMatch[4])\n        }\n    }\n\n    let withoutHiddenMarkOnly = false\n    let withHiddenMarkOnly = true\n\n    var showMatch = query.match(SHOW_QUERY)\n    if (showMatch && showMatch[3]) {\n        switch (showMatch[3].toLowerCase()) {\n            case 'all': {\n                withHiddenMarkOnly = false\n            } break\n            case 'removed': {\n                withoutHiddenMarkOnly = true\n                withHiddenMarkOnly = false\n            } break\n        }\n    }   \n    return {\n        content: content,\n        name: name,\n        source: source,\n        size: size,\n        author: author,\n        when: when,\n        tags: tags,\n        namedEntities: namedEntities,\n        withoutHiddenMarkOnly: withoutHiddenMarkOnly,\n        withHiddenMarkOnly: withHiddenMarkOnly\n    }\n}"]}