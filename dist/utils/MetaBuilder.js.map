{"version":3,"sources":["../../src/utils/MetaBuilder.js"],"names":["FILE_EXTENSION_REGEX","generateMetaId","source_id","full_name","created_datetime","updated_datetime","getSha256","buildMeta","data","short_name","extension","extra","meta","id","toLowerCase","indexed_datetime","getCurrentDateTime","buildShortMeta","shortName","sourceId","calculatedExtension","exec","length"],"mappings":"kIAAA;;AAEA,IAAMA,uBAAuB,iBAA7B;;AAEA,IAAMC,iBAAiB,SAAjBA,cAAiB,CAACC,SAAD,EAAYC,SAAZ,EAAuBC,gBAAvB,EAAyCC,gBAAzC,EAA8D;AACjF,WAAO,wBAAcC,SAAd,MAA2BJ,SAA3B,GAAuCC,SAAvC,GAAmDC,gBAAnD,GAAsEC,gBAAtE,CAAP;AACH,CAFD;;AAIO,IAAME,gCAAY,SAAZA,SAAY,CAACC,IAAD,EAAU;AACvBC,cADuB,GACoED,IADpE,CACvBC,UADuB,CACXN,SADW,GACoEK,IADpE,CACXL,SADW,CACAO,SADA,GACoEF,IADpE,CACAE,SADA,CACWC,KADX,GACoEH,IADpE,CACWG,KADX,CACkBP,gBADlB,GACoEI,IADpE,CACkBJ,gBADlB,CACoCC,gBADpC,GACoEG,IADpE,CACoCH,gBADpC,CACsDH,SADtD,GACoEM,IADpE,CACsDN,SADtD;;AAG/B,QAAI,CAACO,UAAD;AACG,KAACN,SADJ;AAEG,KAACD,SAFJ;AAGG,KAACQ,SAHJ;AAIG,KAACN,gBAJJ;AAKG,KAACC,gBALR,EAK0B;AACtB,eAAO,IAAP;AACH;;AAED,QAAMO,OAAO;AACTC,YAAIZ,eAAeC,SAAf,EAA0BC,SAA1B,EAAqCC,gBAArC,EAAuDC,gBAAvD,CADK;AAETI,oBAAYA,WAAWK,WAAX,EAFH;AAGTX,mBAAWA,UAAUW,WAAV,EAHF;AAITZ,mBAAWA,SAJF;AAKTQ,mBAAWA,SALF;AAMTN,0BAAkBA,gBANT;AAOTC,0BAAkBA,gBAPT;AAQTM,eAAOA,KARE;AASTI,0BAAkB,0BAAgBC,kBAAhB,EATT,EAAb;;;AAYA,WAAOJ,IAAP;AACH,CAzBM;;AA2BA,IAAMK,0CAAiB,SAAjBA,cAAiB,CAACC,SAAD,EAAYC,QAAZ,EAAyB;;AAEnD,QAAMV,aAAaS,UAAUJ,WAAV,EAAnB;AACA,QAAMX,mBAAiBgB,SAASL,WAAT,EAAjB,SAA2CI,UAAUJ,WAAV,EAAjD;AACA,QAAMZ,YAAYiB,QAAlB;AACA,QAAIT,YAAY,EAAhB;AACA,QAAIU,sBAAsBpB,qBAAqBqB,IAArB,CAA0BZ,UAA1B,CAA1B;AACA,QAAKW,mBAAD,IAA0BA,oBAAoBE,MAApB,GAA6B,CAA3D,EAA+D;AAC3DZ,oBAAYU,oBAAoB,CAApB,CAAZ;AACH;AACD,QAAMhB,mBAAmB,0BAAgBY,kBAAhB,EAAzB;AACA,QAAMX,mBAAmB,0BAAgBW,kBAAhB,EAAzB;AACA,QAAML,QAAQ,EAAd;;AAEA,QAAMC,OAAO;AACTC,YAAIZ,eAAeC,SAAf,EAA0BC,SAA1B,EAAqCC,gBAArC,EAAuDC,gBAAvD,CADK;AAETI,oBAAYA,UAFH;AAGTN,mBAAWA,SAHF;AAITD,mBAAWA,SAJF;AAKTQ,mBAAWA,SALF;AAMTN,0BAAkBA,gBANT;AAOTC,0BAAkBA,gBAPT;AAQTM,eAAOA,KARE;AASTI,0BAAkB,0BAAgBC,kBAAhB,EATT,EAAb;;;AAYA,WAAOJ,IAAP;AACH,CA3BM","file":"MetaBuilder.js","sourcesContent":["import { CryptoService, DateTimeService } from '../services'\n\nconst FILE_EXTENSION_REGEX = /(?:\\.([^.]+))?$/\n\nconst generateMetaId = (source_id, full_name, created_datetime, updated_datetime) => {\n    return CryptoService.getSha256(`${source_id}${full_name}${created_datetime}${updated_datetime}`)\n}\n\nexport const buildMeta = (data) => {\n    const { short_name, full_name, extension, extra, created_datetime, updated_datetime, source_id } = data\n\n    if (!short_name\n        || !full_name\n        || !source_id\n        || !extension\n        || !created_datetime\n        || !updated_datetime) {\n        return null\n    }\n\n    const meta = {\n        id: generateMetaId(source_id, full_name, created_datetime, updated_datetime),\n        short_name: short_name.toLowerCase(),\n        full_name: full_name.toLowerCase(),\n        source_id: source_id,\n        extension: extension,\n        created_datetime: created_datetime,\n        updated_datetime: updated_datetime,\n        extra: extra,\n        indexed_datetime: DateTimeService.getCurrentDateTime()\n    }\n\n    return meta\n}\n\nexport const buildShortMeta = (shortName, sourceId) => {\n\n    const short_name = shortName.toLowerCase()\n    const full_name = `//${sourceId.toLowerCase()}/${shortName.toLowerCase()}`\n    const source_id = sourceId\n    let extension = ''\n    let calculatedExtension = FILE_EXTENSION_REGEX.exec(short_name)\n    if ((calculatedExtension) && (calculatedExtension.length > 0)) {\n        extension = calculatedExtension[0]\n    }\n    const created_datetime = DateTimeService.getCurrentDateTime()\n    const updated_datetime = DateTimeService.getCurrentDateTime()\n    const extra = []\n\n    const meta = {\n        id: generateMetaId(source_id, full_name, created_datetime, updated_datetime),\n        short_name: short_name,\n        full_name: full_name,\n        source_id: source_id,\n        extension: extension,\n        created_datetime: created_datetime,\n        updated_datetime: updated_datetime,\n        extra: extra,\n        indexed_datetime: DateTimeService.getCurrentDateTime()\n    }\n\n    return meta\n}"]}